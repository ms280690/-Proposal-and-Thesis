Prog "Char" ["Prelude"] [] [Func ("Char","isUpper") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'A')]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'Z')]]])),Func ("Char","isLower") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'a')]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'z')]]])),Func ("Char","isAlpha") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Char","isUpper") [Var 1],Comb FuncCall ("Char","isLower") [Var 1]])),Func ("Char","isDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Lit (Charc  '0')],Comb FuncCall ("Prelude","ord") [Var 1]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  '9')]]])),Func ("Char","isAlphaNum") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Char","isAlpha") [Var 1],Comb FuncCall ("Char","isDigit") [Var 1]])),Func ("Char","isOctDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  '0')]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  '7')]]])),Func ("Char","isHexDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Char","isDigit") [Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'A')]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'F')]]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'a')]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'f')]]]]])),Func ("Char","isSpace") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  ' ')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\t')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\n')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\r')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","ord") [Var 1],Lit (Intc  12)]]]]])),Func ("Char","toUpper") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Char","isLower") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'a')]],Comb FuncCall ("Prelude","ord") [Lit (Charc  'A')]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Char","toLower") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Char","isUpper") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'A')]],Comb FuncCall ("Prelude","ord") [Lit (Charc  'a')]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Char","digitToInt") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Char","isDigit") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  '0')]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'A')]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'F')]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'A')]],Lit (Intc  10)]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'a')]],Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'f')]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","ord") [Var 1],Comb FuncCall ("Prelude","ord") [Lit (Charc  'a')]],Lit (Intc  10)]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Char","intToDigit") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Var 1,Lit (Intc  0)],Comb FuncCall ("Prelude","<=") [Var 1,Lit (Intc  9)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","ord") [Lit (Charc  '0')],Var 1]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Var 1,Lit (Intc  10)],Comb FuncCall ("Prelude","<=") [Var 1,Lit (Intc  15)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","ord") [Lit (Charc  'A')],Var 1],Lit (Intc  10)]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))] []