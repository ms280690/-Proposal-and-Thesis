Prog "OracleCompactFlatCurry" ["CEventOracle","Oracle","IOExts","CompactFlatCurry","Directory","Distribution","FileGoodies","FlatCurry","List","Maybe","Prelude","RedBlackTree","SetRBT","Sort","TableRBT","Time","XML","OracleDirectory","OracleDistribution","OracleFileGoodies","OracleFlatCurry","OracleList","OracleMaybe","OraclePrelude","OracleRedBlackTree","OracleSetRBT","OracleSort","OracleTableRBT","OracleTime","OracleXML"] [] [Func ("OracleCompactFlatCurry","isMainOption") 2 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_182") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","getMainFuncFromOptions") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_181") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","getRequiredFromOptions") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","getRequiredFromOptions._#lambda6") []],Comb ConsCall ("Prelude","[]") [],Var 2,Var 1],Var 3]]))),Func ("OracleCompactFlatCurry","getRequiredFromOptions._#lambda6") 3 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_179") [Var 3,Var 2,Var 1]])),Func ("OracleCompactFlatCurry","addImport2Options") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("CompactFlatCurry","Import") []],Comb FuncCall ("OracleList","nub") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","addImport2Options.alwaysReqMod.21") []],Var 1],Comb FuncCall ("OracleCompactFlatCurry","getRequiredFromOptions") [Var 2,Var 3],Var 4],Var 5],Var 6],Var 7]]))),Func ("OracleCompactFlatCurry","addImport2Options.alwaysReqMod.21") 2 Private (FuncType (TCons ("CompactFlatCurry","RequiredSpec") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_178") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","requires") 3 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("CompactFlatCurry","RequiredSpec") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("CompactFlatCurry","Requires") [Var 2,Var 3]])),Func ("OracleCompactFlatCurry","alwaysRequired") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("CompactFlatCurry","RequiredSpec") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("CompactFlatCurry","AlwaysReq") [Var 2]])),Func ("OracleCompactFlatCurry","defaultRequired") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]],Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 7],Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 8],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 9],Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 10],Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude","[]") []]]],Var 11],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 13],Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude","[]") []]],Var 14],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 15],Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 16],Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 17],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 18],Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 19],Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude","[]") []]]]],Var 20],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 21],Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 22],Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude","[]") []]]],Var 23],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 24],Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 25],Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude","[]") []]],Var 26],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 27],Comb ConsCall ("Prelude",":") [Lit (Charc '$'),Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 28],Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Var 29],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 30],Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 31],Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Var 32],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'k'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Var 33],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Var 34],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Var 35],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleCompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Var 36],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]))),Func ("OracleCompactFlatCurry","prelude") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("OracleCompactFlatCurry","getRequiredInModule") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getRequiredInModule.getImpReq.38") [Var 3]],Var 1],Var 2,Var 4]]))),Func ("OracleCompactFlatCurry","getRequiredInModule.getImpReq.38") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CompactFlatCurry","RequiredSpec") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_176") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","getImplicitlyRequired") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getImplicitlyRequired.getImpReq.46") [Var 3]],Var 1],Var 2,Var 4]]))),Func ("OracleCompactFlatCurry","getImplicitlyRequired.getImpReq.46") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CompactFlatCurry","RequiredSpec") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_173") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","defaultRequiredTypes") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleCompactFlatCurry","prelude") [Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]]]]))),Func ("OracleCompactFlatCurry","generateCompactFlatCurryFile") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","computeCompactFlatCurry") [Var 2,Var 3,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","generateCompactFlatCurryFile._#lambda8") [Var 4]],Var 5]]))),Func ("OracleCompactFlatCurry","generateCompactFlatCurryFile._#lambda8") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude",">>") [Comb FuncCall ("OracleFlatCurry","writeFCY") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","done") [Var 4],Var 5]]))),Func ("OracleCompactFlatCurry","computeCompactFlatCurry") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OracleCompactFlatCurry","addImport2Options") [Var 2,Var 1])] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleCompactFlatCurry","_case_171") [Var 3,Var 4,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Comb ConsCall ("CompactFlatCurry","Exports") [],Var 5],Var 4,Var 6],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","any") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","isMainOption") []],Var 7],Var 4,Var 8],Var 9],Var 10]]))]))),Func ("OracleCompactFlatCurry","computeCompactFlatCurry._#lambda9") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","makeCompactFlatCurry") [Var 3,Var 2,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","computeCompactFlatCurry._#lambda9._#lambda10") []],Var 4]]))),Func ("OracleCompactFlatCurry","computeCompactFlatCurry._#lambda9._#lambda10") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude",">>") [Comb FuncCall ("OraclePrelude","putStrLn") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'z'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Comb FuncCall ("OraclePrelude","length") [Comb FuncCall ("OracleCompactFlatCurry","moduleFuns") [Var 2,Var 1],Var 3],Var 4],Var 5],Var 6],Comb FuncCall ("OraclePrelude","return") [Var 2,Var 7],Var 8]]))),Func ("OracleCompactFlatCurry","makeCompactFlatCurry") 3 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","requiredInCompactProg") [Var 2,Var 3,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11") [Var 2,Var 3]],Var 4]]))),Func ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11") 4 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_170") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12") 3 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_169") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda13") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Comb FuncCall ("OracleCompactFlatCurry","tconsName") [Var 3,Var 1],Var 4],Var 2,Var 5]]))),Func ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda14") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","OpDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_168") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","requiredDatatypes") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Let [(4,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","newTypeConsOfTDecl") [Var 2]],Var 1],Var 3,Var 5])] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_167") [Var 2,Var 3,Var 4,Comb FuncCall ("OraclePrelude","null") [Var 4,Var 6],Var 7]]))]))),Func ("OracleCompactFlatCurry","newTypeConsOfTDecl") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_166") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","newTypeConsOfTDecl._#lambda15") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Var 3,Var 1],Var 2,Var 4],Var 5]]))),Func ("OracleCompactFlatCurry","newTypeConsOfTDecl._#lambda16") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Var 3,Var 1],Var 2,Var 4],Var 5]]))),Func ("OracleCompactFlatCurry","newTypeConsOfTDecl._#lambda17") 2 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_163") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","extendTConsWithConsType") 4 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_162") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleCompactFlatCurry","extendTConsWithConsType._#lambda18") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Comb FuncCall ("OracleCompactFlatCurry","consName") [Var 3,Var 1],Var 4],Var 2,Var 5]]))),Func ("OracleCompactFlatCurry","extendFuncTable") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","extendFuncTable._#lambda19") []],Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","extendFuncTable._#lambda19") 3 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleTableRBT","updateRBT") [Comb FuncCall ("OracleCompactFlatCurry","functionName") [Var 2,Var 1],Var 2,Var 4],Var 3,Var 5]]))),Func ("OracleCompactFlatCurry","requiredInCompactProg") 3 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]])))))) (Rule [2,3,1] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Let [(4,Comb FuncCall ("OracleList","nub") [Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","requiredInCompactProg._#lambda22") []],Comb ConsCall ("Prelude","[]") [],Var 3,Var 1],Var 9])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleCompactFlatCurry","moduleName") [Var 2,Var 10])] (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","requiredInCompactProg._#lambda26") []],Comb ConsCall ("Prelude","[]") [],Var 3,Var 11])] (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Let [(7,Comb FuncCall ("OracleCompactFlatCurry","exportedFuncNames") [Comb FuncCall ("OracleCompactFlatCurry","moduleFuns") [Var 2,Var 12],Var 13])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]]]],Let [(8,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 14],Var 5,Var 15],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","emptySetRBT") [Var 16],Comb FuncCall ("OracleSort","leqString") [Var 17],Var 18],Var 19])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCompactFlatCurry","_case_159") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("OraclePrelude","null") [Var 6,Var 20],Var 21],Var 22]]))]))]))]))]))]))),Func ("OracleCompactFlatCurry","requiredInCompactProg._#lambda22") 3 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_154") [Var 3,Var 2,Var 1]])),Func ("OracleCompactFlatCurry","requiredInCompactProg._#lambda26") 3 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_153") [Var 3,Var 2,Var 1]])),Func ("OracleCompactFlatCurry","requiredInCompactProg.add2mainmodset.118") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 1],Var 2,Var 3,Var 4]]))),Func ("OracleCompactFlatCurry","requiredInCompactProg._#lambda28") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]]))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("OraclePrelude","concat") [Var 3,Var 1],Comb FuncCall ("OracleCompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 5,Var 2,Var 7],Comb ConsCall ("Prelude",":") [Var 4,Var 6]],Var 8]]))),Func ("OracleCompactFlatCurry","requiredInCompactProg._#lambda29") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]]))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("OracleList","nub") [Var 3,Var 1],Comb FuncCall ("OracleCompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 5,Var 2,Var 7],Comb ConsCall ("Prelude",":") [Var 4,Var 6]],Var 8]]))),Func ("OracleCompactFlatCurry","requiredInCompactProg._#lambda30") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]])))))))))) (Rule [2,3,4,5,6,7,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 2],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 6,Var 3,Var 1],Comb ConsCall ("Prelude",":") [Var 4,Var 7]],Var 8]]))),Func ("OracleCompactFlatCurry","requiredInCompactProg._#lambda31") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]])))))))) (Rule [2,3,4,5,1] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("OracleList","nub") [Comb FuncCall ("OraclePrelude","++") [Var 2,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","exportedFuncNames") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","moduleFuns") []],Var 1],Var 6],Var 5,Var 7],Var 8],Var 9],Comb FuncCall ("OracleCompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 4,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","moduleName") []],Var 5,Var 10],Var 11],Comb ConsCall ("Prelude",":") [Var 3,Var 5]],Var 12]]))),Func ("OracleCompactFlatCurry","exportedFuncNames") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","exportedFuncNames._#lambda32") []],Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","exportedFuncNames._#lambda33") []],Var 2,Var 1],Var 3]]))),Func ("OracleCompactFlatCurry","exportedFuncNames._#lambda32") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_152") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","exportedFuncNames._#lambda33") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_151") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","getCalledFuncs") 9 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])))))))))))) (Rule [2,3,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_150") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 1]])),Func ("OracleCompactFlatCurry","getCalledFuncs._#lambda34") 12 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]))))))))))))))) (Rule [2,3,4,5,6,7,8,9,10,11,12,1] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Let [(13,Comb FuncCall ("OracleCompactFlatCurry","getRequiredInModule") [Var 11,Var 9,Var 1])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleCompactFlatCurry","getCalledFuncs") [Var 11,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 14],Var 9,Var 15],Var 7,Var 16],Comb ConsCall ("Prelude",":") [Var 12,Var 10],Comb FuncCall ("OracleCompactFlatCurry","extendFuncTable") [Var 4,Comb FuncCall ("OracleCompactFlatCurry","moduleFuns") [Var 12,Var 17],Var 18],Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 19],Var 6,Var 13,Var 20],Var 5,Var 8,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 9,Var 2],Comb FuncCall ("OraclePrelude","++") [Var 3,Var 13,Var 21]],Var 22]]))]))),Func ("OracleCompactFlatCurry","getCalledFuncs._#lambda35") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Var 3,Var 1],Var 2,Var 4],Var 5]]))),Func ("OracleCompactFlatCurry","getCalledFuncs._#lambda36") 3 Private (FuncType (TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Var 3,Var 1],Var 2,Var 4],Var 5]]))),Func ("OracleCompactFlatCurry","getCalledFuncs._#lambda37") 3 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("OracleRedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])))))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_145") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","allFuncCalls") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_144") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","allFuncCallsOfExpr") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_142") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","allFuncCallsOfBranchExpr") 2 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_140") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","allConstructorsOfFunc") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_139") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","allConsOfExpr") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_137") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","allConsOfExpr.consOfBranch.252") 2 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_135") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","allTypesOfFunc") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_133") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","allTypesOfTExpr") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_132") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","unionMap") 2 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleList","union") []],Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Var 2]],Var 1]])),Func ("OracleCompactFlatCurry","functionName") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_131") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","consName") 2 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_130") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","tconsName") 2 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_129") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","moduleImports") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_128") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","moduleTypes") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_127") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","moduleOps") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_126") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","moduleName") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_125") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","moduleFuns") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_124") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","leqQName") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_123") [Var 3,Var 2,Var 1]])),Func ("OracleCompactFlatCurry","readCurrentFlatCurry") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude",">>") [Comb FuncCall ("OraclePrelude","putStr") [Comb FuncCall ("OraclePrelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude","[]") []]]],Var 1],Var 3],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","findSourceFileInLoadPath") [Var 2,Var 4],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40") []],Var 5],Var 6]]))),Func ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleDirectory","doesFileExist") [Comb FuncCall ("OracleFlatCurry","flatCurryFileName") [Var 2,Var 1],Var 3],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41") [Var 2]],Var 4]]))),Func ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_121") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","not") [Var 3,Var 1],Var 4]]))),Func ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleDirectory","getModificationTime") [Comb FuncCall ("OracleFlatCurry","flatCurryFileName") [Var 2,Var 1],Var 4],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42._#lambda43") [Var 3,Var 2]],Var 5]]))),Func ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42._#lambda43") 4 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCompactFlatCurry","_case_120") [Var 2,Var 3,Var 4,Comb FuncCall ("OraclePrelude",">") [Comb FuncCall ("OracleTime","clockTimeToInt") [Var 2,Var 1],Comb FuncCall ("OracleTime","clockTimeToInt") [Var 4,Var 5],Var 6],Var 7]]))),Func ("OracleCompactFlatCurry","getSourceModificationTime") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Time","ClockTime") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleDirectory","doesFileExist") [Comb FuncCall ("OraclePrelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Var 3],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getSourceModificationTime._#lambda44") [Var 2]],Var 4]]))),Func ("OracleCompactFlatCurry","getSourceModificationTime._#lambda44") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Time","ClockTime") []])))))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_119") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","findSourceFileInLoadPath") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleDistribution","getLoadPathForFile") [Var 2,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","findSourceFileInLoadPath._#lambda45") [Var 2]],Var 3]]))),Func ("OracleCompactFlatCurry","findSourceFileInLoadPath._#lambda45") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleFileGoodies","lookupFileInPath") [Comb FuncCall ("OracleFileGoodies","baseName") [Var 2,Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]],Var 3,Var 4],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","findSourceFileInLoadPath._#lambda45._#lambda46") [Var 2]],Var 5]]))),Func ("OracleCompactFlatCurry","findSourceFileInLoadPath._#lambda45._#lambda46") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","maybe") [Comb FuncCall ("OraclePrelude","error") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 1],Var 4],Var 5],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","return") []],Comb FuncCall ("OracleFileGoodies","stripSuffix") [Var 6],Var 7],Var 3,Var 8]]))),Func ("OracleCompactFlatCurry","processPrimitives") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","readPrimSpec") [Comb FuncCall ("OracleCompactFlatCurry","moduleName") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc '2'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 4],Var 5],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","processPrimitives._#lambda47") [Var 3]],Var 6]]))),Func ("OracleCompactFlatCurry","processPrimitives._#lambda47") 3 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","return") [Comb FuncCall ("OracleCompactFlatCurry","mergePrimSpecIntoModule") [Var 3,Var 2,Var 1],Var 4]]))),Func ("OracleCompactFlatCurry","mergePrimSpecIntoModule") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FlatCurry","Prog") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_118") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","mergePrimSpecIntoFunc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_117") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","mergePrimSpecIntoFunc._#selFP3#lib") 2 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_114") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","mergePrimSpecIntoFunc._#selFP4#entry") 2 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_112") [Var 2,Var 1]])),Func ("OracleCompactFlatCurry","readPrimSpec") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleDirectory","doesFileExist") [Var 3,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readPrimSpec._#lambda48") [Var 2,Var 3]],Var 4]]))),Func ("OracleCompactFlatCurry","readPrimSpec._#lambda48") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]))))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_110") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleCompactFlatCurry","readPrimSpec._#lambda48._#lambda49") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("XML","XmlExp") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","return") [Comb FuncCall ("OracleCompactFlatCurry","xml2primtrans") [Var 2,Var 3,Var 1],Var 4]]))),Func ("OracleCompactFlatCurry","xml2primtrans") 3 Private (FuncType (TVar 0) (FuncType (TCons ("XML","XmlExp") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_109") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","xml2primtrans.xml2prim.358") 3 Private (FuncType (TVar 248) (FuncType (TCons ("XML","XmlExp") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 248,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_86") [Var 2,Var 3,Var 1]])),Func ("OracleCompactFlatCurry","_case_86") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("XML","XElem") [4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_85") [Var 2,Var 5,Var 6,Var 4,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_85") 5 Private (TVar (-42)) (Rule [2,5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_84") [Var 2,Var 5,Var 6,Var 8,Var 7,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_84") 6 Private (TVar (-42)) (Rule [2,5,6,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (LPattern (Charc 'p')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_83") [Var 2,Var 5,Var 6,Var 8,Var 1]]),Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_22") [Var 2,Var 5,Var 6,Var 8,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_22") 5 Private (TVar (-42)) (Rule [2,5,6,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [71,72]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_21") [Var 2,Var 5,Var 6,Var 72,Var 71,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_21") 6 Private (TVar (-42)) (Rule [2,5,6,72,71,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 71) [Branch (LPattern (Charc 'g')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_20") [Var 2,Var 5,Var 6,Var 72,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_20") 5 Private (TVar (-42)) (Rule [2,5,6,72,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 72) [Branch (Pattern ("Prelude",":") [73,74]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_19") [Var 2,Var 5,Var 6,Var 74,Var 73,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_19") 6 Private (TVar (-42)) (Rule [2,5,6,74,73,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 73) [Branch (LPattern (Charc 'n')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_18") [Var 2,Var 5,Var 6,Var 74,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_18") 5 Private (TVar (-42)) (Rule [2,5,6,74,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 74) [Branch (Pattern ("Prelude",":") [75,76]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_17") [Var 2,Var 5,Var 6,Var 76,Var 75,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_17") 6 Private (TVar (-42)) (Rule [2,5,6,76,75,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 75) [Branch (LPattern (Charc 'o')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_16") [Var 2,Var 5,Var 6,Var 76,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_16") 5 Private (TVar (-42)) (Rule [2,5,6,76,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 76) [Branch (Pattern ("Prelude",":") [77,78]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_15") [Var 2,Var 5,Var 6,Var 78,Var 77,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_15") 6 Private (TVar (-42)) (Rule [2,5,6,78,77,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 77) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_14") [Var 2,Var 5,Var 6,Var 78,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_14") 5 Private (TVar (-42)) (Rule [2,5,6,78,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 78) [Branch (Pattern ("Prelude",":") [79,80]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_13") [Var 2,Var 5,Var 6,Var 80,Var 79,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_13") 6 Private (TVar (-42)) (Rule [2,5,6,80,79,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 79) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_12") [Var 2,Var 5,Var 6,Var 80,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_12") 5 Private (TVar (-42)) (Rule [2,5,6,80,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 80) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_11") [Var 2,Var 6,Var 5,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_11") 4 Private (TVar (-42)) (Rule [2,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [81,82]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_10") [Var 2,Var 6,Var 81,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_10") 4 Private (TVar (-42)) (Rule [2,6,81,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 81) [Branch (Pattern ("Prelude","(,)") [83,84]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_9") [Var 2,Var 6,Var 84,Var 83,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_9") 5 Private (TVar (-42)) (Rule [2,6,84,83,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 83) [Branch (Pattern ("Prelude",":") [85,86]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_8") [Var 2,Var 6,Var 84,Var 86,Var 85,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_8") 6 Private (TVar (-42)) (Rule [2,6,84,86,85,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 85) [Branch (LPattern (Charc 'n')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_7") [Var 2,Var 6,Var 84,Var 86,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_7") 5 Private (TVar (-42)) (Rule [2,6,84,86,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 86) [Branch (Pattern ("Prelude",":") [87,88]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_6") [Var 2,Var 6,Var 84,Var 88,Var 87,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_6") 6 Private (TVar (-42)) (Rule [2,6,84,88,87,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 87) [Branch (LPattern (Charc 'a')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_5") [Var 2,Var 6,Var 84,Var 88,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_5") 5 Private (TVar (-42)) (Rule [2,6,84,88,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 88) [Branch (Pattern ("Prelude",":") [89,90]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_4") [Var 2,Var 6,Var 84,Var 90,Var 89,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_4") 6 Private (TVar (-42)) (Rule [2,6,84,90,89,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 89) [Branch (LPattern (Charc 'm')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_3") [Var 2,Var 6,Var 84,Var 90,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_3") 5 Private (TVar (-42)) (Rule [2,6,84,90,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 90) [Branch (Pattern ("Prelude",":") [91,92]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_2") [Var 2,Var 6,Var 84,Var 92,Var 91,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_2") 6 Private (TVar (-42)) (Rule [2,6,84,92,91,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 91) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_1") [Var 2,Var 6,Var 84,Var 92,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_1") 5 Private (TVar (-42)) (Rule [2,6,84,92,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 92) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_0") [Var 2,Var 84,Var 6,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_0") 4 Private (TVar (-42)) (Rule [2,84,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 84],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]]])]])),Func ("OracleCompactFlatCurry","_case_83") 5 Private (TVar (-42)) (Rule [2,5,6,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_82") [Var 2,Var 5,Var 6,Var 10,Var 9,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_82") 6 Private (TVar (-42)) (Rule [2,5,6,10,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_81") [Var 2,Var 5,Var 6,Var 10,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_81") 5 Private (TVar (-42)) (Rule [2,5,6,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_80") [Var 2,Var 5,Var 6,Var 12,Var 11,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_80") 6 Private (TVar (-42)) (Rule [2,5,6,12,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_79") [Var 2,Var 5,Var 6,Var 12,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_79") 5 Private (TVar (-42)) (Rule [2,5,6,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_78") [Var 2,Var 5,Var 6,Var 14,Var 13,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_78") 6 Private (TVar (-42)) (Rule [2,5,6,14,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (LPattern (Charc 'm')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_77") [Var 2,Var 5,Var 6,Var 14,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_77") 5 Private (TVar (-42)) (Rule [2,5,6,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_76") [Var 2,Var 5,Var 6,Var 16,Var 15,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_76") 6 Private (TVar (-42)) (Rule [2,5,6,16,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 15) [Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_75") [Var 2,Var 5,Var 6,Var 16,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_75") 5 Private (TVar (-42)) (Rule [2,5,6,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_74") [Var 2,Var 5,Var 6,Var 18,Var 17,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_74") 6 Private (TVar (-42)) (Rule [2,5,6,18,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 17) [Branch (LPattern (Charc 't')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_73") [Var 2,Var 5,Var 6,Var 18,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_73") 5 Private (TVar (-42)) (Rule [2,5,6,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_72") [Var 2,Var 5,Var 6,Var 20,Var 19,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_72") 6 Private (TVar (-42)) (Rule [2,5,6,20,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_71") [Var 2,Var 5,Var 6,Var 20,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_71") 5 Private (TVar (-42)) (Rule [2,5,6,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_70") [Var 2,Var 5,Var 6,Var 22,Var 21,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_70") 6 Private (TVar (-42)) (Rule [2,5,6,22,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 21) [Branch (LPattern (Charc 'v')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_69") [Var 2,Var 5,Var 6,Var 22,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_69") 5 Private (TVar (-42)) (Rule [2,5,6,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_68") [Var 2,Var 5,Var 6,Var 24,Var 23,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_68") 6 Private (TVar (-42)) (Rule [2,5,6,24,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 23) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_67") [Var 2,Var 5,Var 6,Var 24,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_67") 5 Private (TVar (-42)) (Rule [2,5,6,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_66") [Var 2,Var 6,Var 5,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_66") 4 Private (TVar (-42)) (Rule [2,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [25,26]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_65") [Var 2,Var 6,Var 25,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_65") 4 Private (TVar (-42)) (Rule [2,6,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 25) [Branch (Pattern ("Prelude","(,)") [27,28]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_64") [Var 2,Var 6,Var 28,Var 27,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_64") 5 Private (TVar (-42)) (Rule [2,6,28,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_63") [Var 2,Var 6,Var 28,Var 30,Var 29,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_63") 6 Private (TVar (-42)) (Rule [2,6,28,30,29,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 29) [Branch (LPattern (Charc 'n')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_62") [Var 2,Var 6,Var 28,Var 30,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_62") 5 Private (TVar (-42)) (Rule [2,6,28,30,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_61") [Var 2,Var 6,Var 28,Var 32,Var 31,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_61") 6 Private (TVar (-42)) (Rule [2,6,28,32,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 31) [Branch (LPattern (Charc 'a')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_60") [Var 2,Var 6,Var 28,Var 32,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_60") 5 Private (TVar (-42)) (Rule [2,6,28,32,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_59") [Var 2,Var 6,Var 28,Var 34,Var 33,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_59") 6 Private (TVar (-42)) (Rule [2,6,28,34,33,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 33) [Branch (LPattern (Charc 'm')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_58") [Var 2,Var 6,Var 28,Var 34,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_58") 5 Private (TVar (-42)) (Rule [2,6,28,34,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_57") [Var 2,Var 6,Var 28,Var 36,Var 35,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_57") 6 Private (TVar (-42)) (Rule [2,6,28,36,35,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 35) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_56") [Var 2,Var 6,Var 28,Var 36,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_56") 5 Private (TVar (-42)) (Rule [2,6,28,36,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 36) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_55") [Var 2,Var 28,Var 6,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_55") 4 Private (TVar (-42)) (Rule [2,28,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude",":") [37,38]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_54") [Var 2,Var 28,Var 38,Var 37,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_54") 5 Private (TVar (-42)) (Rule [2,28,38,37,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 37) [Branch (Pattern ("XML","XElem") [39,40,41]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_53") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 39,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_53") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,39,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 39) [Branch (Pattern ("Prelude",":") [42,43]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_52") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 43,Var 42,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_52") 8 Private (TVar (-42)) (Rule [2,28,38,40,41,43,42,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 42) [Branch (LPattern (Charc 'l')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_51") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 43,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_51") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,43,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 43) [Branch (Pattern ("Prelude",":") [44,45]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_50") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 45,Var 44,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_50") 8 Private (TVar (-42)) (Rule [2,28,38,40,41,45,44,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 44) [Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_49") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 45,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_49") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,45,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 45) [Branch (Pattern ("Prelude",":") [46,47]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_48") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 47,Var 46,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_48") 8 Private (TVar (-42)) (Rule [2,28,38,40,41,47,46,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 46) [Branch (LPattern (Charc 'b')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_47") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 47,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_47") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,47,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 47) [Branch (Pattern ("Prelude",":") [48,49]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_46") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 49,Var 48,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_46") 8 Private (TVar (-42)) (Rule [2,28,38,40,41,49,48,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 48) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_45") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 49,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_45") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,49,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 49) [Branch (Pattern ("Prelude",":") [50,51]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_44") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 51,Var 50,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_44") 8 Private (TVar (-42)) (Rule [2,28,38,40,41,51,50,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 50) [Branch (LPattern (Charc 'a')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_43") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 51,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_43") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,51,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 51) [Branch (Pattern ("Prelude",":") [52,53]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_42") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 53,Var 52,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_42") 8 Private (TVar (-42)) (Rule [2,28,38,40,41,53,52,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 52) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_41") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 53,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_41") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,53,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 53) [Branch (Pattern ("Prelude",":") [54,55]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_40") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 55,Var 54,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_40") 8 Private (TVar (-42)) (Rule [2,28,38,40,41,55,54,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 54) [Branch (LPattern (Charc 'y')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_39") [Var 2,Var 28,Var 38,Var 40,Var 41,Var 55,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_39") 7 Private (TVar (-42)) (Rule [2,28,38,40,41,55,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 55) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_38") [Var 2,Var 28,Var 38,Var 41,Var 40,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_38") 6 Private (TVar (-42)) (Rule [2,28,38,41,40,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 40) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_37") [Var 2,Var 28,Var 41,Var 38,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_37") 5 Private (TVar (-42)) (Rule [2,28,41,38,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 38) [Branch (Pattern ("Prelude",":") [56,57]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_36") [Var 2,Var 28,Var 41,Var 57,Var 56,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_36") 6 Private (TVar (-42)) (Rule [2,28,41,57,56,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 56) [Branch (Pattern ("XML","XElem") [58,59,60]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_35") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 58,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_35") 8 Private (TVar (-42)) (Rule [2,28,41,57,59,60,58,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 58) [Branch (Pattern ("Prelude",":") [61,62]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_34") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 62,Var 61,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_34") 9 Private (TVar (-42)) (Rule [2,28,41,57,59,60,62,61,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 61) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_33") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 62,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_33") 8 Private (TVar (-42)) (Rule [2,28,41,57,59,60,62,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 62) [Branch (Pattern ("Prelude",":") [63,64]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_32") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 64,Var 63,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_32") 9 Private (TVar (-42)) (Rule [2,28,41,57,59,60,64,63,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 63) [Branch (LPattern (Charc 'n')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_31") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 64,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_31") 8 Private (TVar (-42)) (Rule [2,28,41,57,59,60,64,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 64) [Branch (Pattern ("Prelude",":") [65,66]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_30") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 66,Var 65,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_30") 9 Private (TVar (-42)) (Rule [2,28,41,57,59,60,66,65,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 65) [Branch (LPattern (Charc 't')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_29") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 66,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_29") 8 Private (TVar (-42)) (Rule [2,28,41,57,59,60,66,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 66) [Branch (Pattern ("Prelude",":") [67,68]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_28") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 68,Var 67,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_28") 9 Private (TVar (-42)) (Rule [2,28,41,57,59,60,68,67,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 67) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_27") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 68,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_27") 8 Private (TVar (-42)) (Rule [2,28,41,57,59,60,68,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 68) [Branch (Pattern ("Prelude",":") [69,70]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_26") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 70,Var 69,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_26") 9 Private (TVar (-42)) (Rule [2,28,41,57,59,60,70,69,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 69) [Branch (LPattern (Charc 'y')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_25") [Var 2,Var 28,Var 41,Var 57,Var 59,Var 60,Var 70,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_25") 8 Private (TVar (-42)) (Rule [2,28,41,57,59,60,70,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 70) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_24") [Var 2,Var 28,Var 41,Var 57,Var 60,Var 59,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_24") 7 Private (TVar (-42)) (Rule [2,28,41,57,60,59,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 59) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_23") [Var 2,Var 28,Var 41,Var 60,Var 57,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_23") 6 Private (TVar (-42)) (Rule [2,28,41,60,57,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 57) [Branch (Pattern ("Prelude","[]") []) (Let [(61,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 61,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 28],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleXML","textOfXml") [Var 41,Var 1],Comb FuncCall ("OracleXML","textOfXml") [Var 60,Var 61]]]]))]])),Func ("OracleCompactFlatCurry","_case_109") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("XML","XElem") [4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_108") [Var 2,Var 5,Var 6,Var 4,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_108") 5 Private (TVar (-42)) (Rule [2,5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_107") [Var 2,Var 5,Var 6,Var 8,Var 7,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_107") 6 Private (TVar (-42)) (Rule [2,5,6,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (LPattern (Charc 'p')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_106") [Var 2,Var 5,Var 6,Var 8,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_106") 5 Private (TVar (-42)) (Rule [2,5,6,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_105") [Var 2,Var 5,Var 6,Var 10,Var 9,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_105") 6 Private (TVar (-42)) (Rule [2,5,6,10,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_104") [Var 2,Var 5,Var 6,Var 10,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_104") 5 Private (TVar (-42)) (Rule [2,5,6,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_103") [Var 2,Var 5,Var 6,Var 12,Var 11,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_103") 6 Private (TVar (-42)) (Rule [2,5,6,12,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_102") [Var 2,Var 5,Var 6,Var 12,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_102") 5 Private (TVar (-42)) (Rule [2,5,6,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_101") [Var 2,Var 5,Var 6,Var 14,Var 13,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_101") 6 Private (TVar (-42)) (Rule [2,5,6,14,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (LPattern (Charc 'm')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_100") [Var 2,Var 5,Var 6,Var 14,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_100") 5 Private (TVar (-42)) (Rule [2,5,6,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_99") [Var 2,Var 5,Var 6,Var 16,Var 15,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_99") 6 Private (TVar (-42)) (Rule [2,5,6,16,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 15) [Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_98") [Var 2,Var 5,Var 6,Var 16,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_98") 5 Private (TVar (-42)) (Rule [2,5,6,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_97") [Var 2,Var 5,Var 6,Var 18,Var 17,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_97") 6 Private (TVar (-42)) (Rule [2,5,6,18,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 17) [Branch (LPattern (Charc 't')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_96") [Var 2,Var 5,Var 6,Var 18,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_96") 5 Private (TVar (-42)) (Rule [2,5,6,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_95") [Var 2,Var 5,Var 6,Var 20,Var 19,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_95") 6 Private (TVar (-42)) (Rule [2,5,6,20,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (LPattern (Charc 'i')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_94") [Var 2,Var 5,Var 6,Var 20,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_94") 5 Private (TVar (-42)) (Rule [2,5,6,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_93") [Var 2,Var 5,Var 6,Var 22,Var 21,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_93") 6 Private (TVar (-42)) (Rule [2,5,6,22,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 21) [Branch (LPattern (Charc 'v')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_92") [Var 2,Var 5,Var 6,Var 22,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_92") 5 Private (TVar (-42)) (Rule [2,5,6,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_91") [Var 2,Var 5,Var 6,Var 24,Var 23,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_91") 6 Private (TVar (-42)) (Rule [2,5,6,24,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 23) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_90") [Var 2,Var 5,Var 6,Var 24,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_90") 5 Private (TVar (-42)) (Rule [2,5,6,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_89") [Var 2,Var 5,Var 6,Var 26,Var 25,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_89") 6 Private (TVar (-42)) (Rule [2,5,6,26,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 25) [Branch (LPattern (Charc 's')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_88") [Var 2,Var 5,Var 6,Var 26,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_88") 5 Private (TVar (-42)) (Rule [2,5,6,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_87") [Var 2,Var 6,Var 5,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_87") 4 Private (TVar (-42)) (Rule [2,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","xml2primtrans.xml2prim.358") [Var 2]],Var 6,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_110") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleXML","readXmlFile") [Var 3,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readPrimSpec._#lambda48._#lambda49") [Var 2]],Var 5]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("Prelude","[]") [],Var 1]])]])),Func ("OracleCompactFlatCurry","_case_112") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","Just") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_111") [Var 3,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_111") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleCompactFlatCurry","_case_114") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","Just") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_113") [Var 3,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_113") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleCompactFlatCurry","_case_117") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Func") [4,5,6,7,8]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OraclePrelude","lookup") [Var 4,Var 2,Var 1])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_116") [Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("Prelude","Nothing") [],Var 10],Var 11]]))]))]])),Func ("OracleCompactFlatCurry","_case_116") 8 Private (TVar (-42)) (Rule [4,5,6,7,8,9,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Func") [Var 4,Var 5,Var 6,Var 7,Var 8],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(10,Var 9)] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OracleCompactFlatCurry","mergePrimSpecIntoFunc._#selFP3#lib") [Var 10,Var 1])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Let [(12,Comb FuncCall ("OracleCompactFlatCurry","mergePrimSpecIntoFunc._#selFP4#entry") [Var 10,Var 14])] (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_115") [Var 4,Var 5,Var 6,Var 7,Var 11,Var 12,Comb FuncCall ("OraclePrelude","null") [Var 12,Var 15],Var 16]]))]))]))])]])),Func ("OracleCompactFlatCurry","_case_115") 8 Private (TVar (-42)) (Rule [4,5,6,7,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Func") [Var 4,Var 5,Var 6,Var 7,Comb ConsCall ("FlatCurry","External") [Comb FuncCall ("OraclePrelude","++") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Var 12],Var 1]]],Comb ConsCall ("Prelude","[]") []]])]])),Func ("OracleCompactFlatCurry","_case_118") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Prog") [4,5,6,7,8]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("FlatCurry","Prog") [Var 4,Var 5,Var 6,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","mergePrimSpecIntoFunc") [Var 2]],Var 1],Var 7,Var 9],Var 8]]))]])),Func ("OracleCompactFlatCurry","_case_119") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleDirectory","getModificationTime") [Comb FuncCall ("OraclePrelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Var 4]])),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleDirectory","getModificationTime") [Comb FuncCall ("OraclePrelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 1],Var 5]]))]])),Func ("OracleCompactFlatCurry","_case_120") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleFlatCurry","readFlatCurry") [Var 3,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","processPrimitives") [Var 3]],Var 6]])),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleFlatCurry","readFlatCurryFile") [Comb FuncCall ("OracleFlatCurry","flatCurryFileName") [Var 3,Var 1],Var 7],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","processPrimitives") [Var 3]],Var 8]]))]])),Func ("OracleCompactFlatCurry","_case_121") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleFlatCurry","readFlatCurry") [Var 2,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","processPrimitives") [Var 2]],Var 5]])),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","getSourceModificationTime") [Var 2,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42") [Var 2]],Var 6]]))]])),Func ("OracleCompactFlatCurry","_case_123") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_122") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_122") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]],Let [(8,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSort","cmpString") [Var 1],Var 4,Var 9],Var 6,Var 10])] (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 8,Comb ConsCall ("Prelude","LT") [],Var 11],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 8,Comb ConsCall ("Prelude","EQ") [],Var 12],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSort","leqString") [Var 13],Var 5,Var 14],Var 7,Var 15],Var 16],Var 17]]))]))]])),Func ("OracleCompactFlatCurry","_case_124") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleCompactFlatCurry","_case_125") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCompactFlatCurry","_case_126") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleCompactFlatCurry","_case_127") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleCompactFlatCurry","_case_128") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleCompactFlatCurry","_case_129") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleCompactFlatCurry","_case_130") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCompactFlatCurry","_case_131") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCompactFlatCurry","_case_132") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","TVar") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","FuncType") [4,5]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleList","union") [Comb FuncCall ("OracleCompactFlatCurry","allTypesOfTExpr") [Var 4,Var 1],Comb FuncCall ("OracleCompactFlatCurry","allTypesOfTExpr") [Var 5,Var 8],Var 9]])),Branch (Pattern ("FlatCurry","TCons") [6,7]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleList","union") [Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleCompactFlatCurry","unionMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allTypesOfTExpr") []],Var 1],Var 7,Var 10],Var 11]]))]])),Func ("OracleCompactFlatCurry","_case_133") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","allTypesOfTExpr") [Var 6,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_135") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Branch") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_134") [Var 4,Var 3,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_134") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","LPattern") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 4,Var 1]]),Branch (Pattern ("FlatCurry","Pattern") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleList","union") [Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 4,Var 1],Var 8]]))]])),Func ("OracleCompactFlatCurry","_case_137") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Let [(8,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleCompactFlatCurry","unionMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allConsOfExpr") []],Var 1],Var 7,Var 20])] (Comb FuncCall ("CEventOracle","replace") [Var 21,Comb FuncCall ("OracleCompactFlatCurry","_case_136") [Var 6,Var 8,Var 5,Var 21]])])),Branch (Pattern ("FlatCurry","Free") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 12,Var 1]]),Branch (Pattern ("FlatCurry","Let") [13,14]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleList","union") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleCompactFlatCurry","unionMap") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allConsOfExpr") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 1],Var 22],Var 13,Var 23],Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 14,Var 24],Var 25]])),Branch (Pattern ("FlatCurry","Or") [15,16]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleList","union") [Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 15,Var 1],Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 16,Var 26],Var 27]])),Branch (Pattern ("FlatCurry","Case") [17,18,19]) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleList","union") [Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 18,Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleCompactFlatCurry","unionMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allConsOfExpr.consOfBranch.252") []],Var 28],Var 19,Var 29],Var 30]]))]])),Func ("OracleCompactFlatCurry","_case_136") 4 Private (TVar (-42)) (Rule [6,8,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("FlatCurry","ConsCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Var 8]]),Branch (Pattern ("FlatCurry","ConsPartCall") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Var 8]]),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8]),Branch (Pattern ("FlatCurry","FuncPartCall") [10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8])]])),Func ("OracleCompactFlatCurry","_case_139") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_138") [Var 7,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_138") 2 Private (TVar (-42)) (Rule [7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("FlatCurry","External") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Rule") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","allConsOfExpr") [Var 10,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_140") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Branch") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","allFuncCallsOfExpr") [Var 4,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_142") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Let [(8,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allFuncCallsOfExpr") []],Var 1],Var 7,Var 20])] (Comb FuncCall ("CEventOracle","replace") [Var 21,Comb FuncCall ("OracleCompactFlatCurry","_case_141") [Var 6,Var 8,Var 5,Var 21]])])),Branch (Pattern ("FlatCurry","Free") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","allFuncCallsOfExpr") [Var 12,Var 1]]),Branch (Pattern ("FlatCurry","Let") [13,14]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allFuncCallsOfExpr") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 1],Var 22],Var 13,Var 23],Comb FuncCall ("OracleCompactFlatCurry","allFuncCallsOfExpr") [Var 14,Var 24],Var 25]])),Branch (Pattern ("FlatCurry","Or") [15,16]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleCompactFlatCurry","allFuncCallsOfExpr") [Var 15,Var 1],Comb FuncCall ("OracleCompactFlatCurry","allFuncCallsOfExpr") [Var 16,Var 26],Var 27]])),Branch (Pattern ("FlatCurry","Case") [17,18,19]) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleCompactFlatCurry","allFuncCallsOfExpr") [Var 18,Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allFuncCallsOfBranchExpr") []],Var 28],Var 19,Var 29],Var 30]]))]])),Func ("OracleCompactFlatCurry","_case_141") 4 Private (TVar (-42)) (Rule [6,8,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("FlatCurry","FuncCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Var 8]]),Branch (Pattern ("FlatCurry","FuncPartCall") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Var 8]]),Branch (Pattern ("FlatCurry","ConsCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8]),Branch (Pattern ("FlatCurry","ConsPartCall") [10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8])]])),Func ("OracleCompactFlatCurry","_case_144") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_143") [Var 7,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_143") 2 Private (TVar (-42)) (Rule [7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("FlatCurry","External") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Rule") [9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleList","nub") [Comb FuncCall ("OracleCompactFlatCurry","allFuncCallsOfExpr") [Var 10,Var 1],Var 11]]))]])),Func ("OracleCompactFlatCurry","_case_145") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,,,)") [4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("Prelude","(,,,)") [Var 4,Comb ConsCall ("Prelude",":") [Var 2,Var 5],Var 6,Var 7],Var 1]])]])),Func ("OracleCompactFlatCurry","_case_150") 9 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("Prelude","(,,,)") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 7,Var 8],Var 1]]),Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_149") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 11,Var 10,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_149") 10 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,11,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("Prelude","(,)") [12,13]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCompactFlatCurry","_case_148") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 11,Var 12,Var 13,Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Var 12,Var 1],Var 3,Var 14],Var 15],Var 16]]))]])),Func ("OracleCompactFlatCurry","_case_148") 12 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,11,12,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","readCurrentFlatCurry") [Var 12,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getCalledFuncs._#lambda34") [Var 13,Var 11,Var 5,Var 7,Var 6,Var 3,Var 8,Var 12,Var 4,Var 2]],Var 15]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCompactFlatCurry","_case_147") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 11,Var 12,Var 13,Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleTableRBT","lookupRBT") [Comb ConsCall ("Prelude","(,)") [Var 12,Var 13],Var 1],Var 5,Var 16],Comb ConsCall ("Prelude","Nothing") [],Var 17],Var 18]]))]])),Func ("OracleCompactFlatCurry","_case_147") 12 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,11,12,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","getCalledFuncs") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 11,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_146") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 11,Var 12,Var 13,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 15]]))]])),Func ("OracleCompactFlatCurry","_case_146") 12 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,11,12,13,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","True") []) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]]],Let [(14,Comb FuncCall ("OracleMaybe","fromJust") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleTableRBT","lookupRBT") [Comb ConsCall ("Prelude","(,)") [Var 12,Var 13],Var 1],Var 5,Var 22],Var 23])] (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Let [(15,Comb FuncCall ("OracleCompactFlatCurry","allFuncCalls") [Var 14,Var 24])] (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Let [(16,Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getCalledFuncs._#lambda35") [Var 6]],Var 15,Var 25])] (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []]],Let [(17,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getImplicitlyRequired") [Var 2]],Var 26],Var 16,Var 27])] (Let [(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []],Let [(18,Comb FuncCall ("OracleCompactFlatCurry","allConstructorsOfFunc") [Var 14,Var 28])] (Let [(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []],Let [(19,Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getCalledFuncs._#lambda36") [Var 7]],Var 18,Var 29])] (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []],Let [(20,Comb FuncCall ("OracleCompactFlatCurry","allTypesOfFunc") [Var 14,Var 30])] (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","getCalledFuncs") [Var 2,Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 31],Var 6,Comb FuncCall ("OraclePrelude","++") [Var 16,Var 17,Var 32],Var 33],Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 34],Var 7,Var 18,Var 35],Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 36],Var 8,Var 20,Var 37],Comb FuncCall ("OraclePrelude","++") [Var 11,Comb FuncCall ("OraclePrelude","++") [Var 16,Comb FuncCall ("OraclePrelude","++") [Var 17,Var 19,Var 38],Var 39],Var 40],Var 41],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getCalledFuncs._#lambda37") [Var 14]],Var 42]]))]))]))]))]))]))]))])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCompactFlatCurry","_case_151") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("FlatCurry","Public") [],Var 1]])]])),Func ("OracleCompactFlatCurry","_case_152") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCompactFlatCurry","_case_153") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CompactFlatCurry","InitFuncs") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Var 3]]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Main") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Exports") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Required") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Import") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCompactFlatCurry","_case_154") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CompactFlatCurry","Import") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Var 3]]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Main") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Exports") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","InitFuncs") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Required") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCompactFlatCurry","_case_159") 9 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","mapIO") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry") []],Var 1],Var 4,Var 10],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","requiredInCompactProg._#lambda28") [Var 4,Var 6,Var 2,Var 8]],Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCompactFlatCurry","_case_158") [Var 2,Var 3,Var 4,Var 5,Var 7,Var 8,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Comb ConsCall ("CompactFlatCurry","Exports") [],Var 1],Var 3,Var 12],Var 13]]))]])),Func ("OracleCompactFlatCurry","_case_158") 8 Private (TVar (-42)) (Rule [2,3,4,5,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","mapIO") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry") []],Var 1],Var 4,Var 10],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","requiredInCompactProg._#lambda29") [Var 4,Var 7,Var 2,Var 8]],Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCompactFlatCurry","_case_157") [Var 2,Var 3,Var 4,Var 5,Var 7,Var 8,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","any") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","isMainOption") []],Var 1],Var 3,Var 12],Var 13]]))]])),Func ("OracleCompactFlatCurry","_case_157") 8 Private (TVar (-42)) (Rule [2,3,4,5,7,8,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleCompactFlatCurry","getMainFuncFromOptions") [Var 3,Var 1])] (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleCompactFlatCurry","_case_156") [Var 2,Var 4,Var 5,Var 8,Var 9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 9],Var 11],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","functionName") []],Comb FuncCall ("OracleCompactFlatCurry","moduleFuns") [Var 2,Var 12],Var 13],Var 14],Var 15]]))])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_155") [Var 2,Var 4,Var 7,Var 8,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 16]]))]])),Func ("OracleCompactFlatCurry","_case_155") 6 Private (TVar (-42)) (Rule [2,4,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","mapIO") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry") []],Var 1],Comb FuncCall ("OracleList","nub") [Comb FuncCall ("OraclePrelude","++") [Var 4,Comb FuncCall ("OracleCompactFlatCurry","moduleImports") [Var 2,Var 10],Var 11],Var 12],Var 13],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","requiredInCompactProg._#lambda31") [Var 7,Var 2,Var 8]],Var 14]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCompactFlatCurry","_case_156") 7 Private (TVar (-42)) (Rule [2,4,5,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","mapIO") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","readCurrentFlatCurry") []],Var 1],Var 4,Var 11],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","requiredInCompactProg._#lambda30") [Var 9,Var 4,Var 2,Var 5,Var 8]],Var 12]])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Var 9,Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude","[]") []]],Var 1],Var 13],Var 14]]))]])),Func ("OracleCompactFlatCurry","_case_162") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_161") [Var 2,Var 3,Var 6,Var 5,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_161") 5 Private (TVar (-42)) (Rule [2,3,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCompactFlatCurry","extendTConsWithConsType") [Var 2,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 1],Var 7,Var 15],Var 3,Var 16],Var 6,Var 17]])),Branch (Pattern ("FlatCurry","Type") [11,12,13,14]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OracleCompactFlatCurry","_case_160") [Var 2,Var 3,Var 6,Var 11,Var 14,Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Var 11,Var 1],Comb FuncCall ("OracleCompactFlatCurry","defaultRequiredTypes") [Var 18],Var 19],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","any") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","extendTConsWithConsType._#lambda18") [Var 2]],Var 20],Var 14,Var 21],Var 22],Var 23]]))]])),Func ("OracleCompactFlatCurry","_case_160") 7 Private (TVar (-42)) (Rule [2,3,6,11,14,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 15) [Branch (Pattern ("Prelude","True") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCompactFlatCurry","extendTConsWithConsType") [Var 2,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 1],Var 11,Var 16],Var 3,Var 17],Var 6,Var 18]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","extendTConsWithConsType") [Var 2,Var 3,Var 6,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_163") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","allTypesOfTExpr") []],Var 1],Var 6,Var 7]]))]])),Func ("OracleCompactFlatCurry","_case_166") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","TypeSyn") [4,5,6,7]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCompactFlatCurry","_case_165") [Var 2,Var 4,Var 7,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Var 4,Var 1],Var 2,Var 12],Var 13]])),Branch (Pattern ("FlatCurry","Type") [8,9,10,11]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCompactFlatCurry","_case_164") [Var 2,Var 8,Var 11,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","elemRBT") [Var 8,Var 1],Var 2,Var 14],Var 15]]))]])),Func ("OracleCompactFlatCurry","_case_164") 5 Private (TVar (-42)) (Rule [2,8,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","newTypeConsOfTDecl._#lambda16") [Var 2]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","newTypeConsOfTDecl._#lambda17") []],Var 1],Var 11,Var 13],Var 14]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCompactFlatCurry","_case_165") 5 Private (TVar (-42)) (Rule [2,4,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","newTypeConsOfTDecl._#lambda15") [Var 2]],Comb FuncCall ("OracleCompactFlatCurry","allTypesOfTExpr") [Var 7,Var 1],Var 9]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCompactFlatCurry","_case_167") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCompactFlatCurry","requiredDatatypes") [Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 1],Var 2,Var 4,Var 6],Var 3,Var 7]]))]])),Func ("OracleCompactFlatCurry","_case_168") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Op") [4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Var 4,Var 1],Var 2,Var 7]]))]])),Func ("OracleCompactFlatCurry","_case_169") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,,,)") [4,5,6,7]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude",">>") [Comb FuncCall ("OraclePrelude","putStrLn") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","+") []],Lit (Intc 0),Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","length") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","moduleFuns") []],Var 1],Var 4,Var 12],Var 13],Var 14],Var 15],Var 16],Let [(8,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","functionName") []],Var 5,Var 17])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","return") [Comb ConsCall ("FlatCurry","Prog") [Comb FuncCall ("OracleCompactFlatCurry","moduleName") [Var 2,Var 18],Comb ConsCall ("Prelude","[]") [],Let [(9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","moduleTypes") []],Var 19],Var 4,Var 20])] (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Let [(10,Comb FuncCall ("OracleCompactFlatCurry","extendTConsWithConsType") [Var 6,Var 7,Var 9,Var 21])] (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OracleCompactFlatCurry","requiredDatatypes") [Var 10,Var 9,Var 22])] (Comb FuncCall ("CEventOracle","replace") [Var 23,Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda13") [Var 11]],Var 9,Var 23]])]))])),Var 5,Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda14") [Var 8]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","moduleOps") []],Var 24],Var 4,Var 25],Var 26]],Var 27]])),Var 28]]))]])),Func ("OracleCompactFlatCurry","_case_170") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]],Let [(8,Comb FuncCall ("OracleCompactFlatCurry","extendFuncTable") [Comb FuncCall ("OracleTableRBT","emptyTableRBT") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","leqQName") []],Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","moduleFuns") []],Var 12],Var 7,Var 13],Var 14])] (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleCompactFlatCurry","getRequiredFromOptions") [Var 3,Var 15])] (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]],Let [(10,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","getRequiredInModule") [Var 9]],Var 16],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","moduleName") []],Var 7,Var 17],Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OraclePrelude","++") [Var 5,Var 10,Var 19])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","getCalledFuncs") [Var 9,Var 6,Var 7,Var 8,Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("OracleSetRBT","insertRBT") [Var 20],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","emptySetRBT") [Var 21],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","leqQName") []],Var 22],Var 11,Var 23],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","emptySetRBT") [Var 24],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","leqQName") []],Var 25],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSetRBT","emptySetRBT") [Var 26],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleCompactFlatCurry","leqQName") []],Var 27],Var 11,Var 28],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12") [Var 2]],Var 29]]))]))]))]))]))]])),Func ("OracleCompactFlatCurry","_case_171") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude",">>") [Comb FuncCall ("OraclePrelude","putStr") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 1],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleCompactFlatCurry","readCurrentFlatCurry") [Var 3,Var 6],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCompactFlatCurry","computeCompactFlatCurry._#lambda9") [Var 4]],Var 7],Var 8]]))]])),Func ("OracleCompactFlatCurry","_case_173") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("CompactFlatCurry","AlwaysReq") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("CompactFlatCurry","Requires") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_172") [Var 2,Var 5,Var 6,Comb FuncCall ("OraclePrelude","==") [Var 5,Var 2,Var 1],Var 7]]))]])),Func ("OracleCompactFlatCurry","_case_172") 5 Private (TVar (-42)) (Rule [2,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCompactFlatCurry","_case_176") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("CompactFlatCurry","AlwaysReq") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_175") [Var 2,Var 4,Var 1]]),Branch (Pattern ("CompactFlatCurry","Requires") [7,8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCompactFlatCurry","_case_175") 3 Private (TVar (-42)) (Rule [2,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCompactFlatCurry","_case_174") [Var 2,Var 5,Var 6,Comb FuncCall ("OraclePrelude","==") [Var 5,Var 2,Var 1],Var 7]]))]])),Func ("OracleCompactFlatCurry","_case_174") 5 Private (TVar (-42)) (Rule [2,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 6],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCompactFlatCurry","_case_178") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("CompactFlatCurry","AlwaysReq") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_177") [Var 3,Var 1]]),Branch (Pattern ("CompactFlatCurry","Requires") [6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCompactFlatCurry","_case_177") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]])]])),Func ("OracleCompactFlatCurry","_case_179") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CompactFlatCurry","Required") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Var 3]]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Main") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Exports") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","InitFuncs") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CompactFlatCurry","Import") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCompactFlatCurry","_case_181") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","_case_180") [Var 4,Var 3,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_180") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("CompactFlatCurry","Main") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","getMainFuncFromOptions") [Var 4,Var 1]]),Branch (Pattern ("CompactFlatCurry","Exports") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","getMainFuncFromOptions") [Var 4,Var 1]]),Branch (Pattern ("CompactFlatCurry","InitFuncs") [6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","getMainFuncFromOptions") [Var 4,Var 1]]),Branch (Pattern ("CompactFlatCurry","Required") [7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","getMainFuncFromOptions") [Var 4,Var 1]]),Branch (Pattern ("CompactFlatCurry","Import") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCompactFlatCurry","getMainFuncFromOptions") [Var 4,Var 1]])]])),Func ("OracleCompactFlatCurry","_case_182") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CompactFlatCurry","Main") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CompactFlatCurry","Exports") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CompactFlatCurry","InitFuncs") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CompactFlatCurry","Required") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CompactFlatCurry","Import") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]]))] [Op ("OracleCompactFlatCurry","requires") InfixOp 0]