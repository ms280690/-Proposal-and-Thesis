Prog "OraclePrettyFlat" ["CEventOracle","Oracle","IOExts","PrettyFlat","Char","FlatCurry","FlatCurryGoodies","Maybe","Prelude","Pretty","StyledText","System","OracleChar","OracleFlatCurry","OracleFlatCurryGoodies","OracleMaybe","OraclePrelude","OraclePretty","OracleStyledText","OracleSystem"] [] [Func ("OraclePrettyFlat","prelude") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("OraclePrettyFlat","arrow") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 1],Comb FuncCall ("OraclePretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude","[]") []]],Var 2],Var 3]]))),Func ("OraclePrettyFlat","bar") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 1],Comb FuncCall ("OraclePretty","char") [Lit (Charc '|'),Var 2],Var 3]]))),Func ("OraclePrettyFlat","dcolon") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 1],Comb FuncCall ("OraclePretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []]],Var 2],Var 3]]))),Func ("OraclePrettyFlat","precFillEncloseSep") 7 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))))))) (Rule [2,3,4,5,6,7,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePrettyFlat","precFillEncloseSep.pre.11") [Var 2,Var 3,Var 4,Var 1],Comb FuncCall ("OraclePrettyFlat","precFillEncloseSep.pre.11") [Var 2,Var 3,Var 5,Var 8],Var 6,Var 7,Var 9]]))),Func ("OraclePrettyFlat","precFillEncloseSep.pre.11") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_117") [Var 2,Var 3,Var 4,Comb FuncCall ("OraclePrelude","<") [Var 2,Var 3,Var 1],Var 5]]))),Func ("OraclePrettyFlat","isInfixName") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_115") [Var 2,Var 1]])),Func ("OraclePrettyFlat","infixIDs") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '~'),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc '$'),Comb ConsCall ("Prelude",":") [Lit (Charc '%'),Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '/'),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]])),Func ("OraclePrettyFlat","isTupleName") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_114") [Var 2,Var 1]])),Func ("OraclePrettyFlat","showStyledProg") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","prettyProg") [Lit (Intc 78),Var 1]])),Func ("OraclePrettyFlat","prettyProg") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","pretty") [Var 2]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","progDoc") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleFlatCurryGoodies","updProgExps") [Var 1],Comb FuncCall ("OraclePrettyFlat","elimApp") [Var 3],Var 4],Var 5],Var 6]]))),Func ("OraclePrettyFlat","prettyTypeExpr") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","pretty") [Lit (Intc 78)]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","False") []]],Var 1]])),Func ("OraclePrettyFlat","prettyTypes") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","pretty") [Lit (Intc 78)]],Comb FuncCall ("OraclePrettyFlat","typesDoc") [Var 2,Var 1],Var 3]]))),Func ("OraclePrettyFlat","prettyOps") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","pretty") [Lit (Intc 78)]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","opsDoc") []],Var 1]])),Func ("OraclePrettyFlat","showProg") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OracleStyledText","plainText") [Var 1],Comb FuncCall ("OraclePrettyFlat","showStyledProg") [Var 2],Var 3]]))),Func ("OraclePrettyFlat","printStyledProg") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleFlatCurry","readFlatCurry") [Var 2,Var 1],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OracleStyledText","printStyledText") [Var 3],Comb FuncCall ("OraclePrettyFlat","showStyledProg") [Var 4],Var 5],Var 6]]))),Func ("OraclePrettyFlat","mainPrint") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleSystem","getArgs") [Var 1],Comb FuncCall ("OraclePrelude","mapIO_") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","printProg") []],Var 2],Var 3]]))),Func ("OraclePrettyFlat","printProg") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleFlatCurry","readFlatCurryFile") [Var 2,Var 1],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","putStrLn") []],Comb FuncCall ("OraclePrettyFlat","showProg") [Var 3],Var 4],Var 5]]))),Func ("OraclePrettyFlat","keyword") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OracleStyledText","magentaDoc") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","text") []],Var 2]]))),Func ("OraclePrettyFlat","consname") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OracleStyledText","greenDoc") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","text") []],Var 2]]))),Func ("OraclePrettyFlat","operator") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","blueDoc") [Var 1]])),Func ("OraclePrettyFlat","literal") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","cyanDoc") [Var 1]])),Func ("OraclePrettyFlat","marked") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OracleStyledText","bgYellowDoc") [Var 1],Comb FuncCall ("OracleStyledText","boldDoc") [Var 2],Var 3]]))),Func ("OraclePrettyFlat","block") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","group") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","hang") [Lit (Intc 1)]],Var 1]])),Func ("OraclePrettyFlat","def") 4 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Let [(5,Comb FuncCall ("OraclePrettyFlat","_case_113") [Var 3,Comb FuncCall ("OraclePrelude","null") [Var 3,Var 1],Var 6])] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","block") [Var 7],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 8],Comb FuncCall ("OraclePretty","<>") [Var 2,Var 5,Var 9],Var 10],Var 4,Var 11],Var 12]]))]))),Func ("OraclePrettyFlat","app") 3 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_112") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","null") [Var 3,Var 1],Var 4]]))),Func ("OraclePrettyFlat","layout") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePretty","align") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","compose") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","combine") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","linesep") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Var 3]]]]],Var 4]]))),Func ("OraclePrettyFlat","qname") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_111") [Var 2,Var 3,Var 1]])),Func ("OraclePrettyFlat","qname.txt.65") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_105") [Var 2,Var 1]])),Func ("OraclePrettyFlat","correctName") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Let [(3,Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","not") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","elem") []],Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude","[]") []]]]],Var 1],Var 2,Var 4])] (Comb FuncCall ("CEventOracle","replace") [Var 5,Comb FuncCall ("OraclePrettyFlat","_case_103") [Var 3,Var 5]])]))),Func ("OraclePrettyFlat","<$>>") 3 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 1],Var 2,Var 4],Comb FuncCall ("OraclePretty","line") [Var 5],Var 6],Var 3,Var 7]]))),Func ("OraclePrettyFlat","progDoc") 2 Public (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_101") [Var 2,Var 1]])),Func ("OraclePrettyFlat","precs") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","precs._#lambda3") []]]]])),Func ("OraclePrettyFlat","precs._#lambda3") 2 Private (FuncType (TCons ("FlatCurry","OpDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_100") [Var 2,Var 1]])),Func ("OraclePrettyFlat","exportedNames") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_99") [Var 2,Var 3,Var 1]])),Func ("OraclePrettyFlat","exportedNames.typeExpDoc.89") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]],Let [(4,Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","==") [Comb ConsCall ("FlatCurry","Public") []]],Comb FuncCall ("OracleFlatCurryGoodies","consVisibility") [Var 1],Var 5],Comb FuncCall ("OracleFlatCurryGoodies","trType") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []]],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]]]],Comb (FuncPartCall 5) ("OraclePrettyFlat","exportedNames.typeExpDoc.89._#lambda4") []],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []]],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]]]],Comb (FuncPartCall 5) ("OraclePrettyFlat","exportedNames.typeExpDoc.89._#lambda5") []],Var 3,Var 6],Var 7])] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleFlatCurryGoodies","typeName") [Var 8],Var 3,Var 9],Var 10],Comb FuncCall ("OraclePrettyFlat","_case_98") [Var 4,Comb FuncCall ("OraclePrelude","null") [Var 4,Var 11],Var 12],Var 13]]))]))),Func ("OraclePrettyFlat","exportedNames.typeExpDoc.89._#lambda4") 5 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])),Func ("OraclePrettyFlat","exportedNames.typeExpDoc.89._#lambda5") 5 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 1])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("OraclePrettyFlat","moduleHeaderDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 4],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 5],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 7],Var 8],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","consname") [Var 9],Var 2,Var 10],Var 11],Var 12],Comb FuncCall ("OraclePrettyFlat","exportsDoc") [Var 3,Var 13],Var 14],Var 15],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 16],Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]],Var 17],Var 18]]))),Func ("OraclePrettyFlat","exportsDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("OraclePretty","group") [Comb FuncCall ("OraclePretty","nest") [Lit (Intc 1),Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 3],Comb FuncCall ("OraclePretty","lparen") [Var 4],Var 5],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 6],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","fillSep") [Var 7],Comb FuncCall ("OraclePretty","punctuate") [Comb FuncCall ("OraclePretty","comma") [Var 8],Var 2,Var 9],Var 10],Var 11],Var 12],Var 13],Comb FuncCall ("OraclePretty","rparen") [Var 14],Var 15],Var 16],Var 17]]))),Func ("OraclePrettyFlat","impsDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","vcat") [Var 1],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 3],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 5],Var 6],Comb FuncCall ("OraclePrettyFlat","consname") [Var 7],Var 8],Var 2,Var 9],Var 10]]))),Func ("OraclePrettyFlat","opsDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","vcat") [Var 1],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","opDoc") []],Var 2,Var 3],Var 4]]))),Func ("OraclePrettyFlat","opDoc") 2 Public (FuncType (TCons ("FlatCurry","OpDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_97") [Var 2,Var 1]])),Func ("OraclePrettyFlat","opDoc.fixDoc.114") 2 Private (FuncType (TCons ("FlatCurry","Fixity") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_94") [Var 2,Var 1]])),Func ("OraclePrettyFlat","typesDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("OraclePretty","Doc") []))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePretty","vcat") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","typeDoc") [Var 2]]]],Var 3]]))),Func ("OraclePrettyFlat","typeDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_93") [Var 2,Var 3,Var 1]])),Func ("OraclePrettyFlat","varDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","text") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude",":") [Lit (Charc 'x')]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","show") []],Var 1],Var 2]]))),Func ("OraclePrettyFlat","tvarDoc") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_92") [Var 2,Comb FuncCall ("OraclePrelude",">") [Var 2,Lit (Intc 25),Var 1],Var 3]]))),Func ("OraclePrettyFlat","consDeclsDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("OraclePretty","Doc") []))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 1],Comb FuncCall ("OraclePretty","equals") [Var 3],Var 4],Comb FuncCall ("OraclePretty","space") [Var 5],Var 6],Comb FuncCall ("OraclePretty","empty") [Var 7],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePrettyFlat","bar") [Var 8],Comb FuncCall ("OraclePretty","space") [Var 9],Var 10]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","<>") []],Comb FuncCall ("OraclePretty","space") [Var 11]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","consDeclDoc") [Var 2]],Var 12]]],Var 13]]))),Func ("OraclePrettyFlat","consDeclDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_90") [Var 2,Var 3,Var 1]])),Func ("OraclePrettyFlat","typeExprDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_89") [Var 2,Var 3,Var 4,Var 1]])),Func ("OraclePrettyFlat","par") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_84") [Var 2,Var 1]])),Func ("OraclePrettyFlat","funcsDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","vcat") [Var 1],Comb FuncCall ("OraclePretty","punctuate") [Comb FuncCall ("OraclePretty","line") [Var 5],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","funcDoc") [Var 2,Var 3]],Var 4,Var 6],Var 7],Var 8]]))),Func ("OraclePrettyFlat","funcDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_83") [Var 2,Var 3,Var 4,Var 1]])),Func ("OraclePrettyFlat","funcTypeDeclDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrettyFlat","def") [Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("OraclePrettyFlat","funcTypeDoc") [Var 2,Comb FuncCall ("OracleFlatCurryGoodies","argTypes") [Var 4,Var 5],Comb FuncCall ("OracleFlatCurryGoodies","resultType") [Var 4,Var 6],Var 7],Var 8]]))),Func ("OraclePrettyFlat","funcTypeDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePrettyFlat","dcolon") [Var 1],Comb FuncCall ("OraclePretty","space") [Var 5],Var 6],Comb FuncCall ("OraclePretty","empty") [Var 7],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePrettyFlat","arrow") [Var 8],Comb FuncCall ("OraclePretty","space") [Var 9],Var 10],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","<>") []],Comb FuncCall ("OraclePretty","space") [Var 11]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","True") []]],Var 12],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Var 13],Var 14],Var 15]]))),Func ("OraclePrettyFlat","ruleDoc") 5 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Rule") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_82") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OraclePrettyFlat","expDoc") 6 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","maybe") [Comb FuncCall ("OraclePrelude","maybe") [Comb FuncCall ("OraclePrettyFlat","expDoc2") [Var 2,Lit (Intc 0),Var 4,Var 5,Var 6,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","expDoc._#lambda6") [Var 4,Var 2]],Comb FuncCall ("OraclePrettyFlat","toList") [Var 6,Var 7],Var 8],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","expDoc._#lambda7") []],Comb FuncCall ("OraclePrettyFlat","toString") [Var 6,Var 9],Var 10]]))),Func ("OraclePrettyFlat","expDoc._#lambda6") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","list") [Var 1],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","expDoc") [Var 3,Lit (Intc 0),Var 2,Comb ConsCall ("Prelude","False") []]],Var 4,Var 5],Var 6]]))),Func ("OraclePrettyFlat","expDoc._#lambda7") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_81") [Var 2,Comb FuncCall ("OraclePrelude","null") [Var 2,Var 1],Var 3]]))),Func ("OraclePrettyFlat","expDoc2") 6 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))))) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_80") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 1]])),Func ("OraclePrettyFlat","expDoc2._#selFP3#lbr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OraclePretty","Doc") [],TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_73") [Var 2,Var 1]])),Func ("OraclePrettyFlat","expDoc2._#selFP4#rbr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OraclePretty","Doc") [],TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_72") [Var 2,Var 1]])),Func ("OraclePrettyFlat","branchDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_71") [Var 2,Var 3,Var 4,Var 1]])),Func ("OraclePrettyFlat","caseTypeDoc") 2 Public (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_70") [Var 2,Var 1]])),Func ("OraclePrettyFlat","patternDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_69") [Var 2,Var 3,Var 1]])),Func ("OraclePrettyFlat","letBindsDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (TCons ("OraclePretty","Doc") [])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePrettyFlat","layout") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","letBindDoc") [Var 2,Var 3]]]],Var 4]]))),Func ("OraclePrettyFlat","letBindDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_64") [Var 2,Var 3,Var 4,Var 1]])),Func ("OraclePrettyFlat","litDoc") 2 Public (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_63") [Var 2,Var 1]])),Func ("OraclePrettyFlat","quoteChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","maybe") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Comb FuncCall ("OraclePrelude","lookup") [Var 2,Comb FuncCall ("OraclePrettyFlat","specialChars") [Var 1],Var 3],Var 4]]))),Func ("OraclePrettyFlat","specialChars") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc '\r'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc '\t'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("OraclePrettyFlat","toString") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_62") [Var 2,Var 1]])),Func ("OraclePrettyFlat","toList") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_31") [Var 2,Var 1]])),Func ("OraclePrettyFlat","elimApp") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryGoodies","updCombs") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]],Comb (FuncPartCall 4) ("OraclePrettyFlat","elimApp.elim.276") []],Var 1]])),Func ("OraclePrettyFlat","elimApp.extend.276") 3 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FlatCurry","Expr") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_2") [Var 3,Var 2,Var 1]])),Func ("OraclePrettyFlat","elimApp.elim.276") 4 Private (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FlatCurry","Expr") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("OraclePrettyFlat","_case_1") [Var 2,Var 3,Var 4,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("FlatCurry","FuncCall") [],Var 1],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 3,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePrettyFlat","prelude") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 6],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleFlatCurryGoodies","isComb") [Comb FuncCall ("OraclePrelude","head") [Var 4,Var 7],Var 8],Comb FuncCall ("OraclePrelude","/=") [Comb FuncCall ("OracleFlatCurryGoodies","combName") [Comb FuncCall ("OraclePrelude","head") [Var 4,Var 9],Var 10],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePrettyFlat","prelude") [Var 11],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 12],Var 13],Var 14],Var 15],Var 16]]))),Func ("OraclePrettyFlat","_case_1") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrettyFlat","elimApp.extend.276") [Comb FuncCall ("OraclePrelude","head") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","!!") [Var 4,Lit (Intc 1),Var 6],Var 7]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_0") [Var 2,Var 3,Var 4,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 8]]))]])),Func ("OraclePrettyFlat","_case_0") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlatCurry","Comb") [Var 2,Var 3,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OraclePrettyFlat","_case_2") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("FlatCurry","Comb") [Var 4,Var 5,Comb FuncCall ("OraclePrelude","++") [Var 6,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Var 1]]])]])),Func ("OraclePrettyFlat","_case_31") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("FlatCurry","Comb") [3,4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_30") [Var 4,Var 5,Var 3,Var 1]]),Branch (Pattern ("FlatCurry","Var") [42]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Lit") [43]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Let") [44,45]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Free") [46,47]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Or") [48,49]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Case") [50,51,52]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_30") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("FlatCurry","ConsCall") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_29") [Var 5,Var 4,Var 1]]),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","FuncPartCall") [40]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","ConsPartCall") [41]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_29") 3 Private (TVar (-42)) (Rule [5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_28") [Var 5,Var 7,Var 6,Var 1]])]])),Func ("OraclePrettyFlat","_case_28") 4 Private (TVar (-42)) (Rule [5,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_27") [Var 5,Var 7,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 8,Lit (Charc 'P'),Var 1],Var 10]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_27") 6 Private (TVar (-42)) (Rule [5,7,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_26") [Var 5,Var 7,Var 9,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_26") 4 Private (TVar (-42)) (Rule [5,7,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_25") [Var 5,Var 7,Var 10,Var 11,Comb FuncCall ("OraclePrelude","==") [Var 10,Lit (Charc 'r'),Var 1],Var 12]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_25") 6 Private (TVar (-42)) (Rule [5,7,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_24") [Var 5,Var 7,Var 11,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_24") 4 Private (TVar (-42)) (Rule [5,7,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_23") [Var 5,Var 7,Var 12,Var 13,Comb FuncCall ("OraclePrelude","==") [Var 12,Lit (Charc 'e'),Var 1],Var 14]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_23") 6 Private (TVar (-42)) (Rule [5,7,12,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_22") [Var 5,Var 7,Var 13,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_22") 4 Private (TVar (-42)) (Rule [5,7,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_21") [Var 5,Var 7,Var 14,Var 15,Comb FuncCall ("OraclePrelude","==") [Var 14,Lit (Charc 'l'),Var 1],Var 16]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_21") 6 Private (TVar (-42)) (Rule [5,7,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_20") [Var 5,Var 7,Var 15,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_20") 4 Private (TVar (-42)) (Rule [5,7,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_19") [Var 5,Var 7,Var 16,Var 17,Comb FuncCall ("OraclePrelude","==") [Var 16,Lit (Charc 'u'),Var 1],Var 18]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_19") 6 Private (TVar (-42)) (Rule [5,7,16,17,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_18") [Var 5,Var 7,Var 17,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_18") 4 Private (TVar (-42)) (Rule [5,7,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_17") [Var 5,Var 7,Var 18,Var 19,Comb FuncCall ("OraclePrelude","==") [Var 18,Lit (Charc 'd'),Var 1],Var 20]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_17") 6 Private (TVar (-42)) (Rule [5,7,18,19,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 20) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_16") [Var 5,Var 7,Var 19,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_16") 4 Private (TVar (-42)) (Rule [5,7,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_15") [Var 5,Var 7,Var 20,Var 21,Comb FuncCall ("OraclePrelude","==") [Var 20,Lit (Charc 'e'),Var 1],Var 22]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_15") 6 Private (TVar (-42)) (Rule [5,7,20,21,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 22) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_14") [Var 5,Var 7,Var 21,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_14") 4 Private (TVar (-42)) (Rule [5,7,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_13") [Var 5,Var 7,Var 1]]),Branch (Pattern ("Prelude",":") [38,39]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_13") 3 Private (TVar (-42)) (Rule [5,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [22,23]) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_12") [Var 5,Var 22,Var 23,Comb FuncCall ("OraclePrelude","==") [Var 22,Lit (Charc '['),Var 1],Var 24]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_12") 5 Private (TVar (-42)) (Rule [5,22,23,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 24) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_11") [Var 5,Var 23,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_7") [Var 5,Var 22,Var 23,Comb FuncCall ("OraclePrelude","==") [Var 22,Lit (Charc ':'),Var 1],Var 25]]))]])),Func ("OraclePrettyFlat","_case_7") 5 Private (TVar (-42)) (Rule [5,22,23,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 24) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_6") [Var 5,Var 23,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_6") 3 Private (TVar (-42)) (Rule [5,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_5") [Var 5,Var 1]]),Branch (Pattern ("Prelude",":") [36,37]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_5") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [30,31]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_4") [Var 30,Var 31,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_4") 3 Private (TVar (-42)) (Rule [30,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_3") [Var 30,Var 32,Var 33,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_3") 4 Private (TVar (-42)) (Rule [30,32,33,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 33) [Branch (Pattern ("Prelude","[]") []) (Let [(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleMaybe",">>-") [Comb FuncCall ("OraclePrettyFlat","toList") [Var 32,Var 1],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude","Just") []],Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude",":") [Var 30]],Var 36],Var 37]])),Branch (Pattern ("Prelude",":") [34,35]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_11") 3 Private (TVar (-42)) (Rule [5,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_10") [Var 5,Var 24,Var 25,Comb FuncCall ("OraclePrelude","==") [Var 24,Lit (Charc ']'),Var 1],Var 26]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_10") 5 Private (TVar (-42)) (Rule [5,24,25,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 26) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_9") [Var 5,Var 25,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_9") 3 Private (TVar (-42)) (Rule [5,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_8") [Var 5,Var 1]]),Branch (Pattern ("Prelude",":") [28,29]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_8") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [26,27]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_62") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("FlatCurry","Comb") [3,4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_61") [Var 4,Var 5,Var 3,Var 1]]),Branch (Pattern ("FlatCurry","Var") [59]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Lit") [60]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Let") [61,62]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Free") [63,64]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Or") [65,66]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Case") [67,68,69]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_61") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("FlatCurry","ConsCall") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_60") [Var 5,Var 4,Var 1]]),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","FuncPartCall") [57]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","ConsPartCall") [58]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_60") 3 Private (TVar (-42)) (Rule [5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_59") [Var 5,Var 7,Var 6,Var 1]])]])),Func ("OraclePrettyFlat","_case_59") 4 Private (TVar (-42)) (Rule [5,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_58") [Var 5,Var 7,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 8,Lit (Charc 'P'),Var 1],Var 10]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_58") 6 Private (TVar (-42)) (Rule [5,7,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_57") [Var 5,Var 7,Var 9,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_57") 4 Private (TVar (-42)) (Rule [5,7,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_56") [Var 5,Var 7,Var 10,Var 11,Comb FuncCall ("OraclePrelude","==") [Var 10,Lit (Charc 'r'),Var 1],Var 12]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_56") 6 Private (TVar (-42)) (Rule [5,7,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_55") [Var 5,Var 7,Var 11,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_55") 4 Private (TVar (-42)) (Rule [5,7,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_54") [Var 5,Var 7,Var 12,Var 13,Comb FuncCall ("OraclePrelude","==") [Var 12,Lit (Charc 'e'),Var 1],Var 14]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_54") 6 Private (TVar (-42)) (Rule [5,7,12,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_53") [Var 5,Var 7,Var 13,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_53") 4 Private (TVar (-42)) (Rule [5,7,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_52") [Var 5,Var 7,Var 14,Var 15,Comb FuncCall ("OraclePrelude","==") [Var 14,Lit (Charc 'l'),Var 1],Var 16]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_52") 6 Private (TVar (-42)) (Rule [5,7,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_51") [Var 5,Var 7,Var 15,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_51") 4 Private (TVar (-42)) (Rule [5,7,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_50") [Var 5,Var 7,Var 16,Var 17,Comb FuncCall ("OraclePrelude","==") [Var 16,Lit (Charc 'u'),Var 1],Var 18]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_50") 6 Private (TVar (-42)) (Rule [5,7,16,17,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_49") [Var 5,Var 7,Var 17,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_49") 4 Private (TVar (-42)) (Rule [5,7,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_48") [Var 5,Var 7,Var 18,Var 19,Comb FuncCall ("OraclePrelude","==") [Var 18,Lit (Charc 'd'),Var 1],Var 20]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_48") 6 Private (TVar (-42)) (Rule [5,7,18,19,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 20) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_47") [Var 5,Var 7,Var 19,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_47") 4 Private (TVar (-42)) (Rule [5,7,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_46") [Var 5,Var 7,Var 20,Var 21,Comb FuncCall ("OraclePrelude","==") [Var 20,Lit (Charc 'e'),Var 1],Var 22]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_46") 6 Private (TVar (-42)) (Rule [5,7,20,21,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 22) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_45") [Var 5,Var 7,Var 21,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_45") 4 Private (TVar (-42)) (Rule [5,7,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_44") [Var 5,Var 7,Var 1]]),Branch (Pattern ("Prelude",":") [55,56]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_44") 3 Private (TVar (-42)) (Rule [5,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [22,23]) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_43") [Var 5,Var 22,Var 23,Comb FuncCall ("OraclePrelude","==") [Var 22,Lit (Charc '['),Var 1],Var 24]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_43") 5 Private (TVar (-42)) (Rule [5,22,23,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 24) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_42") [Var 5,Var 23,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_38") [Var 5,Var 22,Var 23,Comb FuncCall ("OraclePrelude","==") [Var 22,Lit (Charc ':'),Var 1],Var 25]]))]])),Func ("OraclePrettyFlat","_case_38") 5 Private (TVar (-42)) (Rule [5,22,23,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 24) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_37") [Var 5,Var 23,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_37") 3 Private (TVar (-42)) (Rule [5,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_36") [Var 5,Var 1]]),Branch (Pattern ("Prelude",":") [53,54]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_36") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [30,31]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_35") [Var 31,Var 30,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_35") 3 Private (TVar (-42)) (Rule [31,30,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 30) [Branch (Pattern ("FlatCurry","Lit") [32]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_34") [Var 31,Var 32,Var 1]]),Branch (Pattern ("FlatCurry","Var") [40]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Comb") [41,42,43]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Let") [44,45]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Free") [46,47]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Or") [48,49]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Case") [50,51,52]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_34") 3 Private (TVar (-42)) (Rule [31,32,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 32) [Branch (Pattern ("FlatCurry","Charc") [33]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_33") [Var 33,Var 31,Var 1]]),Branch (Pattern ("FlatCurry","Intc") [38]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FlatCurry","Floatc") [39]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_33") 3 Private (TVar (-42)) (Rule [33,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [34,35]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_32") [Var 33,Var 34,Var 35,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_32") 4 Private (TVar (-42)) (Rule [33,34,35,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 35) [Branch (Pattern ("Prelude","[]") []) (Let [(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleMaybe",">>-") [Comb FuncCall ("OraclePrettyFlat","toString") [Var 34,Var 1],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude","Just") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","++") [Comb FuncCall ("OraclePrettyFlat","quoteChar") [Var 33,Var 38]]],Var 39],Var 40]])),Branch (Pattern ("Prelude",":") [36,37]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_42") 3 Private (TVar (-42)) (Rule [5,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_41") [Var 5,Var 24,Var 25,Comb FuncCall ("OraclePrelude","==") [Var 24,Lit (Charc ']'),Var 1],Var 26]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_41") 5 Private (TVar (-42)) (Rule [5,24,25,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 26) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_40") [Var 5,Var 25,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_40") 3 Private (TVar (-42)) (Rule [5,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_39") [Var 5,Var 1]]),Branch (Pattern ("Prelude",":") [28,29]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_39") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [26,27]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []])]])),Func ("OraclePrettyFlat","_case_63") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Intc") [3]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","literal") [Var 1],Comb FuncCall ("OraclePretty","int") [Var 3,Var 6],Var 7]])),Branch (Pattern ("FlatCurry","Floatc") [4]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","literal") [Var 1],Comb FuncCall ("OraclePretty","float") [Var 4,Var 8],Var 9]])),Branch (Pattern ("FlatCurry","Charc") [5]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","literal") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","squotes") [Var 10],Comb FuncCall ("OraclePretty","text") [Comb FuncCall ("OraclePrettyFlat","quoteChar") [Var 5,Var 11],Var 12],Var 13],Var 14]]))]])),Func ("OraclePrettyFlat","_case_64") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 7],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 8],Var 5,Var 9],Var 10],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 11],Comb FuncCall ("OraclePretty","equals") [Var 12],Var 13],Var 14],Var 15],Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 3,Comb ConsCall ("Prelude","False") [],Var 6,Var 16],Var 17]]))]])),Func ("OraclePrettyFlat","_case_69") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Pattern") [4,5]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_68") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","null") [Var 5,Var 1],Var 7]])),Branch (Pattern ("FlatCurry","LPattern") [6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","litDoc") [Var 6,Var 1]])]])),Func ("OraclePrettyFlat","_case_68") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_67") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrettyFlat","isTupleName") [Var 4,Var 1],Var 7]]))]])),Func ("OraclePrettyFlat","_case_67") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","tupled") [Var 1],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 7],Var 5,Var 8],Var 9]])),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrettyFlat","_case_66") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrettyFlat","isInfixName") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","length") [Var 5,Var 10],Lit (Intc 2),Var 11],Var 12],Var 13]]))]])),Func ("OraclePrettyFlat","_case_66") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 1],Comb FuncCall ("OraclePrelude","!!") [Var 5,Lit (Intc 0),Var 7],Var 8],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 9],Comb FuncCall ("OraclePretty","text") [Comb FuncCall ("OraclePrelude","snd") [Var 4,Var 10],Var 11],Var 12],Var 13],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 14],Comb FuncCall ("OraclePrelude","!!") [Var 5,Lit (Intc 1),Var 15],Var 16],Var 17]])),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_65") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 18]]))]])),Func ("OraclePrettyFlat","_case_65") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 1],Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 4,Var 7],Var 8],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","hsep") [Var 9],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 10],Var 5,Var 11],Var 12],Var 13]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OraclePrettyFlat","_case_70") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Rigid") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","empty") [Var 1]]),Branch (Pattern ("FlatCurry","Flex") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","empty") [Var 1]])]])),Func ("OraclePrettyFlat","_case_71") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FlatCurry","Branch") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrettyFlat","def") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 1],Comb FuncCall ("OraclePrettyFlat","patternDoc") [Var 3,Var 5,Var 7],Var 8],Comb FuncCall ("OraclePrettyFlat","arrow") [Var 9],Var 10],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 11],Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 3,Comb ConsCall ("Prelude","False") [],Var 6,Var 12],Var 13],Var 14]]))]])),Func ("OraclePrettyFlat","_case_72") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OraclePrettyFlat","_case_73") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OraclePrettyFlat","_case_80") 6 Private (TVar (-42)) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("FlatCurry","Var") [7]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 1],Var 7,Var 26]])),Branch (Pattern ("FlatCurry","Lit") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","litDoc") [Var 8,Var 1]]),Branch (Pattern ("FlatCurry","Comb") [9,10,11]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []],Let [(12,Comb FuncCall ("OraclePrettyFlat","_case_74") [Var 5,Var 1])] (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []],Let [(13,Comb FuncCall ("OraclePrettyFlat","expDoc2._#selFP3#lbr") [Var 12,Var 27])] (Let [(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []],Let [(14,Comb FuncCall ("OraclePrettyFlat","expDoc2._#selFP4#rbr") [Var 12,Var 28])] (Let [(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []]],Let [(15,Comb FuncCall ("OraclePrettyFlat","_case_75") [Var 2,Var 10,Comb FuncCall ("OraclePrelude","lookup") [Var 10,Var 2,Var 29],Var 30])] (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrettyFlat","_case_79") [Var 2,Var 3,Var 4,Var 5,Var 9,Var 10,Var 11,Var 13,Var 14,Var 15,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("FlatCurry","FuncCall") [],Var 31],Comb FuncCall ("OraclePrelude","==") [Var 10,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePrettyFlat","prelude") [Var 32],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 33],Var 34],Var 35]]))]))]))]))])),Branch (Pattern ("FlatCurry","Let") [17,18]) (Let [(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(44,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(45,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(46,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(47,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(48,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(49,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(50,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(51,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(52,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(53,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude",":") [Var 44,Comb ConsCall ("Prelude",":") [Var 45,Comb ConsCall ("Prelude",":") [Var 46,Comb ConsCall ("Prelude",":") [Var 47,Comb ConsCall ("Prelude",":") [Var 48,Comb ConsCall ("Prelude",":") [Var 49,Comb ConsCall ("Prelude",":") [Var 50,Comb ConsCall ("Prelude",":") [Var 51,Comb ConsCall ("Prelude",":") [Var 52,Comb ConsCall ("Prelude",":") [Var 53,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrettyFlat","par") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","hang") [Lit (Intc 1)]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 36],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 37],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 38],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 39],Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]],Var 40],Var 41],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","letBindsDoc") [Var 2,Var 4,Var 42],Var 17,Var 43],Var 44],Var 45],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 46],Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]],Var 47],Var 48],Var 49],Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Comb ConsCall ("Prelude","False") [],Var 18,Var 50],Var 51],Var 52],Var 53]])),Branch (Pattern ("FlatCurry","Free") [19,20]) (Let [(54,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(55,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(56,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(57,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(58,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(59,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(60,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(61,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(62,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(63,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(64,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(65,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(66,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(67,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(68,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(69,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(70,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(71,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(72,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(73,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(74,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(75,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(76,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(77,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(78,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(79,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(80,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(81,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(82,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 54,Comb ConsCall ("Prelude",":") [Var 55,Comb ConsCall ("Prelude",":") [Var 56,Comb ConsCall ("Prelude",":") [Var 57,Comb ConsCall ("Prelude",":") [Var 58,Comb ConsCall ("Prelude",":") [Var 59,Comb ConsCall ("Prelude",":") [Var 60,Comb ConsCall ("Prelude",":") [Var 61,Comb ConsCall ("Prelude",":") [Var 62,Comb ConsCall ("Prelude",":") [Var 63,Comb ConsCall ("Prelude",":") [Var 64,Comb ConsCall ("Prelude",":") [Var 65,Comb ConsCall ("Prelude",":") [Var 66,Comb ConsCall ("Prelude",":") [Var 67,Comb ConsCall ("Prelude",":") [Var 68,Comb ConsCall ("Prelude",":") [Var 69,Comb ConsCall ("Prelude",":") [Var 70,Comb ConsCall ("Prelude",":") [Var 71,Comb ConsCall ("Prelude",":") [Var 72,Comb ConsCall ("Prelude",":") [Var 73,Comb ConsCall ("Prelude",":") [Var 74,Comb ConsCall ("Prelude",":") [Var 75,Comb ConsCall ("Prelude",":") [Var 76,Comb ConsCall ("Prelude",":") [Var 77,Comb ConsCall ("Prelude",":") [Var 78,Comb ConsCall ("Prelude",":") [Var 79,Comb ConsCall ("Prelude",":") [Var 80,Comb ConsCall ("Prelude",":") [Var 81,Comb ConsCall ("Prelude",":") [Var 82,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrettyFlat","par") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","hang") [Lit (Intc 1)]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 54],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 55],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 56],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 57],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 58],Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]],Var 59],Var 60],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 61],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","fillSep") [Var 62],Comb FuncCall ("OraclePretty","punctuate") [Comb FuncCall ("OraclePretty","comma") [Var 63],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 64],Var 19,Var 65],Var 66],Var 67],Var 68],Var 69],Var 70],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 71],Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 72],Var 73],Var 74],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 75],Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]],Var 76],Var 77],Var 78],Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Comb ConsCall ("Prelude","False") [],Var 20,Var 79],Var 80],Var 81],Var 82]])),Branch (Pattern ("FlatCurry","Or") [21,22]) (Let [(83,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 83,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Var 5,Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePrettyFlat","prelude") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]],Var 83]])),Branch (Pattern ("FlatCurry","Case") [23,24,25]) (Let [(84,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(85,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(86,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(87,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(88,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(89,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(90,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(91,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(92,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(93,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(94,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(95,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(96,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(97,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(98,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(99,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(100,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(101,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(102,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(103,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(104,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(105,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(106,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 84,Comb ConsCall ("Prelude",":") [Var 85,Comb ConsCall ("Prelude",":") [Var 86,Comb ConsCall ("Prelude",":") [Var 87,Comb ConsCall ("Prelude",":") [Var 88,Comb ConsCall ("Prelude",":") [Var 89,Comb ConsCall ("Prelude",":") [Var 90,Comb ConsCall ("Prelude",":") [Var 91,Comb ConsCall ("Prelude",":") [Var 92,Comb ConsCall ("Prelude",":") [Var 93,Comb ConsCall ("Prelude",":") [Var 94,Comb ConsCall ("Prelude",":") [Var 95,Comb ConsCall ("Prelude",":") [Var 96,Comb ConsCall ("Prelude",":") [Var 97,Comb ConsCall ("Prelude",":") [Var 98,Comb ConsCall ("Prelude",":") [Var 99,Comb ConsCall ("Prelude",":") [Var 100,Comb ConsCall ("Prelude",":") [Var 101,Comb ConsCall ("Prelude",":") [Var 102,Comb ConsCall ("Prelude",":") [Var 103,Comb ConsCall ("Prelude",":") [Var 104,Comb ConsCall ("Prelude",":") [Var 105,Comb ConsCall ("Prelude",":") [Var 106,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrettyFlat","par") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","hang") [Lit (Intc 1)]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 84],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 85],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 86],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePrettyFlat","caseTypeDoc") [Var 23,Var 87],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 88],Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 89],Var 90],Var 91],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 92],Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Comb ConsCall ("Prelude","False") [],Var 24,Var 93],Var 94],Var 95],Var 96],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 97],Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude","[]") []]],Var 98],Var 99],Var 100],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","layout") [Var 101],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","branchDoc") [Var 2,Var 4]],Var 25,Var 102],Var 103],Var 104],Var 105],Var 106]]))]])),Func ("OraclePrettyFlat","_case_74") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePretty","lparen") [Var 1],Comb FuncCall ("OraclePretty","rparen") [Var 6]]])),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePretty","empty") [Var 1],Comb FuncCall ("OraclePretty","empty") [Var 7]]]))]])),Func ("OraclePrettyFlat","_case_75") 4 Private (TVar (-42)) (Rule [2,10,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","Just") [16]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 16]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Lit (Intc 0)])]])),Func ("OraclePrettyFlat","_case_79") 12 Private (TVar (-42)) (Rule [2,3,4,5,9,10,11,13,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrettyFlat","par") [Var 5,Var 1],Comb FuncCall ("OraclePrettyFlat","app") [Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("OraclePrelude","!!") [Var 11,Lit (Intc 0),Var 17],Var 18],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("OraclePrelude","!!") [Var 11,Lit (Intc 1),Var 19],Var 20],Comb ConsCall ("Prelude","[]") []],Var 21],Var 22]])),Branch (Pattern ("Prelude","False") []) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrettyFlat","_case_78") [Var 2,Var 3,Var 4,Var 5,Var 9,Var 10,Var 11,Var 13,Var 14,Var 15,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("FlatCurry","ConsCall") [],Var 1],Comb FuncCall ("OraclePrettyFlat","isTupleName") [Var 10,Var 23],Var 24],Var 25]]))]])),Func ("OraclePrettyFlat","_case_78") 12 Private (TVar (-42)) (Rule [2,3,4,5,9,10,11,13,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","tupled") [Var 1],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Comb ConsCall ("Prelude","False") []]],Var 11,Var 17],Var 18]])),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrettyFlat","_case_77") [Var 2,Var 3,Var 4,Var 5,Var 10,Var 11,Var 13,Var 14,Var 15,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrettyFlat","isInfixName") [Var 10,Var 1],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","length") [Var 11,Var 19],Lit (Intc 2),Var 20],Var 21],Var 22]]))]])),Func ("OraclePrettyFlat","_case_77") 11 Private (TVar (-42)) (Rule [2,3,4,5,10,11,13,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePretty","align") [Var 1],Comb FuncCall ("OraclePrettyFlat","precFillEncloseSep") [Var 15,Var 3,Var 13,Var 14,Comb FuncCall ("OraclePretty","empty") [Var 17],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Var 15,Var 4,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("OraclePrelude","!!") [Var 11,Lit (Intc 0),Var 18],Var 19],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","space") [Var 20],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 21],Comb FuncCall ("OraclePretty","text") [Comb FuncCall ("OraclePrelude","snd") [Var 10,Var 22],Var 23],Var 24],Var 25],Comb FuncCall ("OraclePretty","space") [Var 26],Var 27],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Var 15,Var 4,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("OraclePrelude","!!") [Var 11,Lit (Intc 1),Var 28],Var 29],Comb ConsCall ("Prelude","[]") []]]],Var 30],Var 31]])),Branch (Pattern ("Prelude","False") []) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_76") [Var 2,Var 4,Var 5,Var 10,Var 11,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 32]]))]])),Func ("OraclePrettyFlat","_case_76") 7 Private (TVar (-42)) (Rule [2,4,5,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrettyFlat","par") [Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("OraclePrelude","null") [Var 11,Var 1],Var 13],Var 5,Var 14],Var 15],Comb FuncCall ("OraclePrettyFlat","app") [Comb FuncCall ("OraclePrettyFlat","qname") [Var 4,Var 10,Var 16],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 4,Comb ConsCall ("Prelude","True") []]],Var 11,Var 17],Var 18],Var 19]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OraclePrettyFlat","_case_81") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","consname") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 4]])),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","literal") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","dquotes") [Var 5],Comb FuncCall ("OraclePretty","text") [Var 2,Var 6],Var 7],Var 8]]))]])),Func ("OraclePrettyFlat","_case_82") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FlatCurry","Rule") [6,7]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrettyFlat","def") [Comb FuncCall ("OraclePrettyFlat","qname") [Var 3,Var 4,Var 1],Var 6,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 9],Comb FuncCall ("OraclePretty","equals") [Var 10],Var 11],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 12],Comb FuncCall ("OraclePrettyFlat","expDoc") [Var 2,Lit (Intc 0),Var 3,Comb ConsCall ("Prelude","False") [],Var 7,Var 13],Var 14],Var 15],Var 16]])),Branch (Pattern ("FlatCurry","External") [8]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 1],Comb FuncCall ("OraclePrettyFlat","qname") [Var 3,Var 4,Var 17],Var 18],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 19],Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 20],Var 21]]))]])),Func ("OraclePrettyFlat","_case_83") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FlatCurry","Func") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<$>") [Var 1],Comb FuncCall ("OraclePrettyFlat","funcTypeDeclDoc") [Var 3,Var 5,Var 8,Var 10],Var 11],Comb FuncCall ("OraclePrettyFlat","ruleDoc") [Var 2,Var 3,Var 5,Var 9,Var 12],Var 13]]))]])),Func ("OraclePrettyFlat","_case_84") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","parens") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []]])]])),Func ("OraclePrettyFlat","_case_89") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FlatCurry","TVar") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","tvarDoc") [Var 5,Var 1]]),Branch (Pattern ("FlatCurry","TCons") [6,7]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_88") [Var 2,Var 3,Var 6,Var 7,Comb FuncCall ("OraclePrelude","null") [Var 7,Var 1],Var 10]])),Branch (Pattern ("FlatCurry","FuncType") [8,9]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrettyFlat","par") [Var 3,Var 1],Comb FuncCall ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePretty","empty") [Var 11],Comb FuncCall ("OraclePretty","empty") [Var 12],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","space") [Var 13],Comb FuncCall ("OraclePrettyFlat","arrow") [Var 14],Var 15],Comb FuncCall ("OraclePretty","space") [Var 16],Var 17],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","True") []]],Comb FuncCall ("OracleFlatCurryGoodies","argTypes") [Var 4,Var 18],Var 19],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OracleFlatCurryGoodies","resultType") [Var 4,Var 20],Var 21],Comb ConsCall ("Prelude","[]") []],Var 22],Var 23],Var 24]]))]])),Func ("OraclePrettyFlat","_case_88") 6 Private (TVar (-42)) (Rule [2,3,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 6,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrettyFlat","_case_87") [Var 2,Var 3,Var 6,Var 7,Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePrettyFlat","prelude") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 9],Var 10]]))]])),Func ("OraclePrettyFlat","_case_87") 6 Private (TVar (-42)) (Rule [2,3,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","brackets") [Var 1],Comb FuncCall ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","head") [Var 7,Var 9],Var 10],Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_86") [Var 2,Var 3,Var 6,Var 7,Comb FuncCall ("OraclePrettyFlat","isTupleName") [Var 6,Var 1],Var 12]]))]])),Func ("OraclePrettyFlat","_case_86") 6 Private (TVar (-42)) (Rule [2,3,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","tupled") [Var 1],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","False") []]],Var 7,Var 9],Var 10]])),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_85") [Var 2,Var 3,Var 6,Var 7,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 11]]))]])),Func ("OraclePrettyFlat","_case_85") 6 Private (TVar (-42)) (Rule [2,3,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrettyFlat","par") [Var 3,Var 1],Comb FuncCall ("OraclePrettyFlat","app") [Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 6,Var 9],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","True") []]],Var 7,Var 10],Var 11],Var 12]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OraclePrettyFlat","_case_90") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Cons") [4,5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrettyFlat","app") [Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 4,Var 1],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","True") []]],Var 7,Var 8],Var 9]]))]])),Func ("OraclePrettyFlat","_case_92") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePretty","text") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 4],Var 5]])),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_91") [Var 2,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 6]]))]])),Func ("OraclePrettyFlat","_case_91") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePretty","text") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","chr") [Comb FuncCall ("OraclePrelude","+") [Lit (Intc 97),Var 2,Var 1],Var 4],Comb ConsCall ("Prelude","[]") []],Var 5]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OraclePrettyFlat","_case_93") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Type") [4,5,6,7]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrettyFlat","def") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude","[]") []]]]],Var 13],Var 14],Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 4,Var 15],Var 16],Var 6,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","consDeclsDoc") [Var 2,Var 17],Var 7,Var 18],Var 19]])),Branch (Pattern ("FlatCurry","TypeSyn") [8,9,10,11]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("OraclePrettyFlat","def") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 20],Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 21],Var 22],Comb FuncCall ("OraclePrettyFlat","qname") [Var 2,Var 8,Var 23],Var 24],Var 10,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 25],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 26],Comb FuncCall ("OraclePretty","equals") [Var 27],Var 28],Var 29],Comb FuncCall ("OraclePrettyFlat","typeExprDoc") [Var 2,Comb ConsCall ("Prelude","False") [],Var 11,Var 30],Var 31],Var 32]]))]])),Func ("OraclePrettyFlat","_case_94") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","InfixOp") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","empty") [Var 1]]),Branch (Pattern ("FlatCurry","InfixlOp") []) (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []],Var 3]])),Branch (Pattern ("FlatCurry","InfixrOp") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []],Var 4]]))]])),Func ("OraclePrettyFlat","_case_97") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Op") [3,4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_96") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OraclePrettyFlat","_case_96") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Let [(8,Comb FuncCall ("OraclePrettyFlat","_case_95") [Var 3,Var 7,Comb FuncCall ("OraclePrettyFlat","isInfixName") [Var 3,Var 1],Var 9])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 10],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","<+>") [Var 11],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","keyword") [Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]],Var 13],Comb FuncCall ("OraclePrettyFlat","opDoc.fixDoc.114") [Var 4,Var 14],Var 15],Var 16],Comb FuncCall ("OraclePretty","int") [Var 5,Var 17],Var 18],Var 19],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 20],Comb FuncCall ("OraclePretty","text") [Var 8,Var 21],Var 22],Var 23]]))]))]])),Func ("OraclePrettyFlat","_case_95") 4 Private (TVar (-42)) (Rule [3,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb FuncCall ("OraclePrelude","++") [Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude","[]") []],Var 1]]])]])),Func ("OraclePrettyFlat","_case_98") 3 Private (TVar (-42)) (Rule [4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","empty") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]]],Var 1]])]])),Func ("OraclePrettyFlat","_case_99") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Prog") [4,5,6,7,8]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","exportedNames.typeExpDoc.89") [Var 2]],Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","==") [Comb ConsCall ("FlatCurry","Public") []]],Comb FuncCall ("OracleFlatCurryGoodies","typeVisibility") [Var 1],Var 9],Var 6,Var 10],Var 11],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrettyFlat","qname") [Var 2]],Comb FuncCall ("OracleFlatCurryGoodies","funcName") [Var 12],Var 13],Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","==") [Comb ConsCall ("FlatCurry","Public") []]],Comb FuncCall ("OracleFlatCurryGoodies","funcVisibility") [Var 14],Var 15],Var 7,Var 16],Var 17],Var 18]]))]])),Func ("OraclePrettyFlat","_case_100") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Op") [3,4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Var 5]])]])),Func ("OraclePrettyFlat","_case_101") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("OraclePrettyFlat","<$>>") [Comb FuncCall ("OraclePrettyFlat","<$>>") [Comb FuncCall ("OraclePrettyFlat","<$>>") [Comb FuncCall ("OraclePrettyFlat","<$>>") [Comb FuncCall ("OraclePrettyFlat","moduleHeaderDoc") [Var 3,Comb FuncCall ("OraclePrettyFlat","exportedNames") [Var 3,Var 2,Var 1],Var 8],Comb FuncCall ("OraclePrettyFlat","impsDoc") [Var 4,Var 9],Var 10],Comb FuncCall ("OraclePrettyFlat","opsDoc") [Var 7,Var 11],Var 12],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","typesDoc") [Var 3,Var 13],Var 5,Var 14],Var 15],Comb FuncCall ("OraclePrettyFlat","funcsDoc") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","precs") [Var 16],Var 7,Var 17],Var 3,Var 6,Var 18],Var 19]]))]])),Func ("OraclePrettyFlat","_case_103") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_102") [Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Lit (Charc '_'),Var 1],Var 6]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OraclePrettyFlat","_case_102") 5 Private (TVar (-42)) (Rule [3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OraclePrettyFlat","_case_105") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_104") [Var 3,Var 4,Comb FuncCall ("OracleChar","isUpper") [Var 3,Var 1],Var 5]]))]])),Func ("OraclePrettyFlat","_case_104") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","consname") [Var 1],Comb ConsCall ("Prelude",":") [Var 3,Var 4],Var 6]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","text") [Comb ConsCall ("Prelude",":") [Var 3,Var 4],Var 1]])]])),Func ("OraclePrettyFlat","_case_111") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrettyFlat","_case_110") [Var 2,Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 3,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OraclePrettyFlat","prelude") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 6],Comb FuncCall ("OraclePrettyFlat","isTupleName") [Var 3,Var 7],Var 8],Var 9]]))]])),Func ("OraclePrettyFlat","_case_110") 6 Private (TVar (-42)) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 1],Comb FuncCall ("OraclePretty","text") [Var 5,Var 7],Var 8]])),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_109") [Var 2,Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrettyFlat","isInfixName") [Var 3,Var 1],Var 9]]))]])),Func ("OraclePrettyFlat","_case_109") 6 Private (TVar (-42)) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_108") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Var 2,Var 1],Var 7]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_107") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 8]]))]])),Func ("OraclePrettyFlat","_case_107") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","_case_106") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Var 2,Var 1],Var 7]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OraclePrettyFlat","_case_106") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrettyFlat","qname.txt.65") [Comb FuncCall ("OraclePrettyFlat","correctName") [Var 5,Var 1],Var 7]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","consname") [Var 1],Var 4,Var 8],Comb FuncCall ("OraclePretty","dot") [Var 9],Var 10],Comb FuncCall ("OraclePrettyFlat","qname.txt.65") [Var 5,Var 11],Var 12]]))]])),Func ("OraclePrettyFlat","_case_108") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","parens") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 7],Comb FuncCall ("OraclePretty","text") [Var 5,Var 8],Var 9],Var 10]])),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","parens") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","operator") [Var 11],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","consname") [Var 12],Var 4,Var 13],Comb FuncCall ("OraclePretty","dot") [Var 14],Var 15],Comb FuncCall ("OraclePrettyFlat","qname.txt.65") [Var 5,Var 16],Var 17],Var 18],Var 19]]))]])),Func ("OraclePrettyFlat","_case_112") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrettyFlat","block") [Var 1],Comb FuncCall ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePretty","empty") [Var 5],Comb FuncCall ("OraclePretty","empty") [Var 6],Comb FuncCall ("OraclePretty","space") [Var 7],Comb ConsCall ("Prelude",":") [Var 2,Var 3],Var 8],Var 9]]))]])),Func ("OraclePrettyFlat","_case_113") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","empty") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","space") [Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 5],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","fillSep") [Var 6],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrettyFlat","varDoc") [Var 7],Var 3,Var 8],Var 9],Var 10],Var 11]]))]])),Func ("OraclePrettyFlat","_case_114") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 3,Comb FuncCall ("OraclePrettyFlat","prelude") [Var 1],Var 5],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Comb FuncCall ("OraclePrelude","take") [Lit (Intc 2),Var 4,Var 6],Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Var 8],Var 9]]))]])),Func ("OraclePrettyFlat","_case_115") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","all") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","elem") []],Comb FuncCall ("OraclePrettyFlat","infixIDs") [Var 1]]],Var 5],Var 4,Var 6]]))]])),Func ("OraclePrettyFlat","_case_117") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","empty") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrettyFlat","_case_116") [Var 4,Comb ConsCall ("Prelude","True") [],Var 1]])]])),Func ("OraclePrettyFlat","_case_116") 3 Private (TVar (-42)) (Rule [4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]]))] []