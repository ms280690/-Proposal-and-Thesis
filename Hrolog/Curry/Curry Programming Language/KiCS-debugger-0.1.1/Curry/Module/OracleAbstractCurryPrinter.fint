Prog "OracleAbstractCurryPrinter" ["CEventOracle","Oracle","IOExts","AbstractCurryPrinter","AbstractCurry","Char","FiniteMap","List","Maybe","Prelude","Sort","Read","OracleAbstractCurry","OracleChar","OracleFiniteMap","OracleList","OracleMaybe","OraclePrelude","OracleSort","OracleRead"] [TypeSyn ("OracleAbstractCurryPrinter","NameFM") Private [] (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []]),TypeSyn ("OracleAbstractCurryPrinter","Options") Private [] (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])] [Func ("OracleAbstractCurryPrinter","showProg") 2 Public (FuncType (TCons ("AbstractCurry","CurryProg") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_289") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","defaultOptions") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleFiniteMap","emptyFM") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleAbstractCurryPrinter","lessString") []],Var 1],Comb ConsCall ("Prelude","[]") []]])),Func ("OracleAbstractCurryPrinter","showExports") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CFuncDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExports.isPublicType.9") []],Var 2,Var 1])] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleList","partition") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExports.allPublicCons.9") []],Var 4,Var 8])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleAbstractCurryPrinter","showExports._#selFP3#withCons") [Var 5,Var 9])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleAbstractCurryPrinter","showExports._#selFP4#withoutCons") [Var 5,Var 10])] (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","++") []],Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExports.getTypeName.9") []],Var 11],Var 6,Var 12],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExports.getTypeName.9") []],Var 7,Var 13],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExports.getFuncName.9") []],Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExports.isPublicFunc.9") []],Var 3,Var 14],Var 15],Var 16],Var 17],Var 18],Var 19]]))]))]))]))]))),Func ("OracleAbstractCurryPrinter","showExports.isPublicType.9") 2 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_287") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showExports.isPublicFunc.9") 2 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_286") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showExports.getTypeName.9") 2 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_285") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showExports.allPublicCons.9") 2 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_282") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showExports.allPublicCons.9.isPublicCons.49") 2 Private (FuncType (TCons ("AbstractCurry","CConsDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_281") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showExports.getFuncName.9") 2 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_280") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showExports._#selFP3#withCons") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_277") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showExports._#selFP4#withoutCons") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_276") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showImports") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showImport") []],Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 2,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb FuncCall ("OracleAbstractCurryPrinter","_case_275") [Var 2,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []],Var 4],Var 5],Var 6]]))),Func ("OracleAbstractCurryPrinter","showImport") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_274") [Var 2,Comb FuncCall ("OraclePrelude","/=") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Var 3]]))),Func ("OracleAbstractCurryPrinter","showOpDecls") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showOpDecl") []],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","_case_273") [Var 2,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 3],Var 4],Var 5]]))),Func ("OracleAbstractCurryPrinter","showOpDecl") 2 Private (FuncType (TCons ("AbstractCurry","COpDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_272") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showFixity") 2 Private (FuncType (TCons ("AbstractCurry","CFixity") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_269") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showTypeDecls") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showTypeDecl") []],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]],Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","_case_268") [Var 2,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 3],Var 4],Var 5]]))),Func ("OracleAbstractCurryPrinter","showTypeDecl") 2 Public (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_267") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showConsDecl") 2 Private (FuncType (TCons ("AbstractCurry","CConsDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_264") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showTypeExpr") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_262") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showTypeVar") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_257") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showIdentifier") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","not") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","elem") []],Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude","[]") []]]]],Var 1]]]])),Func ("OracleAbstractCurryPrinter","isCFuncType") 2 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_255") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showFuncDecl") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showFuncDeclOpt") [Comb FuncCall ("OracleAbstractCurryPrinter","defaultOptions") [Var 1]]]])),Func ("OracleAbstractCurryPrinter","showFuncDeclOpt") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_254") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showCmtFunc") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_253") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleAbstractCurryPrinter","showCmtFunc.insertName.139") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_245") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","funcComment") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","unlines") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","lines") []],Var 1],Var 2]]))),Func ("OracleAbstractCurryPrinter","showLocalFuncDecl") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showFuncDeclOpt") [Var 2]]])),Func ("OracleAbstractCurryPrinter","showRule") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CRule") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_244") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showEvalAnnot") 2 Private (FuncType (TCons ("AbstractCurry","CEvalAnnot") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_242") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showCrhsList") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_241") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showCrhs") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_237") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showLocalDecl") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CLocalDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_236") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showExpr") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExprOpt") [Comb FuncCall ("OracleAbstractCurryPrinter","defaultOptions") [Var 1]]]])),Func ("OracleAbstractCurryPrinter","showExprOpt") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_234") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showSymbol") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_231") [Var 3,Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showLambdaOrSection") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_226") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showLambda") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showPattern") []],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 4,Var 5],Var 6],Var 7],Var 8]]))),Func ("OracleAbstractCurryPrinter","showStatement") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CStatement") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_199") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showPattern") 2 Public (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_196") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showPreludeCons") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(3,Var 2)] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OracleAbstractCurryPrinter","showPreludeCons._#selFP6#name") [Var 3,Var 1])] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleAbstractCurryPrinter","showPreludeCons._#selFP7#pattlist") [Var 3,Var 6])] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_189") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Var 7],Var 8]]))]))]))])),Func ("OracleAbstractCurryPrinter","showPreludeCons._#selFP6#name") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_186") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showPreludeCons._#selFP7#pattlist") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_184") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showPatternList") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_182") [Var 2,Comb FuncCall ("OracleAbstractCurryPrinter","isClosedStringPattern") [Var 2,Var 1],Var 3]]))),Func ("OracleAbstractCurryPrinter","showPatListElems") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_178") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isClosedPatternList") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_151") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isClosedStringPattern") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_124") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isCharPattern") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_97") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isAsPattern") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_95") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showAsPatternList") 2 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_94") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showBranchExpr") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CBranchExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_92") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showLiteral") 2 Private (FuncType (TCons ("AbstractCurry","CLiteral") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_91") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showCCharc") 2 Private (FuncType (TCons ("AbstractCurry","CLiteral") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_90") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showBlock") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","/=") [Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","lines") [Var 2,Var 1],Var 3],Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 5]]))),Func ("OracleAbstractCurryPrinter","showTypeCons") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_84") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleAbstractCurryPrinter","showPreludeTypeCons") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_81") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 1],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","head") [Var 3,Var 4],Comb ConsCall ("AbstractCurry","CTCons") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []],Var 5],Var 6],Var 7]]))),Func ("OracleAbstractCurryPrinter","showApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_77") [Var 2,Var 3,Comb FuncCall ("OracleAbstractCurryPrinter","applicationHead") [Var 3,Var 1],Var 4]]))),Func ("OracleAbstractCurryPrinter","applicationHead") 2 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("AbstractCurry","CExpr") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_76") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","showSymbolApplication") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_75") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showListApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_70") [Var 2,Var 3,Comb FuncCall ("OracleAbstractCurryPrinter","isStringList") [Var 3,Var 1],Var 4]]))),Func ("OracleAbstractCurryPrinter","showCharListApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_67") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showConsListApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_63") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showSimpleListApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_60") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showInfixApplication") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_56") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleAbstractCurryPrinter","showITEApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_54") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showTupleApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showTupleApplication.p_showTuple.386") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 4],Var 5]]))),Func ("OracleAbstractCurryPrinter","showTupleApplication.p_showTuple.386") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_50") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showSimpleApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_48") [Var 2,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","showBoxedExpr") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_47") [Var 2,Var 3,Comb FuncCall ("OracleAbstractCurryPrinter","isSimpleExpr") [Var 3,Var 1],Var 4]]))),Func ("OracleAbstractCurryPrinter","prefixMap") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","++") [Var 4]],Var 1],Comb FuncCall ("OraclePrelude","map") [Var 2,Var 3,Var 5],Var 6]]))),Func ("OracleAbstractCurryPrinter","prefixInter") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","concat") []],Comb FuncCall ("OracleList","intersperse") [Var 4,Comb FuncCall ("OraclePrelude","map") [Var 2,Var 3,Var 1],Var 5],Var 6]]))),Func ("OracleAbstractCurryPrinter","combineMap") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_45") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleAbstractCurryPrinter","dropTags") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_44") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isInfixOpName") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","all") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","elem") []],Comb FuncCall ("OracleAbstractCurryPrinter","infixIDs") [Var 1]]],Var 2]]))),Func ("OracleAbstractCurryPrinter","isStringList") 2 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_41") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isClosedList") 2 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_36") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isSimpleExpr") 2 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_31") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isAtom") 2 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_12") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isUntyped") 2 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_10") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isTuple") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_7") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","isTuple.p1_isTuple.492") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_6") [Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","infixIDs") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '~'),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc '$'),Comb ConsCall ("Prelude",":") [Lit (Charc '%'),Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '/'),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]])),Func ("OracleAbstractCurryPrinter","maybeShowBrackets") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","_case_4") [Var 2,Var 1],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("OracleAbstractCurryPrinter","_case_3") [Var 2,Var 4],Var 5],Var 6]]))),Func ("OracleAbstractCurryPrinter","nameFM") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CFuncDecl") []]) (TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleAbstractCurryPrinter","addName") []],Comb FuncCall ("OracleFiniteMap","emptyFM") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleAbstractCurryPrinter","lessString") []],Var 1]]]])),Func ("OracleAbstractCurryPrinter","addName") 3 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (FuncType (TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_2") [Var 3,Var 2,Var 1]])),Func ("OracleAbstractCurryPrinter","lessString") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","==") [Comb ConsCall ("Prelude","LT") [],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleSort","cmpString") [Var 1],Var 2,Var 4],Var 3,Var 5],Var 6]]))),Func ("OracleAbstractCurryPrinter","_case_2") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CFunc") [4,5,6,7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_1") [Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CmtFunc") [11,12,13,14,15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_0") [Var 3,Var 12,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_0") 3 Private (TVar (-42)) (Rule [3,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude","(,)") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","addToFM") [Var 3,Var 18,Comb ConsCall ("Prelude","()") [],Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_1") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","addToFM") [Var 3,Var 10,Comb ConsCall ("Prelude","()") [],Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_3") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleAbstractCurryPrinter","_case_4") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleAbstractCurryPrinter","_case_6") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_5") [Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_5") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc ')'),Var 1]]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc ','),Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","isTuple.p1_isTuple.492") [Comb ConsCall ("Prelude",":") [Var 5,Var 6],Var 7],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_7") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc '('),Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","isTuple.p1_isTuple.492") [Var 4,Var 5],Var 6]]))]])),Func ("OracleAbstractCurryPrinter","_case_10") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CTCons") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_9") [Var 4,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CTVar") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CFuncType") [10,11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_9") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_8") [Var 5,Var 6,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_8") 4 Private (TVar (-42)) (Rule [5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 9],Var 10]])),Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_12") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CVar") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("AbstractCurry","CLit") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("AbstractCurry","CSymbol") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_11") [Var 5,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLambda") [10,11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [12,13]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [14]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [15,16]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [17,18]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_11") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","not") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 7,Var 8],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_31") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CVar") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("AbstractCurry","CLit") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("AbstractCurry","CSymbol") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_30") [Var 5,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [8,9]) (Let [(51,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 51,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_29") [Var 8,Comb FuncCall ("OracleAbstractCurryPrinter","applicationHead") [Var 8,Var 1],Var 51]])),Branch (Pattern ("AbstractCurry","CLambda") [42,43]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [44,45]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [46]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [47,48]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [49,50]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_29") 3 Private (TVar (-42)) (Rule [8,42,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 42) [Branch (Pattern ("AbstractCurry","CSymbol") [10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_28") [Var 10,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [29]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLit") [30]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CApply") [31,32]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLambda") [33,34]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [35,36]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [37]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [38,39]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [40,41]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_28") 2 Private (TVar (-42)) (Rule [10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","(,)") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_27") [Var 12,Var 11,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_27") 3 Private (TVar (-42)) (Rule [12,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [13,14]) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_26") [Var 12,Var 13,Var 14,Comb FuncCall ("OraclePrelude","==") [Var 13,Lit (Charc 'P'),Var 1],Var 15]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_26") 5 Private (TVar (-42)) (Rule [12,13,14,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 15) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_25") [Var 12,Var 14,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_25") 3 Private (TVar (-42)) (Rule [12,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_24") [Var 12,Var 15,Var 16,Comb FuncCall ("OraclePrelude","==") [Var 15,Lit (Charc 'r'),Var 1],Var 17]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_24") 5 Private (TVar (-42)) (Rule [12,15,16,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_23") [Var 12,Var 16,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_23") 3 Private (TVar (-42)) (Rule [12,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_22") [Var 12,Var 17,Var 18,Comb FuncCall ("OraclePrelude","==") [Var 17,Lit (Charc 'e'),Var 1],Var 19]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_22") 5 Private (TVar (-42)) (Rule [12,17,18,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_21") [Var 12,Var 18,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_21") 3 Private (TVar (-42)) (Rule [12,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_20") [Var 12,Var 19,Var 20,Comb FuncCall ("OraclePrelude","==") [Var 19,Lit (Charc 'l'),Var 1],Var 21]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_20") 5 Private (TVar (-42)) (Rule [12,19,20,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_19") [Var 12,Var 20,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_19") 3 Private (TVar (-42)) (Rule [12,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_18") [Var 12,Var 21,Var 22,Comb FuncCall ("OraclePrelude","==") [Var 21,Lit (Charc 'u'),Var 1],Var 23]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_18") 5 Private (TVar (-42)) (Rule [12,21,22,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_17") [Var 12,Var 22,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_17") 3 Private (TVar (-42)) (Rule [12,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_16") [Var 12,Var 23,Var 24,Comb FuncCall ("OraclePrelude","==") [Var 23,Lit (Charc 'd'),Var 1],Var 25]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_16") 5 Private (TVar (-42)) (Rule [12,23,24,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 25) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_15") [Var 12,Var 24,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_15") 3 Private (TVar (-42)) (Rule [12,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_14") [Var 12,Var 25,Var 26,Comb FuncCall ("OraclePrelude","==") [Var 25,Lit (Charc 'e'),Var 1],Var 27]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_14") 5 Private (TVar (-42)) (Rule [12,25,26,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 27) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_13") [Var 12,Var 26,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_13") 3 Private (TVar (-42)) (Rule [12,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Let [(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 29],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]],Var 30],Comb FuncCall ("OracleAbstractCurryPrinter","isTuple") [Var 12,Var 31],Var 32],Var 33],Var 34]])),Branch (Pattern ("Prelude",":") [27,28]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_30") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","not") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 7,Var 8],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_36") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_35") [Var 4,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [35]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_32") [Var 35,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [38]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLit") [39]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLambda") [40,41]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [42,43]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [44]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [45,46]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [47,48]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_32") 2 Private (TVar (-42)) (Rule [35,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 35) [Branch (Pattern ("Prelude","(,)") [36,37]) (Let [(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 36,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 37,Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 38],Var 39]]))]])),Func ("OracleAbstractCurryPrinter","_case_35") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_34") [Var 4,Var 5,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [23]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLit") [24]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CSymbol") [25]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLambda") [26,27]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [28,29]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [30]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [31,32]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [33,34]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_34") 3 Private (TVar (-42)) (Rule [4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("AbstractCurry","CSymbol") [7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_33") [Var 4,Var 7,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLit") [11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CApply") [12,13]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLambda") [14,15]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [16,17]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [18]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [19,20]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [21,22]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_33") 3 Private (TVar (-42)) (Rule [4,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 8,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Var 10],Comb FuncCall ("OracleAbstractCurryPrinter","isClosedList") [Var 4,Var 11],Var 12],Var 13]]))]])),Func ("OracleAbstractCurryPrinter","_case_41") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CSymbol") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_40") [Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_39") [Var 8,Var 7,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_39") 3 Private (TVar (-42)) (Rule [8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("AbstractCurry","CApply") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_38") [Var 8,Var 10,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [28]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLit") [29]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CSymbol") [30]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLambda") [31,32]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [33,34]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [35]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [36,37]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [38,39]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_38") 3 Private (TVar (-42)) (Rule [8,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CLit") [11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_37") [Var 8,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [15]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CSymbol") [16]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CApply") [17,18]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLambda") [19,20]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CLetDecl") [21,22]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CDoExpr") [23]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CListComp") [24,25]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CCase") [26,27]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_37") 3 Private (TVar (-42)) (Rule [8,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CCharc") [12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","isStringList") [Var 8,Var 1]]),Branch (Pattern ("AbstractCurry","CIntc") [13]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CFloatc") [14]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_40") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 6],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_44") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_43") [Var 3,Var 4,Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc '"'),Var 1],Var 5]]))]])),Func ("OracleAbstractCurryPrinter","_case_43") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","dropTags") []],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","tail") []],Comb FuncCall ("OraclePrelude","dropWhile") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Lit (Charc '"')]],Var 4,Var 1],Var 6],Var 7]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_42") [Var 3,Var 4,Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc '>'),Var 1],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_42") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","dropTags") [Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_45") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Var 2,Var 6,Var 4,Var 7],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_47") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 3,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_46") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 5]]))]])),Func ("OracleAbstractCurryPrinter","_case_46") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 5],Var 6]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_48") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 18],Var 19],Var 20]])),Branch (Pattern ("AbstractCurry","CVar") [6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CLit") [7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [13]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [14,15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [16,17]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_50") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_49") [Var 2,Var 5,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_49") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("AbstractCurry","CSymbol") [6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 5,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showTupleApplication.p_showTuple.386") [Var 2,Comb ConsCall ("AbstractCurry","CApply") [Var 7,Var 8],Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 5,Var 9],Var 10],Var 11]]))]])),Func ("OracleAbstractCurryPrinter","_case_54") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_53") [Var 2,Var 5,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_53") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_52") [Var 2,Var 4,Var 5,Var 7,Var 6,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_52") 6 Private (TVar (-42)) (Rule [2,4,5,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("AbstractCurry","CApply") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_51") [Var 2,Var 4,Var 5,Var 7,Var 9,Var 8,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_51") 7 Private (TVar (-42)) (Rule [2,4,5,7,9,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("AbstractCurry","CSymbol") [10]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 9,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 7,Var 13],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 5,Var 14],Var 15],Var 16],Var 17],Var 18],Var 19]])),Branch (Pattern ("AbstractCurry","CApply") [11,12]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showITEApplication") [Var 2,Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 20],Var 21],Var 22],Var 23]]))]])),Func ("OracleAbstractCurryPrinter","_case_56") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("AbstractCurry","CApply") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_55") [Var 2,Var 3,Var 6,Var 5,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_55") 5 Private (TVar (-42)) (Rule [2,3,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 8,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 21],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 22],Var 23],Var 24],Var 25],Var 26]])),Branch (Pattern ("AbstractCurry","CVar") [9]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 27],Var 28],Var 29],Var 30]])),Branch (Pattern ("AbstractCurry","CLit") [10]) (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 31],Var 32],Var 33],Var 34]])),Branch (Pattern ("AbstractCurry","CSymbol") [11]) (Let [(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 35],Var 36],Var 37],Var 38]])),Branch (Pattern ("AbstractCurry","CLambda") [12,13]) (Let [(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 39],Var 40],Var 41],Var 42]])),Branch (Pattern ("AbstractCurry","CLetDecl") [14,15]) (Let [(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(44,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(45,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(46,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude",":") [Var 44,Comb ConsCall ("Prelude",":") [Var 45,Comb ConsCall ("Prelude",":") [Var 46,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 43],Var 44],Var 45],Var 46]])),Branch (Pattern ("AbstractCurry","CDoExpr") [16]) (Let [(47,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(48,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(49,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(50,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 47,Comb ConsCall ("Prelude",":") [Var 48,Comb ConsCall ("Prelude",":") [Var 49,Comb ConsCall ("Prelude",":") [Var 50,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 47],Var 48],Var 49],Var 50]])),Branch (Pattern ("AbstractCurry","CListComp") [17,18]) (Let [(51,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(52,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(53,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(54,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 51,Comb ConsCall ("Prelude",":") [Var 52,Comb ConsCall ("Prelude",":") [Var 53,Comb ConsCall ("Prelude",":") [Var 54,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 51],Var 52],Var 53],Var 54]])),Branch (Pattern ("AbstractCurry","CCase") [19,20]) (Let [(55,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(56,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(57,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(58,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 55,Comb ConsCall ("Prelude",":") [Var 56,Comb ConsCall ("Prelude",":") [Var 57,Comb ConsCall ("Prelude",":") [Var 58,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 6,Var 55],Var 56],Var 57],Var 58]]))]])),Func ("OracleAbstractCurryPrinter","_case_60") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_59") [Var 2,Var 5,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_59") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_58") [Var 2,Var 7,Var 5,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_57") [Var 2,Var 5,Var 22,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_57") 4 Private (TVar (-42)) (Rule [2,5,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude","(,)") [23,24]) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 1],Var 24,Var 25]]))]])),Func ("OracleAbstractCurryPrinter","_case_58") 4 Private (TVar (-42)) (Rule [2,7,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("AbstractCurry","CSymbol") [8]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 22]])),Branch (Pattern ("AbstractCurry","CVar") [9]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 23],Var 24],Var 25]])),Branch (Pattern ("AbstractCurry","CLit") [10]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 26],Var 27],Var 28]])),Branch (Pattern ("AbstractCurry","CApply") [11,12]) (Let [(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 29],Var 30],Var 31]])),Branch (Pattern ("AbstractCurry","CLambda") [13,14]) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 32],Var 33],Var 34]])),Branch (Pattern ("AbstractCurry","CLetDecl") [15,16]) (Let [(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 35],Var 36],Var 37]])),Branch (Pattern ("AbstractCurry","CDoExpr") [17]) (Let [(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 38],Var 39],Var 40]])),Branch (Pattern ("AbstractCurry","CListComp") [18,19]) (Let [(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 41],Var 42],Var 43]])),Branch (Pattern ("AbstractCurry","CCase") [20,21]) (Let [(44,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(45,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(46,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 44,Comb ConsCall ("Prelude",":") [Var 45,Comb ConsCall ("Prelude",":") [Var 46,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 5,Var 44],Var 45],Var 46]]))]])),Func ("OracleAbstractCurryPrinter","_case_63") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_62") [Var 2,Var 5,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_62") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_61") [Var 2,Var 7,Var 5,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_61") 4 Private (TVar (-42)) (Rule [2,7,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("AbstractCurry","CSymbol") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [9]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 22],Var 23],Var 24]])),Branch (Pattern ("AbstractCurry","CLit") [10]) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 25],Var 26],Var 27]])),Branch (Pattern ("AbstractCurry","CApply") [11,12]) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 28],Var 29],Var 30]])),Branch (Pattern ("AbstractCurry","CLambda") [13,14]) (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 31],Var 32],Var 33]])),Branch (Pattern ("AbstractCurry","CLetDecl") [15,16]) (Let [(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 34],Var 35],Var 36]])),Branch (Pattern ("AbstractCurry","CDoExpr") [17]) (Let [(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 37],Var 38],Var 39]])),Branch (Pattern ("AbstractCurry","CListComp") [18,19]) (Let [(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 40],Var 41],Var 42]])),Branch (Pattern ("AbstractCurry","CCase") [20,21]) (Let [(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(44,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(45,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude",":") [Var 44,Comb ConsCall ("Prelude",":") [Var 45,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 5,Var 43],Var 44],Var 45]]))]])),Func ("OracleAbstractCurryPrinter","_case_67") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_66") [Var 2,Var 5,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_66") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_65") [Var 2,Var 5,Var 7,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_65") 4 Private (TVar (-42)) (Rule [2,5,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("AbstractCurry","CLit") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_64") [Var 2,Var 8,Var 5,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_64") 4 Private (TVar (-42)) (Rule [2,8,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("AbstractCurry","CSymbol") [9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [10]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 23],Var 24]])),Branch (Pattern ("AbstractCurry","CLit") [11]) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 25],Var 26]])),Branch (Pattern ("AbstractCurry","CApply") [12,13]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 27],Var 28]])),Branch (Pattern ("AbstractCurry","CLambda") [14,15]) (Let [(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 29],Var 30]])),Branch (Pattern ("AbstractCurry","CLetDecl") [16,17]) (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 31],Var 32]])),Branch (Pattern ("AbstractCurry","CDoExpr") [18]) (Let [(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 33],Var 34]])),Branch (Pattern ("AbstractCurry","CListComp") [19,20]) (Let [(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 35],Var 36]])),Branch (Pattern ("AbstractCurry","CCase") [21,22]) (Let [(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Var 8,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 5,Var 37],Var 38]]))]])),Func ("OracleAbstractCurryPrinter","_case_70") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCharListApplication") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []],Var 5],Var 6]])),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_69") [Var 2,Var 3,Comb FuncCall ("OracleAbstractCurryPrinter","isClosedList") [Var 3,Var 1],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_69") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showConsListApplication") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []],Var 5],Var 6]])),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_68") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_68") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleListApplication") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 5],Var 6]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_75") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_74") [Var 2,Var 4,Var 5,Var 6,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Var 7],Var 8],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_74") 6 Private (TVar (-42)) (Rule [2,4,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showListApplication") [Var 2,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_73") [Var 2,Var 4,Var 5,Var 6,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 8],Var 9],Var 10]]))]])),Func ("OracleAbstractCurryPrinter","_case_73") 6 Private (TVar (-42)) (Rule [2,4,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showITEApplication") [Var 2,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_72") [Var 2,Var 4,Var 6,Comb FuncCall ("OracleAbstractCurryPrinter","isTuple") [Var 6,Var 1],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_72") 5 Private (TVar (-42)) (Rule [2,4,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showTupleApplication") [Var 2,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_71") [Var 2,Var 4,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_71") 4 Private (TVar (-42)) (Rule [2,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_76") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","applicationHead") [Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLit") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CSymbol") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLambda") [8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLetDecl") [10,11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CDoExpr") [12]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CListComp") [13,14]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CCase") [15,16]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2])]])),Func ("OracleAbstractCurryPrinter","_case_77") 4 Private (TVar (-42)) (Rule [2,3,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("AbstractCurry","CSymbol") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSymbolApplication") [Var 2,Var 4,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CLit") [6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [13]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [14,15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [16,17]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSimpleApplication") [Var 2,Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_81") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_80") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 1],Var 5]]))]])),Func ("OracleAbstractCurryPrinter","_case_80") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","head") [Var 3,Var 1],Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_79") [Var 2,Var 3,Comb FuncCall ("OracleAbstractCurryPrinter","isTuple") [Var 2,Var 1],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_79") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") []]],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 5],Var 6]])),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_78") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_78") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","True") []]],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 1],Var 5]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_84") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_83") [Var 2,Var 3,Var 5,Var 6,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_83") 6 Private (TVar (-42)) (Rule [2,3,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showPreludeTypeCons") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 6],Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_82") [Var 3,Var 5,Var 6,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_82") 5 Private (TVar (-42)) (Rule [3,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","True") []]],Comb ConsCall ("Prelude",":") [Var 5,Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 1],Var 8]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_90") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CCharc") [3]) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_89") [Var 3,Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc '\n'),Var 1],Var 4]]))]])),Func ("OracleAbstractCurryPrinter","_case_89") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_88") [Var 3,Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc '\r'),Var 1],Var 5]]))]])),Func ("OracleAbstractCurryPrinter","_case_88") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_87") [Var 3,Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc '\\'),Var 1],Var 5]]))]])),Func ("OracleAbstractCurryPrinter","_case_87") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_86") [Var 3,Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc '"'),Var 1],Var 5]]))]])),Func ("OracleAbstractCurryPrinter","_case_86") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_85") [Var 3,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 5]]))]])),Func ("OracleAbstractCurryPrinter","_case_85") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_91") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CIntc") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CFloatc") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","show") [Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCharc") [5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCCharc") [Comb ConsCall ("AbstractCurry","CCharc") [Var 5],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_92") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CBranch") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 5,Var 6],Var 7],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_94") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPAs") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_93") [Var 4,Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_93") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Var 6,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showPatListElems") [Var 4,Var 1],Var 7],Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 9],Var 10],Var 11],Var 12]]))]])),Func ("OracleAbstractCurryPrinter","_case_95") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CPAs") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("AbstractCurry","CPVar") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CPLit") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CPComb") [7,8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CPFuncComb") [9,10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_97") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CPLit") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_96") [Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CPVar") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CPComb") [8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CPAs") [10,11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CPFuncComb") [12,13]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_96") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("AbstractCurry","CCharc") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("AbstractCurry","CIntc") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CFloatc") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_124") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPComb") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_123") [Var 4,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CPVar") [29]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_123") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_122") [Var 4,Var 6,Var 5,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_122") 4 Private (TVar (-42)) (Rule [4,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_121") [Var 4,Var 6,Var 8,Var 7,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_121") 5 Private (TVar (-42)) (Rule [4,6,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (LPattern (Charc 'P')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_120") [Var 4,Var 6,Var 8,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_120") 4 Private (TVar (-42)) (Rule [4,6,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_119") [Var 4,Var 6,Var 10,Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_119") 5 Private (TVar (-42)) (Rule [4,6,10,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_118") [Var 4,Var 6,Var 10,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_118") 4 Private (TVar (-42)) (Rule [4,6,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_117") [Var 4,Var 6,Var 12,Var 11,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_117") 5 Private (TVar (-42)) (Rule [4,6,12,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_116") [Var 4,Var 6,Var 12,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_116") 4 Private (TVar (-42)) (Rule [4,6,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_115") [Var 4,Var 6,Var 14,Var 13,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_115") 5 Private (TVar (-42)) (Rule [4,6,14,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (LPattern (Charc 'l')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_114") [Var 4,Var 6,Var 14,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_114") 4 Private (TVar (-42)) (Rule [4,6,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_113") [Var 4,Var 6,Var 16,Var 15,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_113") 5 Private (TVar (-42)) (Rule [4,6,16,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 15) [Branch (LPattern (Charc 'u')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_112") [Var 4,Var 6,Var 16,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_112") 4 Private (TVar (-42)) (Rule [4,6,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_111") [Var 4,Var 6,Var 18,Var 17,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_111") 5 Private (TVar (-42)) (Rule [4,6,18,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 17) [Branch (LPattern (Charc 'd')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_110") [Var 4,Var 6,Var 18,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_110") 4 Private (TVar (-42)) (Rule [4,6,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_109") [Var 4,Var 6,Var 20,Var 19,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_109") 5 Private (TVar (-42)) (Rule [4,6,20,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_108") [Var 4,Var 6,Var 20,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_108") 4 Private (TVar (-42)) (Rule [4,6,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_107") [Var 4,Var 6,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_107") 3 Private (TVar (-42)) (Rule [4,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude",":") [21,22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_106") [Var 4,Var 22,Var 21,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_106") 4 Private (TVar (-42)) (Rule [4,22,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 21) [Branch (LPattern (Charc ':')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_105") [Var 4,Var 22,Var 1]]),Branch (LPattern (Charc '[')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_101") [Var 4,Var 22,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_101") 3 Private (TVar (-42)) (Rule [4,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude",":") [27,28]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_100") [Var 4,Var 28,Var 27,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_100") 4 Private (TVar (-42)) (Rule [4,28,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 27) [Branch (LPattern (Charc ']')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_99") [Var 4,Var 28,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_99") 3 Private (TVar (-42)) (Rule [4,28,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_98") [Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_98") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []])]])),Func ("OracleAbstractCurryPrinter","_case_105") 3 Private (TVar (-42)) (Rule [4,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_104") [Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_104") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude",":") [23,24]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_103") [Var 23,Var 24,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_103") 3 Private (TVar (-42)) (Rule [23,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_102") [Var 23,Var 25,Var 26,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_102") 4 Private (TVar (-42)) (Rule [23,25,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isCharPattern") [Var 23,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","isClosedStringPattern") [Var 25,Var 27],Var 28]]))]])),Func ("OracleAbstractCurryPrinter","_case_151") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPComb") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_150") [Var 4,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CPVar") [29]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CPAs") [30,31]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","isClosedPatternList") [Var 31,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_150") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_149") [Var 4,Var 6,Var 5,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_149") 4 Private (TVar (-42)) (Rule [4,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_148") [Var 4,Var 6,Var 8,Var 7,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_148") 5 Private (TVar (-42)) (Rule [4,6,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (LPattern (Charc 'P')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_147") [Var 4,Var 6,Var 8,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_147") 4 Private (TVar (-42)) (Rule [4,6,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_146") [Var 4,Var 6,Var 10,Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_146") 5 Private (TVar (-42)) (Rule [4,6,10,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_145") [Var 4,Var 6,Var 10,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_145") 4 Private (TVar (-42)) (Rule [4,6,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_144") [Var 4,Var 6,Var 12,Var 11,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_144") 5 Private (TVar (-42)) (Rule [4,6,12,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_143") [Var 4,Var 6,Var 12,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_143") 4 Private (TVar (-42)) (Rule [4,6,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_142") [Var 4,Var 6,Var 14,Var 13,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_142") 5 Private (TVar (-42)) (Rule [4,6,14,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (LPattern (Charc 'l')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_141") [Var 4,Var 6,Var 14,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_141") 4 Private (TVar (-42)) (Rule [4,6,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_140") [Var 4,Var 6,Var 16,Var 15,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_140") 5 Private (TVar (-42)) (Rule [4,6,16,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 15) [Branch (LPattern (Charc 'u')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_139") [Var 4,Var 6,Var 16,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_139") 4 Private (TVar (-42)) (Rule [4,6,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_138") [Var 4,Var 6,Var 18,Var 17,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_138") 5 Private (TVar (-42)) (Rule [4,6,18,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 17) [Branch (LPattern (Charc 'd')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_137") [Var 4,Var 6,Var 18,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_137") 4 Private (TVar (-42)) (Rule [4,6,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_136") [Var 4,Var 6,Var 20,Var 19,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_136") 5 Private (TVar (-42)) (Rule [4,6,20,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_135") [Var 4,Var 6,Var 20,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_135") 4 Private (TVar (-42)) (Rule [4,6,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_134") [Var 4,Var 6,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_134") 3 Private (TVar (-42)) (Rule [4,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude",":") [21,22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_133") [Var 4,Var 22,Var 21,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_133") 4 Private (TVar (-42)) (Rule [4,22,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 21) [Branch (LPattern (Charc ':')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_132") [Var 4,Var 22,Var 1]]),Branch (LPattern (Charc '[')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_128") [Var 4,Var 22,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_128") 3 Private (TVar (-42)) (Rule [4,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude",":") [27,28]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_127") [Var 4,Var 28,Var 27,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_127") 4 Private (TVar (-42)) (Rule [4,28,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 27) [Branch (LPattern (Charc ']')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_126") [Var 4,Var 28,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_126") 3 Private (TVar (-42)) (Rule [4,28,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_125") [Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_125") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []])]])),Func ("OracleAbstractCurryPrinter","_case_132") 3 Private (TVar (-42)) (Rule [4,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_131") [Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_131") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude",":") [23,24]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_130") [Var 24,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_130") 2 Private (TVar (-42)) (Rule [24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_129") [Var 25,Var 26,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_129") 3 Private (TVar (-42)) (Rule [25,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","isClosedPatternList") [Var 25,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_178") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPComb") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_177") [Var 4,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CPVar") [29]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPVar") [Var 29],Var 1],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("AbstractCurry","CPAs") [30,31]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPAs") [Var 30,Var 31],Var 1],Comb ConsCall ("Prelude","[]") []]])]])),Func ("OracleAbstractCurryPrinter","_case_177") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_176") [Var 4,Var 6,Var 5,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_176") 4 Private (TVar (-42)) (Rule [4,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_175") [Var 4,Var 6,Var 8,Var 7,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_175") 5 Private (TVar (-42)) (Rule [4,6,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (LPattern (Charc 'P')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_174") [Var 4,Var 6,Var 8,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_174") 4 Private (TVar (-42)) (Rule [4,6,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_173") [Var 4,Var 6,Var 10,Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_173") 5 Private (TVar (-42)) (Rule [4,6,10,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_172") [Var 4,Var 6,Var 10,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_172") 4 Private (TVar (-42)) (Rule [4,6,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_171") [Var 4,Var 6,Var 12,Var 11,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_171") 5 Private (TVar (-42)) (Rule [4,6,12,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_170") [Var 4,Var 6,Var 12,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_170") 4 Private (TVar (-42)) (Rule [4,6,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_169") [Var 4,Var 6,Var 14,Var 13,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_169") 5 Private (TVar (-42)) (Rule [4,6,14,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (LPattern (Charc 'l')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_168") [Var 4,Var 6,Var 14,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_168") 4 Private (TVar (-42)) (Rule [4,6,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_167") [Var 4,Var 6,Var 16,Var 15,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_167") 5 Private (TVar (-42)) (Rule [4,6,16,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 15) [Branch (LPattern (Charc 'u')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_166") [Var 4,Var 6,Var 16,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_166") 4 Private (TVar (-42)) (Rule [4,6,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_165") [Var 4,Var 6,Var 18,Var 17,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_165") 5 Private (TVar (-42)) (Rule [4,6,18,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 17) [Branch (LPattern (Charc 'd')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_164") [Var 4,Var 6,Var 18,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_164") 4 Private (TVar (-42)) (Rule [4,6,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_163") [Var 4,Var 6,Var 20,Var 19,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_163") 5 Private (TVar (-42)) (Rule [4,6,20,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_162") [Var 4,Var 6,Var 20,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_162") 4 Private (TVar (-42)) (Rule [4,6,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_161") [Var 4,Var 6,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_161") 3 Private (TVar (-42)) (Rule [4,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude",":") [21,22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_160") [Var 4,Var 22,Var 21,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_160") 4 Private (TVar (-42)) (Rule [4,22,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 21) [Branch (LPattern (Charc ':')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_159") [Var 4,Var 22,Var 1]]),Branch (LPattern (Charc '[')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_155") [Var 4,Var 22,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_155") 3 Private (TVar (-42)) (Rule [4,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude",":") [27,28]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_154") [Var 4,Var 28,Var 27,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_154") 4 Private (TVar (-42)) (Rule [4,28,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 27) [Branch (LPattern (Charc ']')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_153") [Var 4,Var 28,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_153") 3 Private (TVar (-42)) (Rule [4,28,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_152") [Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_152") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleAbstractCurryPrinter","_case_159") 3 Private (TVar (-42)) (Rule [4,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_158") [Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_158") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude",":") [23,24]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_157") [Var 23,Var 24,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_157") 3 Private (TVar (-42)) (Rule [23,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_156") [Var 23,Var 25,Var 26,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_156") 4 Private (TVar (-42)) (Rule [23,25,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Var 23,Var 1],Comb FuncCall ("OracleAbstractCurryPrinter","showPatListElems") [Var 25,Var 27]]]))]])),Func ("OracleAbstractCurryPrinter","_case_182") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Lit (Charc '\'')]],Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleAbstractCurryPrinter","showPatListElems") [Var 2,Var 1],Var 4],Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []],Var 6]]])),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_181") [Var 2,Comb FuncCall ("OracleAbstractCurryPrinter","isClosedPatternList") [Var 2,Var 1],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_181") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showPatListElems") [Var 2,Var 1],Var 4],Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_180") [Var 2,Comb FuncCall ("OracleAbstractCurryPrinter","isAsPattern") [Var 2,Var 1],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_180") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showAsPatternList") [Var 2,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_179") [Var 2,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 4]]))]])),Func ("OracleAbstractCurryPrinter","_case_179") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showPatListElems") [Var 2,Var 1],Var 4],Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_184") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPComb") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_183") [Var 4,Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_183") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleAbstractCurryPrinter","_case_186") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPComb") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_185") [Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_185") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleAbstractCurryPrinter","_case_189") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showPatternList") [Var 2,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_188") [Var 4,Var 5,Comb FuncCall ("OracleAbstractCurryPrinter","isTuple") [Var 4,Var 1],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_188") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showPattern") []],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 7],Var 8]])),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_187") [Var 4,Var 5,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_187") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 4,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showPattern") []],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 7],Var 8],Var 9]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_196") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPVar") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_195") [Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CPLit") [6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLiteral") [Var 6,Var 1]]),Branch (Pattern ("AbstractCurry","CPComb") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_194") [Var 8,Var 7,Var 1]]),Branch (Pattern ("AbstractCurry","CPAs") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_190") [Var 14,Var 13,Var 1]]),Branch (Pattern ("AbstractCurry","CPFuncComb") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPComb") [Var 17,Var 18],Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_190") 3 Private (TVar (-42)) (Rule [14,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","showIdentifier") [Var 1],Var 16,Var 17],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Var 14,Var 18],Var 19],Var 20]]))]])),Func ("OracleAbstractCurryPrinter","_case_194") 3 Private (TVar (-42)) (Rule [8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_193") [Var 9,Var 10,Var 8,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_193") 4 Private (TVar (-42)) (Rule [9,10,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 10]),Branch (Pattern ("Prelude",":") [11,12]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_192") [Var 9,Var 10,Var 11,Var 12,Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Var 13]]))]])),Func ("OracleAbstractCurryPrinter","_case_192") 6 Private (TVar (-42)) (Rule [9,10,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showPreludeCons") [Comb ConsCall ("AbstractCurry","CPComb") [Comb ConsCall ("Prelude","(,)") [Var 9,Var 10],Comb ConsCall ("Prelude",":") [Var 11,Var 12]],Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_191") [Var 10,Var 11,Var 12,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 14]]))]])),Func ("OracleAbstractCurryPrinter","_case_191") 5 Private (TVar (-42)) (Rule [10,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 10,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showPattern") []],Comb ConsCall ("Prelude",":") [Var 11,Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 14],Var 15],Var 16]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_195") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","showIdentifier") [Var 1],Var 5,Var 6]]))]])),Func ("OracleAbstractCurryPrinter","_case_199") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CSExpr") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSPat") [5,6]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 6,Var 8],Var 9],Var 10]])),Branch (Pattern ("AbstractCurry","CSLet") [7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_198") [Var 2,Var 7,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_198") 3 Private (TVar (-42)) (Rule [2,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_197") [Var 2,Var 7,Var 8,Var 9,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showLocalDecl") [Var 2]],Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 10],Var 11]]))]])),Func ("OracleAbstractCurryPrinter","_case_197") 5 Private (TVar (-42)) (Rule [2,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showLocalDecl") [Var 2,Var 8,Var 1],Var 12]])),Branch (Pattern ("Prelude",":") [10,11]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showLocalDecl") [Var 2]],Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 13],Var 14]]))]])),Func ("OracleAbstractCurryPrinter","_case_226") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_225") [Var 2,Var 3,Var 4,Var 6,Var 5,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_225") 6 Private (TVar (-42)) (Rule [2,3,4,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("AbstractCurry","CPVar") [7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_224") [Var 2,Var 3,Var 4,Var 7,Var 6,Var 1]]),Branch (Pattern ("AbstractCurry","CPLit") [180]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CPComb") [181,182]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CPAs") [183,184]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CPFuncComb") [185,186]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_224") 6 Private (TVar (-42)) (Rule [2,3,4,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_223") [Var 2,Var 3,Var 7,Var 4,Var 1]]),Branch (Pattern ("Prelude",":") [178,179]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_223") 5 Private (TVar (-42)) (Rule [2,3,7,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("AbstractCurry","CApply") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_222") [Var 2,Var 3,Var 4,Var 7,Var 9,Var 8,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [166]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLit") [167]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [168]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [169,170]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [171,172]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [173]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [174,175]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [176,177]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_222") 7 Private (TVar (-42)) (Rule [2,3,4,7,9,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("AbstractCurry","CApply") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_221") [Var 2,Var 3,Var 4,Var 7,Var 9,Var 11,Var 10,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [154]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLit") [155]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [156]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [157,158]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [159,160]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [161]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [162,163]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [164,165]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_221") 8 Private (TVar (-42)) (Rule [2,3,4,7,9,11,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CSymbol") [12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_220") [Var 2,Var 3,Var 4,Var 7,Var 9,Var 11,Var 12,Var 1]]),Branch (Pattern ("AbstractCurry","CVar") [141]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLit") [142]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [143,144]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [145,146]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [147,148]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [149]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [150,151]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [152,153]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_220") 8 Private (TVar (-42)) (Rule [2,3,4,7,9,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","(,)") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_219") [Var 2,Var 3,Var 4,Var 7,Var 11,Var 14,Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_219") 8 Private (TVar (-42)) (Rule [2,3,4,7,11,14,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("AbstractCurry","CVar") [15]) (Let [(127,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(128,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(129,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(130,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(131,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(132,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 127,Comb ConsCall ("Prelude",":") [Var 128,Comb ConsCall ("Prelude",":") [Var 129,Comb ConsCall ("Prelude",":") [Var 130,Comb ConsCall ("Prelude",":") [Var 131,Comb ConsCall ("Prelude",":") [Var 132,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_218") [Var 2,Var 3,Var 4,Var 7,Var 11,Var 14,Var 15,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 127],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Var 11,Var 128],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 15],Var 11,Var 129],Var 130],Var 131],Var 132]])),Branch (Pattern ("AbstractCurry","CLit") [16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_215") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 16,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [31]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_213") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 31,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [46,47]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_211") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 46,Var 47,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [62,63]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_209") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 62,Var 63,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [78,79]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_207") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 78,Var 79,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [94]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_205") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 94,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [109,110]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_203") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 109,Var 110,Var 11,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [125,126]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_201") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 125,Var 126,Var 11,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_201") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,125,126,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [127]) (Let [(141,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(142,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(143,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(144,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(145,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(146,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(147,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(148,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 141,Comb ConsCall ("Prelude",":") [Var 142,Comb ConsCall ("Prelude",":") [Var 143,Comb ConsCall ("Prelude",":") [Var 144,Comb ConsCall ("Prelude",":") [Var 145,Comb ConsCall ("Prelude",":") [Var 146,Comb ConsCall ("Prelude",":") [Var 147,Comb ConsCall ("Prelude",":") [Var 148,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_200") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 125,Var 126,Var 127,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 141],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 127,Var 142],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CCase") [Var 125,Var 126],Var 143],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 127],Comb ConsCall ("AbstractCurry","CCase") [Var 125,Var 126],Var 144],Var 145],Var 146],Var 147],Var 148]])),Branch (Pattern ("AbstractCurry","CLit") [128]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [129]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [130,131]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [132,133]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [134,135]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [136]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [137,138]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [139,140]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_200") 10 Private (TVar (-42)) (Rule [2,3,4,7,14,125,126,127,128,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 128) [Branch (Pattern ("Prelude","True") []) (Let [(129,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(130,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(131,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(132,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 129,Comb ConsCall ("Prelude",":") [Var 130,Comb ConsCall ("Prelude",":") [Var 131,Comb ConsCall ("Prelude",":") [Var 132,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CCase") [Var 125,Var 126],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 129],Var 130],Var 131],Var 132]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_203") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,109,110,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [111]) (Let [(125,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(126,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(127,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(128,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(129,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(130,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(131,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(132,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 125,Comb ConsCall ("Prelude",":") [Var 126,Comb ConsCall ("Prelude",":") [Var 127,Comb ConsCall ("Prelude",":") [Var 128,Comb ConsCall ("Prelude",":") [Var 129,Comb ConsCall ("Prelude",":") [Var 130,Comb ConsCall ("Prelude",":") [Var 131,Comb ConsCall ("Prelude",":") [Var 132,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_202") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 109,Var 110,Var 111,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 125],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 111,Var 126],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CListComp") [Var 109,Var 110],Var 127],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 111],Comb ConsCall ("AbstractCurry","CListComp") [Var 109,Var 110],Var 128],Var 129],Var 130],Var 131],Var 132]])),Branch (Pattern ("AbstractCurry","CLit") [112]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [113]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [114,115]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [116,117]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [118,119]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [120]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [121,122]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [123,124]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_202") 10 Private (TVar (-42)) (Rule [2,3,4,7,14,109,110,111,112,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 112) [Branch (Pattern ("Prelude","True") []) (Let [(113,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(114,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(115,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(116,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 113,Comb ConsCall ("Prelude",":") [Var 114,Comb ConsCall ("Prelude",":") [Var 115,Comb ConsCall ("Prelude",":") [Var 116,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CListComp") [Var 109,Var 110],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 113],Var 114],Var 115],Var 116]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_205") 8 Private (TVar (-42)) (Rule [2,3,4,7,14,94,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [95]) (Let [(109,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(110,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(111,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(112,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(113,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(114,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(115,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(116,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 109,Comb ConsCall ("Prelude",":") [Var 110,Comb ConsCall ("Prelude",":") [Var 111,Comb ConsCall ("Prelude",":") [Var 112,Comb ConsCall ("Prelude",":") [Var 113,Comb ConsCall ("Prelude",":") [Var 114,Comb ConsCall ("Prelude",":") [Var 115,Comb ConsCall ("Prelude",":") [Var 116,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_204") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 94,Var 95,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 109],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 95,Var 110],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CDoExpr") [Var 94],Var 111],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 95],Comb ConsCall ("AbstractCurry","CDoExpr") [Var 94],Var 112],Var 113],Var 114],Var 115],Var 116]])),Branch (Pattern ("AbstractCurry","CLit") [96]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [97]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [98,99]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [100,101]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [102,103]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [104]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [105,106]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [107,108]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_204") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,94,95,96,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 96) [Branch (Pattern ("Prelude","True") []) (Let [(97,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(98,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(99,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(100,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 97,Comb ConsCall ("Prelude",":") [Var 98,Comb ConsCall ("Prelude",":") [Var 99,Comb ConsCall ("Prelude",":") [Var 100,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CDoExpr") [Var 94],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 97],Var 98],Var 99],Var 100]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_207") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,78,79,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [80]) (Let [(94,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(95,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(96,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(97,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(98,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(99,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(100,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(101,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 94,Comb ConsCall ("Prelude",":") [Var 95,Comb ConsCall ("Prelude",":") [Var 96,Comb ConsCall ("Prelude",":") [Var 97,Comb ConsCall ("Prelude",":") [Var 98,Comb ConsCall ("Prelude",":") [Var 99,Comb ConsCall ("Prelude",":") [Var 100,Comb ConsCall ("Prelude",":") [Var 101,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_206") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 78,Var 79,Var 80,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 94],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 80,Var 95],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CLetDecl") [Var 78,Var 79],Var 96],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 80],Comb ConsCall ("AbstractCurry","CLetDecl") [Var 78,Var 79],Var 97],Var 98],Var 99],Var 100],Var 101]])),Branch (Pattern ("AbstractCurry","CLit") [81]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [82]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [83,84]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [85,86]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [87,88]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [89]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [90,91]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [92,93]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_206") 10 Private (TVar (-42)) (Rule [2,3,4,7,14,78,79,80,81,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 81) [Branch (Pattern ("Prelude","True") []) (Let [(82,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(83,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(84,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(85,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 82,Comb ConsCall ("Prelude",":") [Var 83,Comb ConsCall ("Prelude",":") [Var 84,Comb ConsCall ("Prelude",":") [Var 85,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CLetDecl") [Var 78,Var 79],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 82],Var 83],Var 84],Var 85]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_209") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,62,63,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [64]) (Let [(78,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(79,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(80,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(81,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(82,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(83,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(84,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(85,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 78,Comb ConsCall ("Prelude",":") [Var 79,Comb ConsCall ("Prelude",":") [Var 80,Comb ConsCall ("Prelude",":") [Var 81,Comb ConsCall ("Prelude",":") [Var 82,Comb ConsCall ("Prelude",":") [Var 83,Comb ConsCall ("Prelude",":") [Var 84,Comb ConsCall ("Prelude",":") [Var 85,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_208") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 62,Var 63,Var 64,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 78],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 64,Var 79],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CLambda") [Var 62,Var 63],Var 80],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 64],Comb ConsCall ("AbstractCurry","CLambda") [Var 62,Var 63],Var 81],Var 82],Var 83],Var 84],Var 85]])),Branch (Pattern ("AbstractCurry","CLit") [65]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [66]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [67,68]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [69,70]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [71,72]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [73]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [74,75]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [76,77]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_208") 10 Private (TVar (-42)) (Rule [2,3,4,7,14,62,63,64,65,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 65) [Branch (Pattern ("Prelude","True") []) (Let [(66,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(67,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(68,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(69,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 66,Comb ConsCall ("Prelude",":") [Var 67,Comb ConsCall ("Prelude",":") [Var 68,Comb ConsCall ("Prelude",":") [Var 69,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CLambda") [Var 62,Var 63],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 66],Var 67],Var 68],Var 69]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_211") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,46,47,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [48]) (Let [(62,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(63,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(64,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(65,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(66,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(67,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(68,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(69,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 62,Comb ConsCall ("Prelude",":") [Var 63,Comb ConsCall ("Prelude",":") [Var 64,Comb ConsCall ("Prelude",":") [Var 65,Comb ConsCall ("Prelude",":") [Var 66,Comb ConsCall ("Prelude",":") [Var 67,Comb ConsCall ("Prelude",":") [Var 68,Comb ConsCall ("Prelude",":") [Var 69,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_210") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 46,Var 47,Var 48,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 62],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 48,Var 63],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CApply") [Var 46,Var 47],Var 64],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 48],Comb ConsCall ("AbstractCurry","CApply") [Var 46,Var 47],Var 65],Var 66],Var 67],Var 68],Var 69]])),Branch (Pattern ("AbstractCurry","CLit") [49]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [50]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [51,52]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [53,54]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [55,56]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [57]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [58,59]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [60,61]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_210") 10 Private (TVar (-42)) (Rule [2,3,4,7,14,46,47,48,49,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 49) [Branch (Pattern ("Prelude","True") []) (Let [(50,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(51,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(52,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(53,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 50,Comb ConsCall ("Prelude",":") [Var 51,Comb ConsCall ("Prelude",":") [Var 52,Comb ConsCall ("Prelude",":") [Var 53,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CApply") [Var 46,Var 47],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 50],Var 51],Var 52],Var 53]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_213") 8 Private (TVar (-42)) (Rule [2,3,4,7,14,31,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [32]) (Let [(46,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(47,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(48,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(49,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(50,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(51,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(52,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(53,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 46,Comb ConsCall ("Prelude",":") [Var 47,Comb ConsCall ("Prelude",":") [Var 48,Comb ConsCall ("Prelude",":") [Var 49,Comb ConsCall ("Prelude",":") [Var 50,Comb ConsCall ("Prelude",":") [Var 51,Comb ConsCall ("Prelude",":") [Var 52,Comb ConsCall ("Prelude",":") [Var 53,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_212") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 31,Var 32,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 46],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 32,Var 47],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CSymbol") [Var 31],Var 48],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 32],Comb ConsCall ("AbstractCurry","CSymbol") [Var 31],Var 49],Var 50],Var 51],Var 52],Var 53]])),Branch (Pattern ("AbstractCurry","CLit") [33]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [34]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [35,36]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [37,38]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [39,40]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [41]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [42,43]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [44,45]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_212") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,31,32,33,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 33) [Branch (Pattern ("Prelude","True") []) (Let [(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CSymbol") [Var 31],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 34],Var 35],Var 36],Var 37]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_215") 8 Private (TVar (-42)) (Rule [2,3,4,7,14,16,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("AbstractCurry","CVar") [17]) (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_214") [Var 2,Var 3,Var 4,Var 7,Var 14,Var 16,Var 17,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 14,Var 31],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 7,Var 17,Var 32],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleAbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CLit") [Var 16],Var 33],Comb FuncCall ("OraclePrelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 17],Comb ConsCall ("AbstractCurry","CLit") [Var 16],Var 34],Var 35],Var 36],Var 37],Var 38]])),Branch (Pattern ("AbstractCurry","CLit") [18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [19]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CApply") [20,21]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [22,23]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [24,25]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CDoExpr") [26]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CListComp") [27,28]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CCase") [29,30]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_214") 9 Private (TVar (-42)) (Rule [2,3,4,7,14,16,17,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude","True") []) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Comb ConsCall ("AbstractCurry","CLit") [Var 16],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 19],Var 20],Var 21],Var 22]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_218") 9 Private (TVar (-42)) (Rule [2,3,4,7,11,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_217") [Var 2,Var 3,Var 4,Var 7,Var 11,Var 14,Var 15,Comb FuncCall ("OraclePrelude","==") [Var 7,Var 15,Var 1],Var 17]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_217") 9 Private (TVar (-42)) (Rule [2,3,4,7,11,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 11,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 17],Var 18],Var 19],Var 20]])),Branch (Pattern ("Prelude","False") []) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_216") [Var 2,Var 3,Var 4,Var 7,Var 11,Var 14,Var 15,Comb FuncCall ("OraclePrelude","==") [Var 11,Comb ConsCall ("AbstractCurry","CVar") [Var 7],Var 1],Var 21]]))]])),Func ("OracleAbstractCurryPrinter","_case_216") 9 Private (TVar (-42)) (Rule [2,3,4,7,11,14,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Comb ConsCall ("AbstractCurry","CVar") [Var 15],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 17],Var 18],Var 19],Var 20]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambda") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_231") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_230") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_230") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_229") [Var 4,Var 5,Var 6,Var 7,Comb FuncCall ("OraclePrelude","==") [Var 5,Var 6,Var 1],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_229") 6 Private (TVar (-42)) (Rule [4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_228") [Var 4,Var 6,Var 7,Comb FuncCall ("OracleMaybe","isJust") [Comb FuncCall ("OracleFiniteMap","lookupFM") [Var 4,Var 7,Var 1],Var 9],Var 10]]))]])),Func ("OracleAbstractCurryPrinter","_case_228") 5 Private (TVar (-42)) (Rule [4,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 6,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude","[]") []],Var 7,Var 1],Var 9]])),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_227") [Var 7,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 10]]))]])),Func ("OracleAbstractCurryPrinter","_case_227") 3 Private (TVar (-42)) (Rule [7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_234") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CVar") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_233") [Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CLit") [7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLiteral") [Var 7,Var 1]]),Branch (Pattern ("AbstractCurry","CSymbol") [8]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_232") [Var 2,Var 8,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Comb FuncCall ("OraclePrelude","snd") [Var 8,Var 20],Var 21],Var 22]])),Branch (Pattern ("AbstractCurry","CApply") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showApplication") [Var 2,Comb ConsCall ("AbstractCurry","CApply") [Var 9,Var 10],Var 1]]),Branch (Pattern ("AbstractCurry","CLambda") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showLambdaOrSection") [Var 2,Var 11,Var 12,Var 1]]),Branch (Pattern ("AbstractCurry","CLetDecl") [13,14]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showLocalDecl") [Var 2]],Var 13,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 14,Var 23],Var 24],Var 25],Var 26],Var 27]])),Branch (Pattern ("AbstractCurry","CDoExpr") [15]) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showStatement") [Var 2]],Var 15,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 28],Var 29]])),Branch (Pattern ("AbstractCurry","CListComp") [16,17]) (Let [(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 16,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showStatement") [Var 2]],Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Var 30],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []],Var 31],Var 32],Var 33],Var 34]])),Branch (Pattern ("AbstractCurry","CCase") [18,19]) (Let [(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showBoxedExpr") [Var 2,Var 18,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showBranchExpr") [Var 2]],Var 19,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 35],Var 36],Var 37],Var 38],Var 39]]))]])),Func ("OracleAbstractCurryPrinter","_case_232") 4 Private (TVar (-42)) (Rule [2,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 8,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 10],Var 11]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showSymbol") [Var 2,Var 8,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_233") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","showIdentifier") [Var 1],Var 6,Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_236") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CLocalFunc") [4]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","showLocalFuncDecl") [Var 2,Var 1],Var 4,Var 9]])),Branch (Pattern ("AbstractCurry","CLocalPat") [5,6,7]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 6,Var 10],Comb FuncCall ("OracleAbstractCurryPrinter","_case_235") [Var 2,Var 7,Comb FuncCall ("OraclePrelude","null") [Var 7,Var 11],Var 12],Var 13],Var 14],Var 15]])),Branch (Pattern ("AbstractCurry","CLocalVar") [8]) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPVar") [Var 8],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]],Var 16]]))]])),Func ("OracleAbstractCurryPrinter","_case_235") 4 Private (TVar (-42)) (Rule [2,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showLocalDecl") [Var 2]],Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 9],Var 10]]))]])),Func ("OracleAbstractCurryPrinter","_case_237") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 5,Var 6],Var 7],Var 8],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_241") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_240") [Var 2,Var 5,Var 4,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_240") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_239") [Var 2,Var 5,Var 6,Var 7,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude","[]") [],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("AbstractCurry","CSymbol") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 8],Var 9],Var 10]]))]])),Func ("OracleAbstractCurryPrinter","_case_239") 6 Private (TVar (-42)) (Rule [2,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","showExprOpt") [Var 2,Var 7,Var 1],Var 9]])),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_238") [Var 2,Var 5,Var 6,Var 7,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 10]]))]])),Func ("OracleAbstractCurryPrinter","_case_238") 6 Private (TVar (-42)) (Rule [2,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showCrhs") [Var 2]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Var 7],Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 9],Var 10]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_242") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CFlex") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("AbstractCurry","CRigid") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractCurry","CChoice") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])]])),Func ("OracleAbstractCurryPrinter","_case_244") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CRule") [4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showPattern") []],Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showCrhsList") [Var 2,Var 5,Var 7],Comb FuncCall ("OracleAbstractCurryPrinter","_case_243") [Var 2,Var 6,Comb FuncCall ("OraclePrelude","null") [Var 6,Var 8],Var 9],Var 10],Var 11]]))]])),Func ("OracleAbstractCurryPrinter","_case_243") 4 Private (TVar (-42)) (Rule [2,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showLocalDecl") [Var 2]],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 8],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_245") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 4,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 2,Var 5,Var 1],Var 6],Var 7]]))]])),Func ("OracleAbstractCurryPrinter","_case_253") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("AbstractCurry","CFunc") [5,6,7,8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_252") [Var 2,Var 3,Var 8,Var 9,Var 5,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_252") 6 Private (TVar (-42)) (Rule [2,3,8,9,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_251") [Var 2,Var 3,Var 8,Var 11,Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_251") 6 Private (TVar (-42)) (Rule [2,3,8,11,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("AbstractCurry","CRules") [12,13]) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]],Let [(14,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 11,Var 19])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Let [(15,Comb FuncCall ("OracleAbstractCurryPrinter","_case_247") [Var 11,Var 14,Var 20])] (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]]]],Let [(16,Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","concat") []],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","map") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showCmtFunc.insertName.139") [Var 11]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","span") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Lit (Charc ' ')]]]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","tail") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showRule") [Var 2]],Var 21],Var 22],Var 23],Var 13,Var 24],Var 25],Var 26])] (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","funcComment") [Var 27],Var 3,Var 28],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","_case_250") [Var 12,Var 15,Comb FuncCall ("OraclePrelude","==") [Var 12,Comb ConsCall ("AbstractCurry","CFlex") [],Var 29],Var 30],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","_case_249") [Var 8,Var 15,Comb FuncCall ("OracleAbstractCurryPrinter","isUntyped") [Var 8,Var 31],Var 32],Comb FuncCall ("OracleAbstractCurryPrinter","_case_248") [Var 2,Var 11,Var 13,Var 16,Var 14,Var 33],Var 34],Var 35],Var 36]]))]))]))])),Branch (Pattern ("AbstractCurry","CExternal") [17]) (Let [(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude","[]") []]]],Let [(18,Comb FuncCall ("OracleAbstractCurryPrinter","_case_246") [Var 11,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 1],Var 11,Var 37],Var 38])] (Let [(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(44,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(45,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(46,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(47,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude",":") [Var 44,Comb ConsCall ("Prelude",":") [Var 45,Comb ConsCall ("Prelude",":") [Var 46,Comb ConsCall ("Prelude",":") [Var 47,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","funcComment") [Var 39],Var 3,Var 40],Comb FuncCall ("OraclePrelude","++") [Var 18,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 8,Var 41],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 18,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 42],Var 43],Var 44],Var 45],Var 46],Var 47]]))]))]])),Func ("OracleAbstractCurryPrinter","_case_246") 3 Private (TVar (-42)) (Rule [11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 13]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 11])]])),Func ("OracleAbstractCurryPrinter","_case_247") 3 Private (TVar (-42)) (Rule [11,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 15]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 11])]])),Func ("OracleAbstractCurryPrinter","_case_248") 6 Private (TVar (-42)) (Rule [2,11,13,16,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 16]),Branch (Pattern ("Prelude","False") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 11,Comb FuncCall ("OracleAbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showRule") [Var 2]],Var 13,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 11,Var 1],Var 17],Var 18]]))]])),Func ("OracleAbstractCurryPrinter","_case_249") 4 Private (TVar (-42)) (Rule [8,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 15,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 8,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 17],Var 18],Var 19]]))]])),Func ("OracleAbstractCurryPrinter","_case_250") 4 Private (TVar (-42)) (Rule [12,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 15,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showEvalAnnot") [Var 12,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 17],Var 18],Var 19]]))]])),Func ("OracleAbstractCurryPrinter","_case_254") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CmtFunc") [4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showCmtFunc") [Var 2,Var 4,Comb ConsCall ("AbstractCurry","CFunc") [Var 5,Var 6,Var 7,Var 8,Var 9],Var 1]]),Branch (Pattern ("AbstractCurry","CFunc") [10,11,12,13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","showCmtFunc") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_255") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CFuncType") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("AbstractCurry","CTVar") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("AbstractCurry","CTCons") [6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleAbstractCurryPrinter","_case_257") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_256") [Var 3,Var 4,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 3,Lit (Charc 'a'),Var 1],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("OraclePrelude","null") [Var 4,Var 5],Var 6],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","all") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleChar","isDigit") []],Var 7],Var 4,Var 8],Var 9],Var 10],Var 11]]))]])),Func ("OracleAbstractCurryPrinter","_case_256") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Var 4]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Var 4]])]])),Func ("OracleAbstractCurryPrinter","_case_262") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("AbstractCurry","CTVar") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_261") [Var 4,Var 1]]),Branch (Pattern ("AbstractCurry","CFuncType") [7,8]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleAbstractCurryPrinter","maybeShowBrackets") [Var 2,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showTypeExpr") [Comb FuncCall ("OracleAbstractCurryPrinter","isCFuncType") [Var 7,Var 1],Var 7,Var 11],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 8,Var 12],Var 13],Var 14],Var 15]])),Branch (Pattern ("AbstractCurry","CTCons") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_260") [Var 2,Var 10,Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_260") 4 Private (TVar (-42)) (Rule [2,10,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [11,12]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","_case_259") [Var 2,Var 10,Var 11,Var 12,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 13],Var 14],Var 15]]))]])),Func ("OracleAbstractCurryPrinter","_case_259") 6 Private (TVar (-42)) (Rule [2,10,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_258") [Var 2,Var 10,Var 11,Var 12,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 14]]))]])),Func ("OracleAbstractCurryPrinter","_case_258") 6 Private (TVar (-42)) (Rule [2,10,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAbstractCurryPrinter","maybeShowBrackets") [Comb FuncCall ("OraclePrelude","&&") [Var 2,Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("OraclePrelude","null") [Var 10,Var 1],Var 14],Var 15],Comb FuncCall ("OracleAbstractCurryPrinter","showTypeCons") [Var 11,Var 12,Var 10,Var 16],Var 17]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_261") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","showTypeVar") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","showIdentifier") [Var 1],Var 6,Var 7],Var 8]]))]])),Func ("OracleAbstractCurryPrinter","_case_264") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CCons") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_263") [Var 6,Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_263") 3 Private (TVar (-42)) (Rule [6,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 8,Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","True") []]],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 1],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_267") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CTypeSyn") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_266") [Var 5,Var 6,Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CType") [9,10,11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_265") [Var 11,Var 12,Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_265") 4 Private (TVar (-42)) (Rule [11,12,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [13,14]) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Var 14,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") []]],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("AbstractCurry","CTVar") []],Var 11,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 15],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","showBlock") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAbstractCurryPrinter","combineMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showConsDecl") []],Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Var 16],Var 17],Var 18],Var 19],Var 20],Var 21],Var 22]]))]])),Func ("OracleAbstractCurryPrinter","_case_266") 4 Private (TVar (-42)) (Rule [5,6,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Var 8,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") []]],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("AbstractCurry","CTVar") []],Var 5,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 9],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleAbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 6,Var 10],Var 11],Var 12],Var 13],Var 14]]))]])),Func ("OracleAbstractCurryPrinter","_case_268") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]])]])),Func ("OracleAbstractCurryPrinter","_case_269") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CInfixOp") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractCurry","CInfixlOp") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("AbstractCurry","CInfixrOp") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]])]])),Func ("OracleAbstractCurryPrinter","_case_272") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","COp") [3,4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_271") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_271") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showFixity") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 5,Var 8],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAbstractCurryPrinter","_case_270") [Var 7,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","isInfixOpName") [Var 9],Var 7,Var 10],Var 11],Var 12],Var 13],Var 14],Var 15]]))]])),Func ("OracleAbstractCurryPrinter","_case_270") 3 Private (TVar (-42)) (Rule [7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb FuncCall ("OraclePrelude","++") [Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude","[]") []],Var 1]]])]])),Func ("OracleAbstractCurryPrinter","_case_273") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]])]])),Func ("OracleAbstractCurryPrinter","_case_274") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 2,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleAbstractCurryPrinter","_case_275") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]])]])),Func ("OracleAbstractCurryPrinter","_case_276") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleAbstractCurryPrinter","_case_277") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleAbstractCurryPrinter","_case_280") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CFunc") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_279") [Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CmtFunc") [10,11,12,13,14,15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_278") [Var 11,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_278") 2 Private (TVar (-42)) (Rule [11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (Pattern ("Prelude","(,)") [16,17]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 17])]])),Func ("OracleAbstractCurryPrinter","_case_279") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 9])]])),Func ("OracleAbstractCurryPrinter","_case_281") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CCons") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("AbstractCurry","Public") [],Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_282") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CType") [3,4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","length") [Comb FuncCall ("OraclePrelude","filter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showExports.allPublicCons.9.isPublicCons.49") []],Var 6,Var 1],Var 7],Comb FuncCall ("OraclePrelude","length") [Var 6,Var 8],Var 9]]))]])),Func ("OracleAbstractCurryPrinter","_case_285") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CType") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_284") [Var 3,Var 1]]),Branch (Pattern ("AbstractCurry","CTypeSyn") [9,10,11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAbstractCurryPrinter","_case_283") [Var 9,Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_283") 2 Private (TVar (-42)) (Rule [9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [13,14]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 14])]])),Func ("OracleAbstractCurryPrinter","_case_284") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8])]])),Func ("OracleAbstractCurryPrinter","_case_286") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CFunc") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("AbstractCurry","Public") [],Var 1]]),Branch (Pattern ("AbstractCurry","CmtFunc") [8,9,10,11,12,13]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","==") [Var 11,Comb ConsCall ("AbstractCurry","Public") [],Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_287") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CType") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","==") [Var 4,Comb ConsCall ("AbstractCurry","Public") [],Var 1]]),Branch (Pattern ("AbstractCurry","CTypeSyn") [7,8,9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","==") [Var 8,Comb ConsCall ("AbstractCurry","Public") [],Var 1]])]])),Func ("OracleAbstractCurryPrinter","_case_289") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("AbstractCurry","CurryProg") [3,4,5,6,7]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleAbstractCurryPrinter","showExports") [Var 5,Var 6,Var 1])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","_case_288") [Var 8,Comb FuncCall ("OraclePrelude","==") [Var 8,Comb ConsCall ("Prelude","[]") [],Var 9],Var 10],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showImports") [Var 4,Var 11],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showOpDecls") [Var 7,Var 12],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","showTypeDecls") [Var 5,Var 13],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleAbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAbstractCurryPrinter","showFuncDeclOpt") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAbstractCurryPrinter","nameFM") [Var 14],Var 6,Var 15],Var 3]]],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]],Var 16],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 17],Var 18],Var 19],Var 20],Var 21],Var 22],Var 23],Var 24]]))]))]])),Func ("OracleAbstractCurryPrinter","_case_288") 3 Private (TVar (-42)) (Rule [8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 8,Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 1],Var 10]]))]]))] []