Prog "OracleFlatCurryTools" ["CEventOracle","Oracle","IOExts","FlatCurryTools","Char","FlatCurry","List","Prelude","OracleChar","OracleFlatCurry","OracleList","OraclePrelude"] [] [Func ("OracleFlatCurryTools","showFlatProg") 2 Public (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_123") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatVisibility") 2 Private (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_120") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatFixity") 2 Private (FuncType (TCons ("FlatCurry","Fixity") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_119") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatOp") 2 Private (FuncType (TCons ("FlatCurry","OpDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_118") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatType") 2 Public (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_117") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatCons") 2 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_116") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatFunc") 2 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_115") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatRule") 2 Private (FuncType (TCons ("FlatCurry","Rule") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_114") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatTypeExpr") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_113") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatCombType") 2 Private (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_112") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatExpr") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_111") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatExpr.showFlatBinding.49") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_109") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatLit") 2 Private (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_108") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatBranch") 2 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_106") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatPattern") 2 Private (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_105") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showFlatList") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatListElems") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Var 4],Var 5]]))),Func ("OracleFlatCurryTools","showFlatListElems") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Var 2,Var 3,Var 1],Var 4],Var 5]]))),Func ("OracleFlatCurryTools","showCurryType") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_104") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleFlatCurryTools","showCurryType._#lambda2") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb FuncCall ("OracleFlatCurryTools","showCurryType") [Var 2,Comb ConsCall ("Prelude","True") [],Var 3,Var 1]]])),Func ("OracleFlatCurryTools","isFuncType") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_97") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showCurryExpr") 5 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_96") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFlatCurryTools","showCurryExpr._#lambda3") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_81") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleFlatCurryTools","showCurryVar") 2 Public (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 3]]))),Func ("OracleFlatCurryTools","showCurryId") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFlatCurryTools","_case_80") [Var 2,Comb FuncCall ("OracleChar","isAlpha") [Comb FuncCall ("OraclePrelude","head") [Var 2,Var 1],Var 3],Var 4]]))),Func ("OracleFlatCurryTools","showCurryLit") 2 Private (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_77") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showCurryCase") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_76") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleFlatCurryTools","showCurryCase.showPattern.153") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_74") [Var 2,Var 3,Var 1]])),Func ("OracleFlatCurryTools","showCurryFiniteList") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_68") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleFlatCurryTools","showCurryStringConstant") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_41") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showCharExpr") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_14") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","showCurryElems") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Var 2,Var 3,Var 1],Var 4],Var 5]]))),Func ("OracleFlatCurryTools","showBracketsIf") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_7") [Var 3,Var 2,Var 1]])),Func ("OracleFlatCurryTools","sceBlanks") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","take") [Var 2,Comb FuncCall ("OraclePrelude","repeat") [Lit (Charc ' '),Var 1],Var 3]]))),Func ("OracleFlatCurryTools","isFiniteList") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_6") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","isStringConstant") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_2") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","isCharConstant") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_1") [Var 2,Var 1]])),Func ("OracleFlatCurryTools","_case_1") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("FlatCurry","Lit") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_0") [Var 3,Var 1]]),Branch (Pattern ("FlatCurry","Var") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Comb") [8,9,10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Let") [11,12]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Free") [13,14]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Or") [15,16]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Case") [17,18,19]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleFlatCurryTools","_case_0") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("FlatCurry","Charc") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("FlatCurry","Intc") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Floatc") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleFlatCurryTools","_case_2") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("FlatCurry","Comb") [3,4,5]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 4,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 1],Comb FuncCall ("OraclePrelude","null") [Var 5,Var 17],Var 18],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 4,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []]],Var 19],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","length") [Var 5,Var 20],Lit (Intc 2),Var 21],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OracleFlatCurryTools","isCharConstant") [Comb FuncCall ("OraclePrelude","head") [Var 5,Var 22],Var 23],Comb FuncCall ("OracleFlatCurryTools","isStringConstant") [Comb FuncCall ("OraclePrelude","!!") [Var 5,Lit (Intc 1),Var 24],Var 25],Var 26],Var 27],Var 28],Var 29]])),Branch (Pattern ("FlatCurry","Var") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Lit") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Let") [8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Free") [10,11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Or") [12,13]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleFlatCurryTools","_case_6") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","_case_5") [Var 6,Var 7,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 7,Comb ConsCall ("Prelude","[]") [],Var 17],Var 18],Var 19]])),Branch (Pattern ("FlatCurry","Let") [8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Free") [10,11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Or") [12,13]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleFlatCurryTools","_case_5") 4 Private (TVar (-42)) (Rule [6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFlatCurryTools","_case_4") [Var 6,Var 7,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []]],Var 1],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","length") [Var 7,Var 9],Lit (Intc 2),Var 10],Var 11],Var 12]]))]])),Func ("OracleFlatCurryTools","_case_4") 4 Private (TVar (-42)) (Rule [6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","isFiniteList") [Comb FuncCall ("OraclePrelude","!!") [Var 7,Lit (Intc 1),Var 1],Var 9]])),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_3") [Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 10]]))]])),Func ("OracleFlatCurryTools","_case_3") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFlatCurryTools","_case_7") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb FuncCall ("OraclePrelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleFlatCurryTools","_case_14") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Lit") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_13") [Var 3,Var 1]])]])),Func ("OracleFlatCurryTools","_case_13") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlatCurry","Charc") [4]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OraclePrelude","ord") [Var 4,Var 1])] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_12") [Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Lit (Charc '"'),Var 6],Var 7]]))]))]])),Func ("OracleFlatCurryTools","_case_12") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_11") [Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Lit (Charc '\''),Var 1],Var 7]]))]])),Func ("OracleFlatCurryTools","_case_11") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_10") [Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Lit (Charc '\n'),Var 1],Var 7]]))]])),Func ("OracleFlatCurryTools","_case_10") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","_case_9") [Var 4,Var 5,Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","<") [Var 5,Lit (Intc 32),Var 1],Comb FuncCall ("OraclePrelude",">") [Var 5,Lit (Intc 126),Var 7],Var 8],Var 9]]))]])),Func ("OracleFlatCurryTools","_case_9") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","chr") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","div") [Var 5,Lit (Intc 100),Var 1],Lit (Intc 48),Var 7],Var 8],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","chr") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","div") [Comb FuncCall ("OraclePrelude","mod") [Var 5,Lit (Intc 100),Var 9],Lit (Intc 10),Var 10],Lit (Intc 48),Var 11],Var 12],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","chr") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","mod") [Var 5,Lit (Intc 10),Var 13],Lit (Intc 48),Var 14],Var 15],Comb ConsCall ("Prelude","[]") []]]]]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_8") [Var 4,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 16]]))]])),Func ("OracleFlatCurryTools","_case_8") 3 Private (TVar (-42)) (Rule [4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFlatCurryTools","_case_41") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Comb") [3,4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_40") [Var 5,Var 4,Var 1]])]])),Func ("OracleFlatCurryTools","_case_40") 3 Private (TVar (-42)) (Rule [5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_39") [Var 5,Var 7,Var 6,Var 1]])]])),Func ("OracleFlatCurryTools","_case_39") 4 Private (TVar (-42)) (Rule [5,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_38") [Var 5,Var 7,Var 9,Var 8,Var 1]])]])),Func ("OracleFlatCurryTools","_case_38") 5 Private (TVar (-42)) (Rule [5,7,9,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (LPattern (Charc 'p')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_37") [Var 5,Var 7,Var 9,Var 1]])]])),Func ("OracleFlatCurryTools","_case_37") 4 Private (TVar (-42)) (Rule [5,7,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_36") [Var 5,Var 7,Var 11,Var 10,Var 1]])]])),Func ("OracleFlatCurryTools","_case_36") 5 Private (TVar (-42)) (Rule [5,7,11,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_35") [Var 5,Var 7,Var 11,Var 1]])]])),Func ("OracleFlatCurryTools","_case_35") 4 Private (TVar (-42)) (Rule [5,7,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_34") [Var 5,Var 7,Var 13,Var 12,Var 1]])]])),Func ("OracleFlatCurryTools","_case_34") 5 Private (TVar (-42)) (Rule [5,7,13,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_33") [Var 5,Var 7,Var 13,Var 1]])]])),Func ("OracleFlatCurryTools","_case_33") 4 Private (TVar (-42)) (Rule [5,7,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_32") [Var 5,Var 7,Var 15,Var 14,Var 1]])]])),Func ("OracleFlatCurryTools","_case_32") 5 Private (TVar (-42)) (Rule [5,7,15,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (LPattern (Charc 'l')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_31") [Var 5,Var 7,Var 15,Var 1]])]])),Func ("OracleFlatCurryTools","_case_31") 4 Private (TVar (-42)) (Rule [5,7,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_30") [Var 5,Var 7,Var 17,Var 16,Var 1]])]])),Func ("OracleFlatCurryTools","_case_30") 5 Private (TVar (-42)) (Rule [5,7,17,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 16) [Branch (LPattern (Charc 'u')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_29") [Var 5,Var 7,Var 17,Var 1]])]])),Func ("OracleFlatCurryTools","_case_29") 4 Private (TVar (-42)) (Rule [5,7,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_28") [Var 5,Var 7,Var 19,Var 18,Var 1]])]])),Func ("OracleFlatCurryTools","_case_28") 5 Private (TVar (-42)) (Rule [5,7,19,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 18) [Branch (LPattern (Charc 'd')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_27") [Var 5,Var 7,Var 19,Var 1]])]])),Func ("OracleFlatCurryTools","_case_27") 4 Private (TVar (-42)) (Rule [5,7,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_26") [Var 5,Var 7,Var 21,Var 20,Var 1]])]])),Func ("OracleFlatCurryTools","_case_26") 5 Private (TVar (-42)) (Rule [5,7,21,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 20) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_25") [Var 5,Var 7,Var 21,Var 1]])]])),Func ("OracleFlatCurryTools","_case_25") 4 Private (TVar (-42)) (Rule [5,7,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_24") [Var 5,Var 7,Var 1]])]])),Func ("OracleFlatCurryTools","_case_24") 3 Private (TVar (-42)) (Rule [5,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude",":") [22,23]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_23") [Var 5,Var 23,Var 22,Var 1]])]])),Func ("OracleFlatCurryTools","_case_23") 4 Private (TVar (-42)) (Rule [5,23,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (LPattern (Charc '[')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_22") [Var 5,Var 23,Var 1]]),Branch (LPattern (Charc ':')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_18") [Var 5,Var 23,Var 1]])]])),Func ("OracleFlatCurryTools","_case_18") 3 Private (TVar (-42)) (Rule [5,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_17") [Var 5,Var 1]])]])),Func ("OracleFlatCurryTools","_case_17") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [26,27]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_16") [Var 26,Var 27,Var 1]])]])),Func ("OracleFlatCurryTools","_case_16") 3 Private (TVar (-42)) (Rule [26,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_15") [Var 26,Var 28,Var 29,Var 1]])]])),Func ("OracleFlatCurryTools","_case_15") 4 Private (TVar (-42)) (Rule [26,28,29,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 29) [Branch (Pattern ("Prelude","[]") []) (Let [(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCharExpr") [Var 26,Var 1],Comb FuncCall ("OracleFlatCurryTools","showCurryStringConstant") [Var 28,Var 30],Var 31]]))]])),Func ("OracleFlatCurryTools","_case_22") 3 Private (TVar (-42)) (Rule [5,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_21") [Var 5,Var 25,Var 24,Var 1]])]])),Func ("OracleFlatCurryTools","_case_21") 4 Private (TVar (-42)) (Rule [5,25,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 24) [Branch (LPattern (Charc ']')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_20") [Var 5,Var 25,Var 1]])]])),Func ("OracleFlatCurryTools","_case_20") 3 Private (TVar (-42)) (Rule [5,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_19") [Var 5,Var 1]])]])),Func ("OracleFlatCurryTools","_case_19") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleFlatCurryTools","_case_68") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_67") [Var 2,Var 3,Var 7,Var 6,Var 1]])]])),Func ("OracleFlatCurryTools","_case_67") 5 Private (TVar (-42)) (Rule [2,3,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_66") [Var 2,Var 3,Var 7,Var 9,Var 8,Var 1]])]])),Func ("OracleFlatCurryTools","_case_66") 6 Private (TVar (-42)) (Rule [2,3,7,9,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_65") [Var 2,Var 3,Var 7,Var 9,Var 11,Var 10,Var 1]])]])),Func ("OracleFlatCurryTools","_case_65") 7 Private (TVar (-42)) (Rule [2,3,7,9,11,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (LPattern (Charc 'p')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_64") [Var 2,Var 3,Var 7,Var 9,Var 11,Var 1]])]])),Func ("OracleFlatCurryTools","_case_64") 6 Private (TVar (-42)) (Rule [2,3,7,9,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_63") [Var 2,Var 3,Var 7,Var 9,Var 13,Var 12,Var 1]])]])),Func ("OracleFlatCurryTools","_case_63") 7 Private (TVar (-42)) (Rule [2,3,7,9,13,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (LPattern (Charc 'r')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_62") [Var 2,Var 3,Var 7,Var 9,Var 13,Var 1]])]])),Func ("OracleFlatCurryTools","_case_62") 6 Private (TVar (-42)) (Rule [2,3,7,9,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_61") [Var 2,Var 3,Var 7,Var 9,Var 15,Var 14,Var 1]])]])),Func ("OracleFlatCurryTools","_case_61") 7 Private (TVar (-42)) (Rule [2,3,7,9,15,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_60") [Var 2,Var 3,Var 7,Var 9,Var 15,Var 1]])]])),Func ("OracleFlatCurryTools","_case_60") 6 Private (TVar (-42)) (Rule [2,3,7,9,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_59") [Var 2,Var 3,Var 7,Var 9,Var 17,Var 16,Var 1]])]])),Func ("OracleFlatCurryTools","_case_59") 7 Private (TVar (-42)) (Rule [2,3,7,9,17,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 16) [Branch (LPattern (Charc 'l')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_58") [Var 2,Var 3,Var 7,Var 9,Var 17,Var 1]])]])),Func ("OracleFlatCurryTools","_case_58") 6 Private (TVar (-42)) (Rule [2,3,7,9,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_57") [Var 2,Var 3,Var 7,Var 9,Var 19,Var 18,Var 1]])]])),Func ("OracleFlatCurryTools","_case_57") 7 Private (TVar (-42)) (Rule [2,3,7,9,19,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 18) [Branch (LPattern (Charc 'u')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_56") [Var 2,Var 3,Var 7,Var 9,Var 19,Var 1]])]])),Func ("OracleFlatCurryTools","_case_56") 6 Private (TVar (-42)) (Rule [2,3,7,9,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_55") [Var 2,Var 3,Var 7,Var 9,Var 21,Var 20,Var 1]])]])),Func ("OracleFlatCurryTools","_case_55") 7 Private (TVar (-42)) (Rule [2,3,7,9,21,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 20) [Branch (LPattern (Charc 'd')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_54") [Var 2,Var 3,Var 7,Var 9,Var 21,Var 1]])]])),Func ("OracleFlatCurryTools","_case_54") 6 Private (TVar (-42)) (Rule [2,3,7,9,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_53") [Var 2,Var 3,Var 7,Var 9,Var 23,Var 22,Var 1]])]])),Func ("OracleFlatCurryTools","_case_53") 7 Private (TVar (-42)) (Rule [2,3,7,9,23,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 22) [Branch (LPattern (Charc 'e')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_52") [Var 2,Var 3,Var 7,Var 9,Var 23,Var 1]])]])),Func ("OracleFlatCurryTools","_case_52") 6 Private (TVar (-42)) (Rule [2,3,7,9,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_51") [Var 2,Var 3,Var 7,Var 9,Var 1]])]])),Func ("OracleFlatCurryTools","_case_51") 5 Private (TVar (-42)) (Rule [2,3,7,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("Prelude",":") [24,25]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_50") [Var 2,Var 3,Var 7,Var 25,Var 24,Var 1]])]])),Func ("OracleFlatCurryTools","_case_50") 6 Private (TVar (-42)) (Rule [2,3,7,25,24,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 24) [Branch (LPattern (Charc '[')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_49") [Var 7,Var 25,Var 1]]),Branch (LPattern (Charc ':')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_45") [Var 2,Var 3,Var 7,Var 25,Var 1]])]])),Func ("OracleFlatCurryTools","_case_45") 5 Private (TVar (-42)) (Rule [2,3,7,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_44") [Var 2,Var 3,Var 7,Var 1]])]])),Func ("OracleFlatCurryTools","_case_44") 4 Private (TVar (-42)) (Rule [2,3,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude",":") [28,29]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_43") [Var 2,Var 3,Var 28,Var 29,Var 1]])]])),Func ("OracleFlatCurryTools","_case_43") 5 Private (TVar (-42)) (Rule [2,3,28,29,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_42") [Var 2,Var 3,Var 28,Var 30,Var 31,Var 1]])]])),Func ("OracleFlatCurryTools","_case_42") 6 Private (TVar (-42)) (Rule [2,3,28,30,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 31) [Branch (Pattern ("Prelude","[]") []) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Var 3,Var 28,Var 1],Comb FuncCall ("OracleFlatCurryTools","showCurryFiniteList") [Var 2,Var 3,Var 30,Var 32]]]))]])),Func ("OracleFlatCurryTools","_case_49") 3 Private (TVar (-42)) (Rule [7,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_48") [Var 7,Var 27,Var 26,Var 1]])]])),Func ("OracleFlatCurryTools","_case_48") 4 Private (TVar (-42)) (Rule [7,27,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 26) [Branch (LPattern (Charc ']')) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_47") [Var 7,Var 27,Var 1]])]])),Func ("OracleFlatCurryTools","_case_47") 3 Private (TVar (-42)) (Rule [7,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_46") [Var 7,Var 1]])]])),Func ("OracleFlatCurryTools","_case_46") 2 Private (TVar (-42)) (Rule [7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleFlatCurryTools","_case_74") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_73") [Var 2,Var 4,Var 5,Var 1]])]])),Func ("OracleFlatCurryTools","_case_73") 4 Private (TVar (-42)) (Rule [2,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 4,Var 1],Var 8],Var 9]])),Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_72") [Var 2,Var 4,Var 6,Var 7,Var 1]])]])),Func ("OracleFlatCurryTools","_case_72") 5 Private (TVar (-42)) (Rule [2,4,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFlatCurryTools","_case_71") [Var 2,Var 4,Var 6,Comb FuncCall ("OracleChar","isAlpha") [Comb FuncCall ("OraclePrelude","head") [Var 2,Var 1],Var 10],Var 11]])),Branch (Pattern ("Prelude",":") [8,9]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFlatCurryTools","_case_69") [Var 2,Var 4,Var 6,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","take") [Lit (Intc 2),Var 2,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []]],Var 12],Var 13]]))]])),Func ("OracleFlatCurryTools","_case_69") 7 Private (TVar (-42)) (Rule [2,4,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryVar") []],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 8,Var 9]]],Var 1],Var 11],Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 13],Var 14]])),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryElems") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryVar") []],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 8,Var 9]]],Var 1],Var 15],Var 16]]))]])),Func ("OracleFlatCurryTools","_case_71") 5 Private (TVar (-42)) (Rule [2,4,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 6,Var 8],Var 9],Var 10],Var 11],Var 12]])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_70") [Var 2,Var 4,Var 6,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]],Var 1],Var 13]]))]])),Func ("OracleFlatCurryTools","_case_70") 5 Private (TVar (-42)) (Rule [2,4,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 6,Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 9],Var 10],Var 11],Var 12]])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 2,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 6,Var 13],Var 14],Var 15],Var 16],Var 17]]))]])),Func ("OracleFlatCurryTools","_case_76") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FlatCurry","Branch") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_75") [Var 2,Var 3,Var 6,Var 5,Var 1]])]])),Func ("OracleFlatCurryTools","_case_75") 5 Private (TVar (-42)) (Rule [2,3,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FlatCurry","Pattern") [7,8]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryCase.showPattern.153") [Comb FuncCall ("Oracle","apply") [Var 2,Var 7,Var 10],Var 8,Var 11],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Var 3,Var 6,Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 13],Var 14],Var 15],Var 16]])),Branch (Pattern ("FlatCurry","LPattern") [9]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryLit") [Var 9,Var 17],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Var 3,Var 6,Var 18],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Var 19],Var 20],Var 21],Var 22],Var 23]]))]])),Func ("OracleFlatCurryTools","_case_77") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Intc") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1]]),Branch (Pattern ("FlatCurry","Floatc") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","show") [Var 4,Var 1]]),Branch (Pattern ("FlatCurry","Charc") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","show") [Var 5,Var 1]])]])),Func ("OracleFlatCurryTools","_case_80") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_79") [Var 2,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 1],Var 4]]))]])),Func ("OracleFlatCurryTools","_case_79") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_78") [Var 2,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 4]]))]])),Func ("OracleFlatCurryTools","_case_78") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFlatCurryTools","_case_81") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 3,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","+") [Var 2,Lit (Intc 4),Var 7],Var 6,Var 8],Var 9],Var 10]]))]])),Func ("OracleFlatCurryTools","_case_96") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FlatCurry","Var") [6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","showCurryVar") [Var 6,Var 1]]),Branch (Pattern ("FlatCurry","Lit") [7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","showCurryLit") [Var 7,Var 1]]),Branch (Pattern ("FlatCurry","Comb") [8,9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_95") [Var 2,Var 3,Var 4,Var 8,Var 9,Var 10,Var 1]]),Branch (Pattern ("FlatCurry","Let") [17,18]) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 4,Var 28],Var 29],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryExpr._#lambda3") [Var 4,Var 2]],Var 17,Var 30],Var 31],Var 32],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 4,Var 33],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Var 34],Var 35],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","+") [Var 4,Lit (Intc 4),Var 36],Var 18,Var 37],Var 38],Var 39],Var 40],Var 41],Var 42],Var 43]])),Branch (Pattern ("FlatCurry","Free") [19,20]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_83") [Var 2,Var 3,Var 4,Var 20,Var 19,Var 1]]),Branch (Pattern ("FlatCurry","Or") [23,24]) (Let [(44,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(45,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(46,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(47,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 44,Comb ConsCall ("Prelude",":") [Var 45,Comb ConsCall ("Prelude",":") [Var 46,Comb ConsCall ("Prelude",":") [Var 47,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 23,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 24,Var 44],Var 45],Var 46],Var 47]])),Branch (Pattern ("FlatCurry","Case") [25,26,27]) (Let [(48,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(49,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(50,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(51,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(52,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(53,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(54,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(55,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(56,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(57,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 48,Comb ConsCall ("Prelude",":") [Var 49,Comb ConsCall ("Prelude",":") [Var 50,Comb ConsCall ("Prelude",":") [Var 51,Comb ConsCall ("Prelude",":") [Var 52,Comb ConsCall ("Prelude",":") [Var 53,Comb ConsCall ("Prelude",":") [Var 54,Comb ConsCall ("Prelude",":") [Var 55,Comb ConsCall ("Prelude",":") [Var 56,Comb ConsCall ("Prelude",":") [Var 57,Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","_case_82") [Var 25,Comb FuncCall ("OraclePrelude","==") [Var 25,Comb ConsCall ("FlatCurry","Rigid") [],Var 1],Var 48],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 26,Var 49],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryElems") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryCase") [Var 2,Comb FuncCall ("OraclePrelude","+") [Var 4,Lit (Intc 2),Var 50]]],Var 27,Var 51],Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 4,Var 52],Var 53],Var 54],Var 55],Var 56],Var 57]]))]])),Func ("OracleFlatCurryTools","_case_82") 3 Private (TVar (-42)) (Rule [25,26,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 26) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]])]])),Func ("OracleFlatCurryTools","_case_83") 6 Private (TVar (-42)) (Rule [2,3,4,20,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Var 3,Var 4,Var 20,Var 1]]),Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryVar") []],Comb ConsCall ("Prelude",":") [Var 21,Var 22],Var 1],Var 23],Var 24],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Var 4,Var 20,Var 25],Var 26],Var 27],Var 28],Var 29]]))]])),Func ("OracleFlatCurryTools","_case_95") 7 Private (TVar (-42)) (Rule [2,3,4,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("Prelude","[]") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryId") [Comb FuncCall ("Oracle","apply") [Var 2,Var 9,Var 1],Var 13]])),Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_94") [Var 2,Var 3,Var 4,Var 8,Var 9,Var 11,Var 12,Var 1]])]])),Func ("OracleFlatCurryTools","_case_94") 8 Private (TVar (-42)) (Rule [2,3,4,8,9,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryId") [Comb FuncCall ("Oracle","apply") [Var 2,Var 9,Var 1],Var 15],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 11,Var 16],Var 17],Var 18],Var 19]])),Branch (Pattern ("Prelude",":") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_93") [Var 2,Var 3,Var 4,Var 8,Var 9,Var 11,Var 13,Var 14,Var 1]])]])),Func ("OracleFlatCurryTools","_case_93") 9 Private (TVar (-42)) (Rule [2,3,4,8,9,11,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_92") [Var 2,Var 3,Var 4,Var 8,Var 9,Var 11,Var 13,Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 1],Var 17]])),Branch (Pattern ("Prelude",":") [15,16]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","_case_86") [Var 2,Var 3,Var 4,Var 9,Var 11,Var 13,Var 15,Var 16,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Var 16,Comb ConsCall ("Prelude","[]") [],Var 18],Var 19],Var 20]]))]])),Func ("OracleFlatCurryTools","_case_86") 10 Private (TVar (-42)) (Rule [2,3,4,9,11,13,15,16,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 4,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","+") [Var 4,Lit (Intc 2),Var 18],Var 11,Var 19],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 4,Var 20],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","+") [Var 4,Lit (Intc 2),Var 21],Var 13,Var 22],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","sceBlanks") [Var 4,Var 23],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","+") [Var 4,Lit (Intc 2),Var 24],Var 15,Var 25],Var 26],Var 27],Var 28],Var 29],Var 30],Var 31],Var 32],Var 33],Var 34],Var 35],Var 36],Var 37]])),Branch (Pattern ("Prelude","False") []) (Let [(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","_case_85") [Var 2,Var 3,Var 4,Var 9,Var 11,Var 13,Var 15,Var 16,Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","take") [Lit (Intc 2),Comb FuncCall ("OraclePrelude","snd") [Var 9,Var 1],Var 38],Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []]],Var 39],Var 40]]))]])),Func ("OracleFlatCurryTools","_case_85") 10 Private (TVar (-42)) (Rule [2,3,4,9,11,13,15,16,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Var 4]],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 15,Var 16]]],Var 1],Var 18],Var 19],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 20],Var 21]])),Branch (Pattern ("Prelude","False") []) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_84") [Var 2,Var 3,Var 4,Var 9,Var 11,Var 13,Var 15,Var 16,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 22]]))]])),Func ("OracleFlatCurryTools","_case_84") 10 Private (TVar (-42)) (Rule [2,3,4,9,11,13,15,16,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryId") [Comb FuncCall ("Oracle","apply") [Var 2,Var 9,Var 1],Var 18],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryElems") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4]],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 15,Var 16]]],Var 19],Var 20],Var 21],Var 22]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFlatCurryTools","_case_92") 9 Private (TVar (-42)) (Rule [2,3,4,8,9,11,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 11,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 13,Var 15],Var 16],Var 17],Var 18]])),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","_case_91") [Var 2,Var 3,Var 4,Var 8,Var 9,Var 11,Var 13,Comb FuncCall ("OracleChar","isAlpha") [Comb FuncCall ("OraclePrelude","head") [Comb FuncCall ("OraclePrelude","snd") [Var 9,Var 1],Var 19],Var 20],Var 21]]))]])),Func ("OracleFlatCurryTools","_case_91") 9 Private (TVar (-42)) (Rule [2,3,4,8,9,11,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Var 2,Var 9,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryElems") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4]],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Var 15],Var 16],Var 17],Var 18]])),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_90") [Var 2,Var 3,Var 4,Var 8,Var 9,Var 11,Var 13,Comb FuncCall ("OracleFlatCurryTools","isFiniteList") [Comb ConsCall ("FlatCurry","Comb") [Var 8,Var 9,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]],Var 1],Var 19]]))]])),Func ("OracleFlatCurryTools","_case_90") 9 Private (TVar (-42)) (Rule [2,3,4,8,9,11,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_89") [Var 2,Var 4,Var 8,Var 9,Var 11,Var 13,Comb FuncCall ("OracleFlatCurryTools","isStringConstant") [Comb ConsCall ("FlatCurry","Comb") [Var 8,Var 9,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]],Var 1],Var 15]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFlatCurryTools","_case_88") [Var 2,Var 3,Var 4,Var 9,Var 11,Var 13,Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","snd") [Var 9,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]],Var 16],Var 17]]))]])),Func ("OracleFlatCurryTools","_case_88") 8 Private (TVar (-42)) (Rule [2,3,4,9,11,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Var 4,Var 11,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","False") [],Var 4,Var 13,Var 15],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 16],Var 17],Var 18],Var 19]])),Branch (Pattern ("Prelude","False") []) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_87") [Var 2,Var 3,Var 4,Var 9,Var 11,Var 13,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 20]]))]])),Func ("OracleFlatCurryTools","_case_87") 8 Private (TVar (-42)) (Rule [2,3,4,9,11,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 11,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Var 2,Var 9,Var 15],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryExpr") [Var 2,Comb ConsCall ("Prelude","True") [],Var 4,Var 13,Var 16],Var 17],Var 18],Var 19],Var 20],Var 21]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFlatCurryTools","_case_89") 8 Private (TVar (-42)) (Rule [2,4,8,9,11,13,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryStringConstant") [Comb ConsCall ("FlatCurry","Comb") [Var 8,Var 9,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []],Var 15],Var 16]])),Branch (Pattern ("Prelude","False") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","showCurryFiniteList") [Var 2,Var 4,Comb ConsCall ("FlatCurry","Comb") [Var 8,Var 9,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]],Var 1],Var 17],Var 18],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []],Var 19],Var 20]]))]])),Func ("OracleFlatCurryTools","_case_97") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","TVar") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("FlatCurry","FuncType") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("FlatCurry","TCons") [6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleFlatCurryTools","_case_104") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FlatCurry","TVar") [5]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_103") [Var 5,Comb FuncCall ("OraclePrelude","<") [Var 5,Lit (Intc 5),Var 1],Var 10]])),Branch (Pattern ("FlatCurry","FuncType") [6,7]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryType") [Var 2,Comb FuncCall ("OracleFlatCurryTools","isFuncType") [Var 6,Var 1],Var 6,Var 11],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFlatCurryTools","showCurryType") [Var 2,Comb ConsCall ("Prelude","False") [],Var 7,Var 12],Var 13],Var 14],Var 15]])),Branch (Pattern ("FlatCurry","TCons") [8,9]) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_102") [Var 2,Var 3,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 9,Comb ConsCall ("Prelude","[]") [],Var 1],Var 16]]))]])),Func ("OracleFlatCurryTools","_case_102") 6 Private (TVar (-42)) (Rule [2,3,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","apply") [Var 2,Var 8,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFlatCurryTools","_case_101") [Var 2,Var 3,Var 8,Var 9,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 8,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 1],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","head") [Var 9,Var 11],Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []],Var 12],Var 13],Var 14]]))]])),Func ("OracleFlatCurryTools","_case_101") 6 Private (TVar (-42)) (Rule [2,3,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_100") [Var 2,Var 3,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 8,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 1],Var 11]]))]])),Func ("OracleFlatCurryTools","_case_100") 6 Private (TVar (-42)) (Rule [2,3,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showCurryType") [Var 2,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("OraclePrelude","head") [Var 9,Var 1],Var 11],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []],Var 12],Var 13]])),Branch (Pattern ("Prelude","False") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFlatCurryTools","_case_99") [Var 2,Var 3,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","take") [Lit (Intc 2),Comb FuncCall ("OraclePrelude","snd") [Var 8,Var 1],Var 14],Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []]],Var 15],Var 16]]))]])),Func ("OracleFlatCurryTools","_case_99") 6 Private (TVar (-42)) (Rule [2,3,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","concat") [Comb FuncCall ("OracleList","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryType") [Var 2,Comb ConsCall ("Prelude","False") []]],Var 9,Var 1],Var 11],Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 13],Var 14]])),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFlatCurryTools","_case_98") [Var 2,Var 3,Var 8,Var 9,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 15]]))]])),Func ("OracleFlatCurryTools","_case_98") 6 Private (TVar (-42)) (Rule [2,3,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFlatCurryTools","showBracketsIf") [Var 3,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("Oracle","apply") [Var 2,Var 8,Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showCurryType._#lambda2") [Var 2]],Var 11],Var 9,Var 12],Var 13],Var 14]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFlatCurryTools","_case_103") 3 Private (TVar (-42)) (Rule [5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","chr") [Comb FuncCall ("OraclePrelude","+") [Lit (Intc 97),Var 5,Var 1],Var 7],Comb ConsCall ("Prelude","[]") []]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb FuncCall ("OraclePrelude","show") [Var 5,Var 1]]])]])),Func ("OracleFlatCurryTools","_case_105") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Pattern") [3,4]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","show") []],Var 4,Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 7],Var 8],Var 9]])),Branch (Pattern ("FlatCurry","LPattern") [5]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatLit") [Var 5,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 10],Var 11]]))]])),Func ("OracleFlatCurryTools","_case_106") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Branch") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatPattern") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 4,Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7],Var 8]]))]])),Func ("OracleFlatCurryTools","_case_108") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Intc") [3]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7]])),Branch (Pattern ("FlatCurry","Floatc") [4]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 4,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 8],Var 9]])),Branch (Pattern ("FlatCurry","Charc") [5]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleFlatCurryTools","_case_107") [Var 5,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude",">=") [Comb FuncCall ("OraclePrelude","ord") [Var 5,Var 1],Lit (Intc 32),Var 10],Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","ord") [Var 5,Var 11],Lit (Intc 127),Var 12],Var 13],Var 14]]))]])),Func ("OracleFlatCurryTools","_case_107") 3 Private (TVar (-42)) (Rule [5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]],Var 1],Var 7]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Comb FuncCall ("OraclePrelude","ord") [Var 5,Var 1],Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]],Var 9],Var 10]]))]])),Func ("OracleFlatCurryTools","_case_109") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 4,Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7],Var 8],Var 9]]))]])),Func ("OracleFlatCurryTools","_case_111") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 17],Var 18]])),Branch (Pattern ("FlatCurry","Lit") [4]) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatLit") [Var 4,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 19],Var 20]])),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatCombType") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 6,Var 21],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatExpr") []],Var 7,Var 22],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 23],Var 24],Var 25],Var 26],Var 27]])),Branch (Pattern ("FlatCurry","Let") [8,9]) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatExpr.showFlatBinding.49") []],Var 8,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 9,Var 28],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 29],Var 30],Var 31]])),Branch (Pattern ("FlatCurry","Free") [10,11]) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","show") []],Var 10,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 11,Var 32],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 33],Var 34],Var 35]])),Branch (Pattern ("FlatCurry","Or") [12,13]) (Let [(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 12,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 13,Var 36],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 37],Var 38],Var 39],Var 40]])),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlatCurryTools","_case_110") [Var 15,Var 16,Var 14,Var 1]])]])),Func ("OracleFlatCurryTools","_case_110") 4 Private (TVar (-42)) (Rule [15,16,14,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 14) [Branch (Pattern ("FlatCurry","Rigid") []) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 15,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatBranch") []],Var 16,Var 17],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 18],Var 19],Var 20]])),Branch (Pattern ("FlatCurry","Flex") []) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 15,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatBranch") []],Var 16,Var 21],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 22],Var 23],Var 24]]))]])),Func ("OracleFlatCurryTools","_case_112") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","FuncCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("FlatCurry","ConsCall") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("FlatCurry","FuncPartCall") [3]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 5],Var 6]])),Branch (Pattern ("FlatCurry","ConsPartCall") [4]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 4,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 7],Var 8]]))]])),Func ("OracleFlatCurryTools","_case_113") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","FuncType") [3,4]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatTypeExpr") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatTypeExpr") [Var 4,Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 9],Var 10],Var 11],Var 12]])),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatTypeExpr") []],Var 6,Var 13],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 14],Var 15],Var 16]])),Branch (Pattern ("FlatCurry","TVar") [7]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 7,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 17],Var 18]]))]])),Func ("OracleFlatCurryTools","_case_114") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Rule") [3,4]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","show") []],Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatExpr") [Var 4,Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 7],Var 8],Var 9]])),Branch (Pattern ("FlatCurry","External") [5]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 5,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 10],Var 11]]))]])),Func ("OracleFlatCurryTools","_case_115") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 4,Var 8],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatVisibility") [Var 5,Var 9],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatTypeExpr") [Var 6,Var 10],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatRule") [Var 7,Var 11],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 12],Var 13],Var 14],Var 15],Var 16],Var 17],Var 18],Var 19],Var 20],Var 21]]))]])),Func ("OracleFlatCurryTools","_case_116") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 4,Var 7],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatVisibility") [Var 5,Var 8],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatTypeExpr") []],Var 6,Var 9],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 10],Var 11],Var 12],Var 13],Var 14],Var 15]]))]])),Func ("OracleFlatCurryTools","_case_117") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatVisibility") [Var 4,Var 11],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","show") []],Var 5,Var 12],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatCons") []],Var 6,Var 13],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 14],Var 15],Var 16],Var 17],Var 18]])),Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 7,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatVisibility") [Var 8,Var 19],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","show") []],Var 9,Var 20],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatTypeExpr") [Var 10,Var 21],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 22],Var 23],Var 24],Var 25],Var 26]]))]])),Func ("OracleFlatCurryTools","_case_118") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Op") [3,4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatFixity") [Var 4,Var 6],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 5,Var 7],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []],Var 8],Var 9],Var 10],Var 11]]))]])),Func ("OracleFlatCurryTools","_case_119") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","InfixOp") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("FlatCurry","InfixlOp") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]),Branch (Pattern ("FlatCurry","InfixrOp") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]])]])),Func ("OracleFlatCurryTools","_case_120") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Public") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("FlatCurry","Private") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])]])),Func ("OracleFlatCurryTools","_case_123") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","_case_122") [Var 4,Comb FuncCall ("OraclePrelude","==") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 8],Var 9],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","_case_121") [Var 5,Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude","[]") [],Var 10],Var 11],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatListElems") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatFunc") []],Var 6,Var 12],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatList") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatOp") []],Var 7,Var 13],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]],Var 14],Var 15],Var 16],Var 17],Var 18],Var 19],Var 20],Var 21],Var 22]]))]])),Func ("OracleFlatCurryTools","_case_121") 3 Private (TVar (-42)) (Rule [5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatListElems") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlatCurryTools","showFlatType") []],Var 5,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]],Var 7],Var 8]]))]])),Func ("OracleFlatCurryTools","_case_122") 3 Private (TVar (-42)) (Rule [4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleFlatCurryTools","showFlatListElems") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","show") []],Var 4,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []],Var 6],Var 7]]))]]))] []