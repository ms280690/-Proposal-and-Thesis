Prog "OracleStyledText" ["CEventOracle","Oracle","IOExts","StyledText","AnsiCodes","Prelude","Pretty","Char","OracleAnsiCodes","OraclePrelude","OraclePretty","OracleChar"] [] [Func ("OracleStyledText","boldChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 5),Var 1]])),Func ("OracleStyledText","underlineChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 6),Var 1]])),Func ("OracleStyledText","endChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 7),Var 1]])),Func ("OracleStyledText","blackChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 16),Var 1]])),Func ("OracleStyledText","blueChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 17),Var 1]])),Func ("OracleStyledText","cyanChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 18),Var 1]])),Func ("OracleStyledText","greenChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 19),Var 1]])),Func ("OracleStyledText","magentaChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 20),Var 1]])),Func ("OracleStyledText","redChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 21),Var 1]])),Func ("OracleStyledText","whiteChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 22),Var 1]])),Func ("OracleStyledText","yellowChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 23),Var 1]])),Func ("OracleStyledText","bgBlackChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 24),Var 1]])),Func ("OracleStyledText","bgBlueChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 25),Var 1]])),Func ("OracleStyledText","bgCyanChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 26),Var 1]])),Func ("OracleStyledText","bgGreenChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 27),Var 1]])),Func ("OracleStyledText","bgMagentaChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 28),Var 1]])),Func ("OracleStyledText","bgRedChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 29),Var 1]])),Func ("OracleStyledText","bgWhiteChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 30),Var 1]])),Func ("OracleStyledText","bgYellowChar") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 31),Var 1]])),Func ("OracleStyledText","bold") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","boldChar") [Var 1]]]])),Func ("OracleStyledText","underline") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","underlineChar") [Var 1]]]])),Func ("OracleStyledText","black") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","blackChar") [Var 1]]]])),Func ("OracleStyledText","blue") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","blueChar") [Var 1]]]])),Func ("OracleStyledText","cyan") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","cyanChar") [Var 1]]]])),Func ("OracleStyledText","green") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","greenChar") [Var 1]]]])),Func ("OracleStyledText","magenta") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","magentaChar") [Var 1]]]])),Func ("OracleStyledText","red") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","redChar") [Var 1]]]])),Func ("OracleStyledText","white") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","whiteChar") [Var 1]]]])),Func ("OracleStyledText","yellow") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","yellowChar") [Var 1]]]])),Func ("OracleStyledText","bgBlack") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgBlackChar") [Var 1]]]])),Func ("OracleStyledText","bgBlue") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgBlueChar") [Var 1]]]])),Func ("OracleStyledText","bgCyan") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgCyanChar") [Var 1]]]])),Func ("OracleStyledText","bgGreen") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgGreenChar") [Var 1]]]])),Func ("OracleStyledText","bgMagenta") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgMagentaChar") [Var 1]]]])),Func ("OracleStyledText","bgRed") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgRedChar") [Var 1]]]])),Func ("OracleStyledText","bgWhite") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgWhiteChar") [Var 1]]]])),Func ("OracleStyledText","bgYellow") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","encl") [Comb FuncCall ("OracleStyledText","bgYellowChar") [Var 1]]]])),Func ("OracleStyledText","encl") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("OraclePrelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleStyledText","endChar") [Var 1],Comb ConsCall ("Prelude","[]") []],Var 4]]]))),Func ("OracleStyledText","boldS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","boldChar") [Var 1]]]])),Func ("OracleStyledText","underlineS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","underlineChar") [Var 1]]]])),Func ("OracleStyledText","blackS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","blackChar") [Var 1]]]])),Func ("OracleStyledText","blueS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","blueChar") [Var 1]]]])),Func ("OracleStyledText","cyanS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","cyanChar") [Var 1]]]])),Func ("OracleStyledText","greenS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","greenChar") [Var 1]]]])),Func ("OracleStyledText","magentaS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","magentaChar") [Var 1]]]])),Func ("OracleStyledText","redS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","redChar") [Var 1]]]])),Func ("OracleStyledText","whiteS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","whiteChar") [Var 1]]]])),Func ("OracleStyledText","yellowS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","yellowChar") [Var 1]]]])),Func ("OracleStyledText","bgBlackS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgBlackChar") [Var 1]]]])),Func ("OracleStyledText","bgBlueS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgBlueChar") [Var 1]]]])),Func ("OracleStyledText","bgCyanS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgCyanChar") [Var 1]]]])),Func ("OracleStyledText","bgGreenS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgGreenChar") [Var 1]]]])),Func ("OracleStyledText","bgMagentaS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgMagentaChar") [Var 1]]]])),Func ("OracleStyledText","bgRedS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgRedChar") [Var 1]]]])),Func ("OracleStyledText","bgWhiteS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgWhiteChar") [Var 1]]]])),Func ("OracleStyledText","bgYellowS") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","enclS") [Comb FuncCall ("OracleStyledText","bgYellowChar") [Var 1]]]])),Func ("OracleStyledText","enclS") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude",":") [Var 2]],Comb FuncCall ("OraclePrelude",".") [Var 3,Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("OracleStyledText","endChar") [Var 1]]],Var 4],Var 5]]))),Func ("OracleStyledText","boldDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","boldChar") [Var 1],Var 2]]))),Func ("OracleStyledText","underlineDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","underlineChar") [Var 1],Var 2]]))),Func ("OracleStyledText","blackDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","blackChar") [Var 1],Var 2]]))),Func ("OracleStyledText","blueDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","blueChar") [Var 1],Var 2]]))),Func ("OracleStyledText","cyanDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","cyanChar") [Var 1],Var 2]]))),Func ("OracleStyledText","greenDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","greenChar") [Var 1],Var 2]]))),Func ("OracleStyledText","magentaDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","magentaChar") [Var 1],Var 2]]))),Func ("OracleStyledText","redDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","redChar") [Var 1],Var 2]]))),Func ("OracleStyledText","whiteDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","whiteChar") [Var 1],Var 2]]))),Func ("OracleStyledText","yellowDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","yellowChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgBlackDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgBlackChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgBlueDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgBlueChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgCyanDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgCyanChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgGreenDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgGreenChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgMagentaDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgMagentaChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgRedDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgRedChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgWhiteDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgWhiteChar") [Var 1],Var 2]]))),Func ("OracleStyledText","bgYellowDoc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","enclDoc") [Comb FuncCall ("OracleStyledText","bgYellowChar") [Var 1],Var 2]]))),Func ("OracleStyledText","enclDoc") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","char") [Var 2,Var 1],Comb FuncCall ("OraclePretty","char") [Comb FuncCall ("OracleStyledText","endChar") [Var 3],Var 4]]]]))),Func ("OracleStyledText","plainText") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","not") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","special") []],Var 1]]]])),Func ("OracleStyledText","special") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Comb FuncCall ("OraclePrelude","ord") [Var 2,Var 1],Var 3],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude",":") [Lit (Intc 6),Comb ConsCall ("Prelude",":") [Lit (Intc 7),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","enumFromTo") [Lit (Intc 16),Lit (Intc 31),Var 4],Var 5],Var 6]]))),Func ("OracleStyledText","interpret") 7 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 1))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 1))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 0,TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 1)))))))) (Rule [2,3,4,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","_case_11") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 2,Var 1]])),Func ("OracleStyledText","interpret._#selFP3#xs") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","_case_1") [Var 2,Var 1]])),Func ("OracleStyledText","interpret._#selFP4#ys") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","_case_0") [Var 2,Var 1]])),Func ("OracleStyledText","printStyledText") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","putStrLn") []],Comb FuncCall ("OracleStyledText","toAnsiString") [Var 1],Var 2]]))),Func ("OracleStyledText","toAnsiString") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","interpret") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bold") [Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","underline") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","black") [Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","blue") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","cyan") [Var 5],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","green") [Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","magenta") [Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","red") [Var 8],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","white") [Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","yellow") [Var 10],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgBlack") [Var 11],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgBlue") [Var 12],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgCyan") [Var 13],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgGreen") [Var 14],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgMagenta") [Var 15],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgRed") [Var 16],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgWhite") [Var 17],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","bgYellow") [Var 18],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","++") []],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude",".") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("OracleStyledText","_case_0") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleStyledText","_case_1") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleStyledText","_case_11") 7 Private (TVar (-42)) (Rule [3,4,5,6,7,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","_case_10") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 1]])]])),Func ("OracleStyledText","_case_10") 9 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","_case_9") [Var 2,Var 3,Var 4,Var 5,Var 7,Var 8,Var 10,Var 11,Var 6,Var 1]])]])),Func ("OracleStyledText","_case_9") 10 Private (TVar (-42)) (Rule [2,3,4,5,7,8,10,11,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude",":") [12,13]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleStyledText","_case_8") [Var 2,Var 3,Var 4,Var 5,Var 7,Var 8,Var 10,Var 11,Var 13,Var 12,Var 1]])]])),Func ("OracleStyledText","_case_8") 11 Private (TVar (-42)) (Rule [2,3,4,5,7,8,10,11,13,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 12) [Branch (Pattern ("Prelude","(,,)") [14,15,16]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]]],Let [(17,Comb FuncCall ("OraclePrelude","$") [Var 5,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 4,Var 14,Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 4,Var 15,Var 23],Var 16,Var 24],Var 25],Var 26])] (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]],Let [(18,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","break") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleStyledText","special") []],Var 27],Var 7,Var 28])] (Let [(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []],Let [(19,Comb FuncCall ("OracleStyledText","interpret._#selFP3#xs") [Var 18,Var 29])] (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []],Let [(20,Comb FuncCall ("OracleStyledText","interpret._#selFP4#ys") [Var 18,Var 30])] (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude","[]") []]],Let [(21,Comb FuncCall ("OraclePrelude","ord") [Comb FuncCall ("OraclePrelude","head") [Var 20,Var 31],Var 32])] (Let [(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude","[]") []]],Let [(22,Comb FuncCall ("OraclePrelude","!!") [Var 11,Comb FuncCall ("OraclePrelude","-") [Var 21,Lit (Intc 16),Var 33],Var 34])] (Let [(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","_case_7") [Var 2,Var 3,Var 4,Var 5,Var 8,Var 10,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 19,Var 20,Var 21,Var 22,Comb FuncCall ("OraclePrelude","null") [Var 20,Var 35],Var 36]]))]))]))]))]))]))]))]])),Func ("OracleStyledText","_case_7") 18 Private (TVar (-42)) (Rule [2,3,4,5,8,10,12,13,14,15,16,17,19,20,21,22,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","apply") [Var 17,Var 19,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","_case_6") [Var 2,Var 3,Var 4,Var 5,Var 8,Var 10,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 19,Var 20,Var 21,Var 22,Comb FuncCall ("OraclePrelude","==") [Var 21,Lit (Intc 5),Var 1],Var 24]]))]])),Func ("OracleStyledText","_case_6") 18 Private (TVar (-42)) (Rule [2,3,4,5,8,10,12,13,14,15,16,17,19,20,21,22,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","True") []) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("Oracle","apply") [Var 17,Var 19,Var 1],Var 24],Comb FuncCall ("OracleStyledText","interpret") [Var 2,Var 3,Var 4,Var 5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 8,Var 15,Var 16],Comb ConsCall ("Prelude",":") [Var 12,Var 13]],Comb FuncCall ("OraclePrelude","tail") [Var 20,Var 25],Var 26],Var 27]])),Branch (Pattern ("Prelude","False") []) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","_case_5") [Var 2,Var 3,Var 4,Var 5,Var 10,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 19,Var 20,Var 21,Var 22,Comb FuncCall ("OraclePrelude","==") [Var 21,Lit (Intc 6),Var 1],Var 28]]))]])),Func ("OracleStyledText","_case_5") 17 Private (TVar (-42)) (Rule [2,3,4,5,10,12,13,14,15,16,17,19,20,21,22,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","True") []) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("Oracle","apply") [Var 17,Var 19,Var 1],Var 24],Comb FuncCall ("OracleStyledText","interpret") [Var 2,Var 3,Var 4,Var 5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 10,Var 15,Var 16],Comb ConsCall ("Prelude",":") [Var 12,Var 13]],Comb FuncCall ("OraclePrelude","tail") [Var 20,Var 25],Var 26],Var 27]])),Branch (Pattern ("Prelude","False") []) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","_case_4") [Var 2,Var 3,Var 4,Var 5,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 19,Var 20,Var 21,Var 22,Comb FuncCall ("OraclePrelude","==") [Var 21,Lit (Intc 7),Var 1],Var 28]]))]])),Func ("OracleStyledText","_case_4") 16 Private (TVar (-42)) (Rule [2,3,4,5,12,13,14,15,16,17,19,20,21,22,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","True") []) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("Oracle","apply") [Var 17,Var 19,Var 1],Var 24],Comb FuncCall ("OracleStyledText","interpret") [Var 2,Var 3,Var 4,Var 5,Var 13,Comb FuncCall ("OraclePrelude","tail") [Var 20,Var 25],Var 26],Var 27]])),Branch (Pattern ("Prelude","False") []) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","_case_3") [Var 2,Var 3,Var 4,Var 5,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 19,Var 20,Var 21,Var 22,Comb FuncCall ("OraclePrelude","<") [Var 21,Lit (Intc 24),Var 1],Var 28]]))]])),Func ("OracleStyledText","_case_3") 16 Private (TVar (-42)) (Rule [2,3,4,5,12,13,14,15,16,17,19,20,21,22,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","True") []) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("Oracle","apply") [Var 17,Var 19,Var 1],Var 24],Comb FuncCall ("OracleStyledText","interpret") [Var 2,Var 3,Var 4,Var 5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 14,Var 22,Var 16],Comb ConsCall ("Prelude",":") [Var 12,Var 13]],Comb FuncCall ("OraclePrelude","tail") [Var 20,Var 25],Var 26],Var 27]])),Branch (Pattern ("Prelude","False") []) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleStyledText","_case_2") [Var 2,Var 3,Var 4,Var 5,Var 12,Var 13,Var 14,Var 15,Var 17,Var 19,Var 20,Var 22,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 28]]))]])),Func ("OracleStyledText","_case_2") 14 Private (TVar (-42)) (Rule [2,3,4,5,12,13,14,15,17,19,20,22,23,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 23) [Branch (Pattern ("Prelude","True") []) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("Oracle","apply") [Var 17,Var 19,Var 1],Var 24],Comb FuncCall ("OracleStyledText","interpret") [Var 2,Var 3,Var 4,Var 5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 14,Var 15,Var 22],Comb ConsCall ("Prelude",":") [Var 12,Var 13]],Comb FuncCall ("OraclePrelude","tail") [Var 20,Var 25],Var 26],Var 27]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]]))] []