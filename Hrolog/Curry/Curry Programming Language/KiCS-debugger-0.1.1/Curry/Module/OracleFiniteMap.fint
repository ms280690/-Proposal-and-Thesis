Prog "OracleFiniteMap" ["CEventOracle","Oracle","IOExts","FiniteMap","Maybe","Prelude","OracleMaybe","OraclePrelude"] [TypeSyn ("OracleFiniteMap","FiniteSet") Private [0] (TCons ("FiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]),Type ("OracleFiniteMap","FM") Public [0,1] [Cons ("OracleFiniteMap","FM") 2 Private [FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))),TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]]]] [Func ("OracleFiniteMap","emptyFM") 2 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 2,Comb ConsCall ("FiniteMap","EmptyFM") []]])),Func ("OracleFiniteMap","unitFM") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 2,Comb FuncCall ("OracleFiniteMap","unitFM'") [Var 3,Var 4,Var 1]]])),Func ("OracleFiniteMap","unitFM'") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","Branch") [Var 2,Var 3,Lit (Intc 1),Comb ConsCall ("FiniteMap","EmptyFM") [],Comb ConsCall ("FiniteMap","EmptyFM") []]])),Func ("OracleFiniteMap","listToFM") 2 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","addListToFM") [Comb FuncCall ("OracleFiniteMap","emptyFM") [Var 2,Var 1]]]])),Func ("OracleFiniteMap","addToFM") 4 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_117") [Var 3,Var 4,Var 2,Var 1]])),Func ("OracleFiniteMap","addToFM'") 5 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","addToFM_C'") [Var 2,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","addToFM'._#lambda2") []],Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","addToFM'._#lambda2") 3 Private (FuncType (TVar 270) (FuncType (TVar 270) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 270)))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])),Func ("OracleFiniteMap","addToFM_C'") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 1))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))))) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_116") [Var 2,Var 3,Var 5,Var 6,Var 4,Var 1]])),Func ("OracleFiniteMap","addListToFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_113") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","addListToFM'") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","addListToFM_C'") [Var 2,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","addListToFM'._#lambda3") []],Var 3,Var 4,Var 1]])),Func ("OracleFiniteMap","addListToFM'._#lambda3") 3 Private (FuncType (TVar 246) (FuncType (TVar 246) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 246)))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])),Func ("OracleFiniteMap","addListToFM_C'") 5 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 1))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","foldl") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","addListToFM_C'.add.30") [Var 3,Var 2]],Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","addListToFM_C'.add.30") 5 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 235) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 235) (TVar 235))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 234) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 234) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 234,TVar 235]) (FuncType (TCons ("Prelude","(,)") [TVar 234,TVar 235]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 234,TVar 235])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_112") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","addToFM_C") 5 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 1,TVar 0]) (FuncType (TVar 1) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 1,TVar 0])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_111") [Var 2,Var 4,Var 5,Var 3,Var 1]])),Func ("OracleFiniteMap","addListToFM_C") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 1,TVar 0]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_110") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","delFromFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_109") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","delFromFM'") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_108") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","delListFromFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_105") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","updFM") 4 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 1))) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_104") [Var 3,Var 4,Var 2,Var 1]])),Func ("OracleFiniteMap","updFM.upd.49") 5 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 523) (TVar 523))) (FuncType (TVar 535) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 535) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 535) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 535,TVar 523]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 535,TVar 523])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_103") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","splitFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1],TCons ("Prelude","(,)") [TVar 0,TVar 1]]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","maybe") [Comb ConsCall ("Prelude","Nothing") [],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","splitFM._#lambda4") [Var 2,Var 3]],Comb FuncCall ("OracleFiniteMap","lookupFM") [Var 2,Var 3,Var 1],Var 4]]))),Func ("OracleFiniteMap","splitFM._#lambda4") 4 Private (FuncType (TCons ("OracleFiniteMap","FM") [TVar 593,TVar 600]) (FuncType (TVar 593) (FuncType (TVar 600) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TVar 593,TVar 600],TCons ("Prelude","(,)") [TVar 593,TVar 600]]]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("OracleFiniteMap","delFromFM") [Var 2,Var 3,Var 1],Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]])),Func ("OracleFiniteMap","plusFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_99") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","plusFM'") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_97") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","plusFM_C") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 1,TVar 0]) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 1,TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 1,TVar 0]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_95") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","plusFM_C'") 5 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 1))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_93") [Var 2,Var 3,Var 5,Var 4,Var 1]])),Func ("OracleFiniteMap","minusFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_90") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","minusFM'") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 2]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_88") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","intersectFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_86") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","intersectFM'") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 2]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 2]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","intersectFM_C'") [Var 2,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","intersectFM'._#lambda6") []],Var 3,Var 4,Var 1]])),Func ("OracleFiniteMap","intersectFM'._#lambda6") 3 Private (FuncType (TVar 1051) (FuncType (TVar 1052) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 1052)))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])),Func ("OracleFiniteMap","intersectFM_C") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 1))))) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 2,TVar 0]) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 2,TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 2,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_84") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","intersectFM_C'") 5 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 2) (TVar 3))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 2]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 3])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_82") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","intersectFM_C'._#selFP3#elt1'") 2 Private (FuncType (TCons ("Prelude","Maybe") [TVar 1000]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 1000))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_78") [Var 2,Var 1]])),Func ("OracleFiniteMap","foldFM") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 2) (TVar 2))))))) (FuncType (TVar 2) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 2))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_77") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleFiniteMap","foldFM'") 5 Private (FuncType (TVar 0) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 2) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 3) (TVar 3))))))) (FuncType (TVar 3) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 1,TVar 2]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 3)))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_76") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","mapFM") 3 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 2))))) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 2])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_75") [Var 2,Var 3,Var 1]])),Func ("OracleFiniteMap","mapFM'") 4 Private (FuncType (TVar 0) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 2) (TVar 3))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 1,TVar 2]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 1,TVar 3]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_74") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleFiniteMap","filterFM") 3 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_73") [Var 2,Var 3,Var 1]])),Func ("OracleFiniteMap","filterFM'") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_72") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleFiniteMap","sizeFM") 2 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_69") [Var 2,Var 1]])),Func ("OracleFiniteMap","sizeFM'") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_67") [Var 2,Var 1]])),Func ("OracleFiniteMap","eqFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OracleFiniteMap","sizeFM") [Var 2,Var 1],Comb FuncCall ("OracleFiniteMap","sizeFM") [Var 3,Var 4],Var 5],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OracleFiniteMap","fmToList") [Var 2,Var 6],Comb FuncCall ("OracleFiniteMap","fmToList") [Var 3,Var 7],Var 8],Var 9]]))),Func ("OracleFiniteMap","isEmptyFM") 2 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OracleFiniteMap","sizeFM") [Var 2,Var 1],Lit (Intc 0),Var 3]]))),Func ("OracleFiniteMap","elemFM") 3 Public (FuncType (TVar 0) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleMaybe","isJust") [Comb FuncCall ("OracleFiniteMap","lookupFM") [Var 3,Var 2,Var 1],Var 4]]))),Func ("OracleFiniteMap","lookupFM") 3 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_66") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","lookupFM'") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_65") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","lookupWithDefaultFM") 4 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TVar 1) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 1))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_62") [Var 2,Var 3,Var 4,Comb FuncCall ("OracleFiniteMap","lookupFM") [Var 2,Var 4,Var 1],Var 5]]))),Func ("OracleFiniteMap","keyOrder") 2 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_61") [Var 2,Var 1]])),Func ("OracleFiniteMap","minFM") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","minFM.min.215") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","tree") []],Var 1]])),Func ("OracleFiniteMap","minFM.min.215") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_60") [Var 2,Var 1]])),Func ("OracleFiniteMap","maxFM") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","maxFM.max.223") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","tree") []],Var 1]])),Func ("OracleFiniteMap","maxFM.max.223") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_57") [Var 2,Var 1]])),Func ("OracleFiniteMap","fmToList") 2 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","foldFM") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]],Comb (FuncPartCall 4) ("OracleFiniteMap","fmToList._#lambda8") []],Comb ConsCall ("Prelude","[]") [],Var 2,Var 1]])),Func ("OracleFiniteMap","fmToList._#lambda8") 4 Private (FuncType (TVar 1237) (FuncType (TVar 1238) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1237,TVar 1238]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1237,TVar 1238]]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 3],Var 4]])),Func ("OracleFiniteMap","keysFM") 2 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","foldFM") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]],Comb (FuncPartCall 4) ("OracleFiniteMap","keysFM._#lambda9") []],Comb ConsCall ("Prelude","[]") [],Var 2,Var 1]])),Func ("OracleFiniteMap","keysFM._#lambda9") 4 Private (FuncType (TVar 1356) (FuncType (TVar 1353) (FuncType (TCons ("Prelude","[]") [TVar 1356]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 1356]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Var 4]])),Func ("OracleFiniteMap","eltsFM") 2 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 1]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","foldFM") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]],Comb (FuncPartCall 4) ("OracleFiniteMap","eltsFM._#lambda10") []],Comb ConsCall ("Prelude","[]") [],Var 2,Var 1]])),Func ("OracleFiniteMap","eltsFM._#lambda10") 4 Private (FuncType (TVar 1363) (FuncType (TVar 1367) (FuncType (TCons ("Prelude","[]") [TVar 1367]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 1367]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Var 4]])),Func ("OracleFiniteMap","fmToListPreOrder") 2 Public (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_54") [Var 2,Var 1]])),Func ("OracleFiniteMap","fmToListPreOrder.pre.243") 3 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_53") [Var 3,Var 2,Var 1]])),Func ("OracleFiniteMap","fmSortBy") 3 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 0])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFiniteMap","keysFM") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleFiniteMap","listToFM") [Var 2,Var 1],Comb FuncCall ("OraclePrelude","zip") [Var 3,Comb FuncCall ("OraclePrelude","repeat") [Comb ConsCall ("Prelude","()") [],Var 4],Var 5],Var 6],Var 7]]))),Func ("OracleFiniteMap","tree") 2 Private (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_52") [Var 2,Var 1]])),Func ("OracleFiniteMap","toGT") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","not") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 3,Var 1],Var 4,Var 5],Var 6],Comb FuncCall ("OraclePrelude","/=") [Var 3,Var 4,Var 7],Var 8]]))),Func ("OracleFiniteMap","isEmptyFM'") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 2,Var 1],Lit (Intc 0),Var 3]]))),Func ("OracleFiniteMap","sIZE_RATIO") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Lit (Intc 5)])),Func ("OracleFiniteMap","mkBranch") 6 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))))) (Rule [2,3,4,5,6,1] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 5,Var 1])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 6,Var 9])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("FiniteMap","Branch") [Var 3,Var 4,Comb FuncCall ("OracleFiniteMap","mkBranch.unbox.264") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","+") [Lit (Intc 1),Var 7,Var 10],Var 8,Var 11],Var 12],Var 5,Var 6]]))]))]))),Func ("OracleFiniteMap","mkBranch.unbox.264") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2])),Func ("OracleFiniteMap","mkBalBranch") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1])))))) (Rule [2,3,4,5,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 4,Var 1])] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 5,Var 8])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_51") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","+") [Var 6,Var 7,Var 9],Lit (Intc 2),Var 10],Var 11]]))]))]))),Func ("OracleFiniteMap","mkBalBranch.single_L.273") 5 Private (FuncType (TVar 170) (FuncType (TVar 169) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_43") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","mkBalBranch.double_L.273") 5 Private (FuncType (TVar 170) (FuncType (TVar 169) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_42") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleFiniteMap","mkBalBranch.single_R.273") 5 Private (FuncType (TVar 170) (FuncType (TVar 169) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_40") [Var 2,Var 3,Var 5,Var 4,Var 1]])),Func ("OracleFiniteMap","mkBalBranch.double_R.273") 5 Private (FuncType (TVar 170) (FuncType (TVar 169) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 169,TVar 170])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_39") [Var 2,Var 3,Var 5,Var 4,Var 1]])),Func ("OracleFiniteMap","mkVBalBranch") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))))) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_37") [Var 2,Var 3,Var 4,Var 6,Var 5,Var 1]])),Func ("OracleFiniteMap","glueBal") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_32") [Var 2,Var 3,Var 4,Comb FuncCall ("OracleFiniteMap","isEmptyFM'") [Var 3,Var 1],Var 5]]))),Func ("OracleFiniteMap","glueBal._#selFP8#mid_key1") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 439,TVar 440]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 439))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_29") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueBal._#selFP9#mid_elt1") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 439,TVar 440]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 440))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_28") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueBal._#selFP6#mid_key2") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 439,TVar 440]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 439))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_27") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueBal._#selFP7#mid_elt2") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 439,TVar 440]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 440))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_26") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_25") [Var 2,Var 3,Var 4,Comb FuncCall ("OracleFiniteMap","isEmptyFM'") [Var 3,Var 1],Var 5]]))),Func ("OracleFiniteMap","glueVBal._#selFP16#key_l") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 876))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_21") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal._#selFP17#elt_l") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 877))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_20") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal._#selFP18#fm_ll") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_19") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal._#selFP19#fm_lr") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_18") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal._#selFP12#key_r") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 876))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_17") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal._#selFP13#elt_r") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 877))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_16") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal._#selFP14#fm_rl") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_15") [Var 2,Var 1]])),Func ("OracleFiniteMap","glueVBal._#selFP15#fm_rr") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 876,TVar 877]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_14") [Var 2,Var 1]])),Func ("OracleFiniteMap","splitLT") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_13") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","splitGT") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_10") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleFiniteMap","findMin") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_7") [Var 2,Var 1]])),Func ("OracleFiniteMap","deleteMin") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_5") [Var 2,Var 3,Var 1]])),Func ("OracleFiniteMap","findMax") 2 Private (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_3") [Var 2,Var 1]])),Func ("OracleFiniteMap","deleteMax") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FiniteMap","FiniteMap") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_1") [Var 2,Var 3,Var 1]])),Func ("OracleFiniteMap","emptySet") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","emptyFM") []]])),Func ("OracleFiniteMap","mkSet") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleFiniteMap","listToFM") [Var 2,Var 1],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","mkSet._#lambda13") []],Var 3,Var 4],Var 5]]))),Func ("OracleFiniteMap","mkSet._#lambda13") 2 Private (FuncType (TVar 1421) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TVar 1421,TCons ("Prelude","()") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","()") []]])),Func ("OracleFiniteMap","isEmptySet") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","isEmptyFM") []]])),Func ("OracleFiniteMap","elementOf") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Bool") [])))))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","elemFM") []]])),Func ("OracleFiniteMap","minusSet") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]) (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","minusFM") []]])),Func ("OracleFiniteMap","setToList") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFiniteMap","keysFM") []]])),Func ("OracleFiniteMap","union") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []]) (TCons ("OracleFiniteMap","FM") [TVar 0,TCons ("Prelude","()") []])))))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","plusFM") []]])),Func ("OracleFiniteMap","_case_1") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","Branch") [4,5,6,7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_0") [Var 2,Var 4,Var 5,Var 7,Var 8,Var 1]])]])),Func ("OracleFiniteMap","_case_0") 6 Private (TVar (-42)) (Rule [2,4,5,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7]),Branch (Pattern ("FiniteMap","Branch") [9,10,11,12,13]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 4,Var 5,Var 7,Comb FuncCall ("OracleFiniteMap","deleteMax") [Var 2,Comb ConsCall ("FiniteMap","Branch") [Var 9,Var 10,Var 11,Var 12,Var 13],Var 1],Var 14]]))]])),Func ("OracleFiniteMap","_case_3") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_2") [Var 3,Var 4,Var 7,Var 1]])]])),Func ("OracleFiniteMap","_case_2") 4 Private (TVar (-42)) (Rule [3,4,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]),Branch (Pattern ("FiniteMap","Branch") [8,9,10,11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","findMax") [Comb ConsCall ("FiniteMap","Branch") [Var 8,Var 9,Var 10,Var 11,Var 12],Var 1]])]])),Func ("OracleFiniteMap","_case_5") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","Branch") [4,5,6,7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_4") [Var 2,Var 4,Var 5,Var 8,Var 7,Var 1]])]])),Func ("OracleFiniteMap","_case_4") 6 Private (TVar (-42)) (Rule [2,4,5,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8]),Branch (Pattern ("FiniteMap","Branch") [9,10,11,12,13]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 4,Var 5,Comb FuncCall ("OracleFiniteMap","deleteMin") [Var 2,Comb ConsCall ("FiniteMap","Branch") [Var 9,Var 10,Var 11,Var 12,Var 13],Var 1],Var 8,Var 14]]))]])),Func ("OracleFiniteMap","_case_7") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_6") [Var 3,Var 4,Var 6,Var 1]])]])),Func ("OracleFiniteMap","_case_6") 4 Private (TVar (-42)) (Rule [3,4,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]),Branch (Pattern ("FiniteMap","Branch") [8,9,10,11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","findMin") [Comb ConsCall ("FiniteMap","Branch") [Var 8,Var 9,Var 10,Var 11,Var 12],Var 1]])]])),Func ("OracleFiniteMap","_case_10") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_9") [Var 2,Var 4,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 4,Var 1],Var 5,Var 10],Var 11]]))]])),Func ("OracleFiniteMap","_case_9") 8 Private (TVar (-42)) (Rule [2,4,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 5,Var 6,Comb FuncCall ("OracleFiniteMap","splitGT") [Var 2,Var 8,Var 4,Var 1],Var 9,Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_8") [Var 2,Var 4,Var 5,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 4,Var 5,Var 1],Var 12]]))]])),Func ("OracleFiniteMap","_case_8") 6 Private (TVar (-42)) (Rule [2,4,5,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 9]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","splitGT") [Var 2,Var 9,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_13") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_12") [Var 2,Var 4,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 4,Var 1],Var 5,Var 10],Var 11]]))]])),Func ("OracleFiniteMap","_case_12") 8 Private (TVar (-42)) (Rule [2,4,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","splitLT") [Var 2,Var 8,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_11") [Var 2,Var 4,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 4,Var 5,Var 1],Var 11]]))]])),Func ("OracleFiniteMap","_case_11") 8 Private (TVar (-42)) (Rule [2,4,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 5,Var 6,Var 8,Comb FuncCall ("OracleFiniteMap","splitLT") [Var 2,Var 9,Var 4,Var 1],Var 11]]))]])),Func ("OracleFiniteMap","_case_14") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleFiniteMap","_case_15") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleFiniteMap","_case_16") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleFiniteMap","_case_17") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleFiniteMap","_case_18") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleFiniteMap","_case_19") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleFiniteMap","_case_20") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleFiniteMap","_case_21") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleFiniteMap","_case_25") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_24") [Var 2,Var 3,Var 4,Comb FuncCall ("OracleFiniteMap","isEmptyFM'") [Var 4,Var 1],Var 6]]))]])),Func ("OracleFiniteMap","_case_24") 5 Private (TVar (-42)) (Rule [2,3,4,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(5,Var 3)] (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP16#key_l") [Var 5,Var 1])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP17#elt_l") [Var 5,Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP18#fm_ll") [Var 5,Var 19])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP19#fm_lr") [Var 5,Var 20])] (Comb FuncCall ("CEventOracle","replace") [Var 21,Let [(10,Var 4)] (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP12#key_r") [Var 10,Var 21])] (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Let [(12,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP13#elt_r") [Var 10,Var 22])] (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Let [(13,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP14#fm_rl") [Var 10,Var 23])] (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Let [(14,Comb FuncCall ("OracleFiniteMap","glueVBal._#selFP15#fm_rr") [Var 10,Var 24])] (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Let [(15,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 3,Var 25])] (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []],Let [(16,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 4,Var 26])] (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFiniteMap","_case_23") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 9,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","*") [Comb FuncCall ("OracleFiniteMap","sIZE_RATIO") [Var 27],Var 15,Var 28],Var 16,Var 29],Var 30]]))]))]))]))]))]))]))])]))]))]))]))])]])),Func ("OracleFiniteMap","_case_23") 15 Private (TVar (-42)) (Rule [2,3,4,6,7,8,9,11,12,13,14,15,16,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 11,Var 12,Comb FuncCall ("OracleFiniteMap","glueVBal") [Var 2,Var 3,Var 13,Var 1],Var 14,Var 18]])),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFiniteMap","_case_22") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 9,Var 15,Var 16,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","*") [Comb FuncCall ("OracleFiniteMap","sIZE_RATIO") [Var 1],Var 16,Var 19],Var 15,Var 20],Var 21]]))]])),Func ("OracleFiniteMap","_case_22") 11 Private (TVar (-42)) (Rule [2,3,4,6,7,8,9,15,16,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 6,Var 7,Var 8,Comb FuncCall ("OracleFiniteMap","glueVBal") [Var 2,Var 9,Var 4,Var 1],Var 18]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","glueBal") [Var 2,Var 3,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_26") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleFiniteMap","_case_27") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleFiniteMap","_case_28") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleFiniteMap","_case_29") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleFiniteMap","_case_32") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_31") [Var 2,Var 3,Var 4,Comb FuncCall ("OracleFiniteMap","isEmptyFM'") [Var 4,Var 1],Var 6]]))]])),Func ("OracleFiniteMap","_case_31") 5 Private (TVar (-42)) (Rule [2,3,4,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleFiniteMap","findMax") [Var 3,Var 1])] (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleFiniteMap","glueBal._#selFP8#mid_key1") [Var 5,Var 12])] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleFiniteMap","glueBal._#selFP9#mid_elt1") [Var 5,Var 13])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleFiniteMap","findMin") [Var 4,Var 14])] (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleFiniteMap","glueBal._#selFP6#mid_key2") [Var 8,Var 15])] (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Let [(10,Comb FuncCall ("OracleFiniteMap","glueBal._#selFP7#mid_elt2") [Var 8,Var 16])] (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFiniteMap","_case_30") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 9,Var 10,Comb FuncCall ("OraclePrelude",">") [Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 4,Var 17],Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 3,Var 18],Var 19],Var 20]]))]))]))]))]))]))]))]])),Func ("OracleFiniteMap","_case_30") 9 Private (TVar (-42)) (Rule [2,3,4,6,7,9,10,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 9,Var 10,Var 3,Comb FuncCall ("OracleFiniteMap","deleteMin") [Var 2,Var 4,Var 1],Var 12]])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 6,Var 7,Comb FuncCall ("OracleFiniteMap","deleteMax") [Var 2,Var 3,Var 1],Var 4,Var 13]]))]])),Func ("OracleFiniteMap","_case_37") 6 Private (TVar (-42)) (Rule [2,3,4,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","addToFM'") [Var 2,Var 6,Var 3,Var 4,Var 1]]),Branch (Pattern ("FiniteMap","Branch") [7,8,9,10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_36") [Var 2,Var 3,Var 4,Var 7,Var 8,Var 9,Var 10,Var 11,Var 6,Var 1]])]])),Func ("OracleFiniteMap","_case_36") 10 Private (TVar (-42)) (Rule [2,3,4,7,8,9,10,11,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","addToFM'") [Var 2,Comb ConsCall ("FiniteMap","Branch") [Var 7,Var 8,Var 9,Var 10,Var 11],Var 3,Var 4,Var 1]]),Branch (Pattern ("FiniteMap","Branch") [12,13,14,15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(17,Comb ConsCall ("FiniteMap","Branch") [Var 7,Var 8,Var 9,Var 10,Var 11])] (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(18,Comb ConsCall ("FiniteMap","Branch") [Var 12,Var 13,Var 14,Var 15,Var 16])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Let [(19,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 17,Var 1])] (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Let [(20,Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 18,Var 21])] (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFiniteMap","_case_35") [Var 2,Var 3,Var 4,Var 7,Var 8,Var 10,Var 11,Var 12,Var 13,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","*") [Comb FuncCall ("OracleFiniteMap","sIZE_RATIO") [Var 22],Var 19,Var 23],Var 20,Var 24],Var 25]]))]))]))])])]])),Func ("OracleFiniteMap","_case_35") 17 Private (TVar (-42)) (Rule [2,3,4,7,8,10,11,12,13,15,16,17,18,19,20,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","True") []) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 12,Var 13,Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 3,Var 4,Var 17,Var 15,Var 1],Var 16,Var 22]])),Branch (Pattern ("Prelude","False") []) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFiniteMap","_case_34") [Var 2,Var 3,Var 4,Var 7,Var 8,Var 10,Var 11,Var 17,Var 18,Var 19,Var 20,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","*") [Comb FuncCall ("OracleFiniteMap","sIZE_RATIO") [Var 1],Var 20,Var 23],Var 19,Var 24],Var 25]]))]])),Func ("OracleFiniteMap","_case_34") 13 Private (TVar (-42)) (Rule [2,3,4,7,8,10,11,17,18,19,20,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","True") []) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 7,Var 8,Var 10,Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 3,Var 4,Var 11,Var 18,Var 1],Var 22]])),Branch (Pattern ("Prelude","False") []) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_33") [Var 3,Var 4,Var 17,Var 18,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 23]]))]])),Func ("OracleFiniteMap","_case_33") 6 Private (TVar (-42)) (Rule [3,4,17,18,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 13),Var 3,Var 4,Var 17,Var 18,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_39") 5 Private (TVar (-42)) (Rule [2,3,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_38") [Var 2,Var 3,Var 5,Var 6,Var 7,Var 9,Var 10,Var 1]])]])),Func ("OracleFiniteMap","_case_38") 8 Private (TVar (-42)) (Rule [2,3,5,6,7,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 10) [Branch (Pattern ("FiniteMap","Branch") [11,12,13,14,15]) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 10),Var 11,Var 12,Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 11),Var 6,Var 7,Var 9,Var 14,Var 1],Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 12),Var 3,Var 2,Var 15,Var 5,Var 16],Var 17]]))]])),Func ("OracleFiniteMap","_case_40") 5 Private (TVar (-42)) (Rule [2,3,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 8),Var 6,Var 7,Var 9,Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 9),Var 3,Var 2,Var 10,Var 5,Var 1],Var 11]]))]])),Func ("OracleFiniteMap","_case_42") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_41") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 10,Var 9,Var 1]])]])),Func ("OracleFiniteMap","_case_41") 8 Private (TVar (-42)) (Rule [2,3,4,6,7,10,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 9) [Branch (Pattern ("FiniteMap","Branch") [11,12,13,14,15]) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 5),Var 11,Var 12,Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 6),Var 3,Var 2,Var 4,Var 14,Var 1],Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 7),Var 6,Var 7,Var 15,Var 10,Var 16],Var 17]]))]])),Func ("OracleFiniteMap","_case_43") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 3),Var 6,Var 7,Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 4),Var 3,Var 2,Var 4,Var 9,Var 1],Var 10,Var 11]]))]])),Func ("OracleFiniteMap","_case_51") 8 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 1),Var 2,Var 3,Var 4,Var 5,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFiniteMap","_case_50") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Comb FuncCall ("OraclePrelude",">") [Var 7,Comb FuncCall ("OraclePrelude","*") [Comb FuncCall ("OracleFiniteMap","sIZE_RATIO") [Var 1],Var 6,Var 9],Var 10],Var 11]]))]])),Func ("OracleFiniteMap","_case_50") 8 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_49") [Var 2,Var 3,Var 4,Var 5,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleFiniteMap","_case_47") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Comb FuncCall ("OraclePrelude",">") [Var 6,Comb FuncCall ("OraclePrelude","*") [Comb FuncCall ("OracleFiniteMap","sIZE_RATIO") [Var 1],Var 7,Var 9],Var 10],Var 11]]))]])),Func ("OracleFiniteMap","_case_47") 8 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_46") [Var 2,Var 3,Var 5,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_44") [Var 2,Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 9]]))]])),Func ("OracleFiniteMap","_case_44") 6 Private (TVar (-42)) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","mkBranch") [Lit (Intc 2),Var 2,Var 3,Var 4,Var 5,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_46") 5 Private (TVar (-42)) (Rule [2,3,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("FiniteMap","Branch") [13,14,15,16,17]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFiniteMap","_case_45") [Var 2,Var 3,Var 4,Var 5,Var 16,Var 17,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 17,Var 1],Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 16,Var 18],Var 19],Var 20],Var 21]])),Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_45") 8 Private (TVar (-42)) (Rule [2,3,4,5,16,17,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","mkBalBranch.single_R.273") [Var 3,Var 2,Var 4,Var 5,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","mkBalBranch.double_R.273") [Var 3,Var 2,Var 4,Var 5,Var 1]])]])),Func ("OracleFiniteMap","_case_49") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("FiniteMap","Branch") [8,9,10,11,12]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFiniteMap","_case_48") [Var 2,Var 3,Var 4,Var 5,Var 11,Var 12,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 11,Var 1],Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Comb FuncCall ("OracleFiniteMap","sizeFM'") [Var 12,Var 13],Var 14],Var 15],Var 16]])),Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_48") 8 Private (TVar (-42)) (Rule [2,3,4,5,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","mkBalBranch.single_L.273") [Var 3,Var 2,Var 4,Var 5,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","mkBalBranch.double_L.273") [Var 3,Var 2,Var 4,Var 5,Var 1]])]])),Func ("OracleFiniteMap","_case_52") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleFiniteMap","_case_53") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("FiniteMap","Branch") [4,5,6,7,8]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 5],Comb FuncCall ("OracleFiniteMap","fmToListPreOrder.pre.243") [Var 7,Comb FuncCall ("OracleFiniteMap","fmToListPreOrder.pre.243") [Var 8,Var 3,Var 1],Var 9]]]))]])),Func ("OracleFiniteMap","_case_54") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","fmToListPreOrder.pre.243") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1]])]])),Func ("OracleFiniteMap","_case_57") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_56") [Var 3,Var 4,Var 7,Comb FuncCall ("OraclePrelude","==") [Var 7,Comb ConsCall ("FiniteMap","EmptyFM") [],Var 1],Var 8]]))]])),Func ("OracleFiniteMap","_case_56") 5 Private (TVar (-42)) (Rule [3,4,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_55") [Var 7,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 9]]))]])),Func ("OracleFiniteMap","_case_55") 3 Private (TVar (-42)) (Rule [7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","maxFM.max.223") [Var 7,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_60") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_59") [Var 3,Var 4,Var 6,Comb FuncCall ("OraclePrelude","==") [Var 6,Comb ConsCall ("FiniteMap","EmptyFM") [],Var 1],Var 8]]))]])),Func ("OracleFiniteMap","_case_59") 5 Private (TVar (-42)) (Rule [3,4,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_58") [Var 6,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 8]]))]])),Func ("OracleFiniteMap","_case_58") 3 Private (TVar (-42)) (Rule [6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","minFM.min.215") [Var 6,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_61") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleFiniteMap","_case_62") 5 Private (TVar (-42)) (Rule [2,3,4,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude","Just") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleFiniteMap","_case_65") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_64") [Var 2,Var 4,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 4,Var 1],Var 5,Var 10],Var 11]]))]])),Func ("OracleFiniteMap","_case_64") 8 Private (TVar (-42)) (Rule [2,4,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","lookupFM'") [Var 2,Var 8,Var 4,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_63") [Var 2,Var 4,Var 5,Var 6,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 4,Var 5,Var 1],Var 11]]))]])),Func ("OracleFiniteMap","_case_63") 7 Private (TVar (-42)) (Rule [2,4,5,6,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","Just") [Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","lookupFM'") [Var 2,Var 9,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_66") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","lookupFM'") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OracleFiniteMap","_case_67") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Lit (Intc 0)]),Branch (Pattern ("FiniteMap","Branch") [3,4,5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleFiniteMap","_case_69") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_68") [Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_68") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Lit (Intc 0)]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleFiniteMap","_case_72") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_71") [Var 2,Var 3,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 1],Var 6,Var 10],Var 11]]))]])),Func ("OracleFiniteMap","_case_71") 8 Private (TVar (-42)) (Rule [2,3,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 5,Var 6,Comb FuncCall ("OracleFiniteMap","filterFM'") [Var 2,Var 3,Var 8,Var 1],Comb FuncCall ("OracleFiniteMap","filterFM'") [Var 2,Var 3,Var 9,Var 11],Var 12]])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_70") [Var 2,Var 3,Var 8,Var 9,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 13]]))]])),Func ("OracleFiniteMap","_case_70") 6 Private (TVar (-42)) (Rule [2,3,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","glueVBal") [Var 2,Comb FuncCall ("OracleFiniteMap","filterFM'") [Var 2,Var 3,Var 8,Var 1],Comb FuncCall ("OracleFiniteMap","filterFM'") [Var 2,Var 3,Var 9,Var 11],Var 12]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_73") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OracleFiniteMap","filterFM'") [Var 4,Var 2,Var 5,Var 1]]])]])),Func ("OracleFiniteMap","_case_74") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("FiniteMap","Branch") [Var 5,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 1],Var 6,Var 10],Var 7,Comb FuncCall ("OracleFiniteMap","mapFM'") [Var 2,Var 3,Var 8,Var 11],Comb FuncCall ("OracleFiniteMap","mapFM'") [Var 2,Var 3,Var 9,Var 12]]]))]])),Func ("OracleFiniteMap","_case_75") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OracleFiniteMap","mapFM'") [Var 4,Var 2,Var 5,Var 1]]])]])),Func ("OracleFiniteMap","_case_76") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4]),Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFiniteMap","foldFM'") [Var 2,Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 6,Var 1],Var 7,Var 11],Comb FuncCall ("OracleFiniteMap","foldFM'") [Var 2,Var 3,Var 4,Var 10,Var 12],Var 13],Var 9,Var 14]]))]])),Func ("OracleFiniteMap","_case_77") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("OracleFiniteMap","FM") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","foldFM'") [Var 5,Var 2,Var 3,Var 6,Var 1]])]])),Func ("OracleFiniteMap","_case_78") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","Just") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleFiniteMap","_case_82") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_81") [Var 2,Var 3,Var 6,Var 7,Var 9,Var 10,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_81") 8 Private (TVar (-42)) (Rule [2,3,6,7,9,10,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [11,12,13,14,15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(16,Comb ConsCall ("FiniteMap","Branch") [Var 11,Var 12,Var 13,Var 14,Var 15])] (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Let [(17,Comb FuncCall ("OracleFiniteMap","splitLT") [Var 2,Var 16,Var 6,Var 1])] (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Let [(18,Comb FuncCall ("OracleFiniteMap","splitGT") [Var 2,Var 16,Var 6,Var 22])] (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Let [(19,Comb FuncCall ("OracleFiniteMap","lookupFM'") [Var 2,Var 16,Var 6,Var 23])] (Comb FuncCall ("CEventOracle","replace") [Var 24,Let [(20,Var 19)] (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Let [(21,Comb FuncCall ("OracleFiniteMap","intersectFM_C'._#selFP3#elt1'") [Var 20,Var 24])] (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_80") [Var 2,Var 3,Var 6,Var 7,Var 9,Var 10,Var 17,Var 18,Var 19,Var 21,Comb FuncCall ("OracleMaybe","isJust") [Var 19,Var 25],Var 26]]))]))])]))]))]))])]])),Func ("OracleFiniteMap","_case_80") 12 Private (TVar (-42)) (Rule [2,3,6,7,9,10,17,18,19,21,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 22) [Branch (Pattern ("Prelude","True") []) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 6,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 21,Var 1],Var 7,Var 23],Comb FuncCall ("OracleFiniteMap","intersectFM_C'") [Var 2,Var 3,Var 17,Var 9,Var 24],Comb FuncCall ("OracleFiniteMap","intersectFM_C'") [Var 2,Var 3,Var 18,Var 10,Var 25],Var 26]])),Branch (Pattern ("Prelude","False") []) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_79") [Var 2,Var 3,Var 9,Var 10,Var 17,Var 18,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 27]]))]])),Func ("OracleFiniteMap","_case_79") 8 Private (TVar (-42)) (Rule [2,3,9,10,17,18,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","True") []) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","glueVBal") [Var 2,Comb FuncCall ("OracleFiniteMap","intersectFM_C'") [Var 2,Var 3,Var 17,Var 9,Var 1],Comb FuncCall ("OracleFiniteMap","intersectFM_C'") [Var 2,Var 3,Var 18,Var 10,Var 20],Var 21]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_84") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_83") [Var 2,Var 5,Var 6,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_83") 5 Private (TVar (-42)) (Rule [2,5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("OracleFiniteMap","FM") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 5,Comb FuncCall ("OracleFiniteMap","intersectFM_C'") [Var 5,Var 2,Var 6,Var 8,Var 1]]])]])),Func ("OracleFiniteMap","_case_86") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_85") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OracleFiniteMap","_case_85") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OracleFiniteMap","intersectFM'") [Var 4,Var 5,Var 7,Var 1]]])]])),Func ("OracleFiniteMap","_case_88") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_87") [Var 2,Var 5,Var 6,Var 7,Var 8,Var 9,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_87") 8 Private (TVar (-42)) (Rule [2,5,6,7,8,9,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","Branch") [Var 5,Var 6,Var 7,Var 8,Var 9]]),Branch (Pattern ("FiniteMap","Branch") [10,11,12,13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(15,Comb ConsCall ("FiniteMap","Branch") [Var 5,Var 6,Var 7,Var 8,Var 9])] (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Let [(16,Comb FuncCall ("OracleFiniteMap","splitLT") [Var 2,Var 15,Var 10,Var 1])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Let [(17,Comb FuncCall ("OracleFiniteMap","splitGT") [Var 2,Var 15,Var 10,Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","glueVBal") [Var 2,Comb FuncCall ("OracleFiniteMap","minusFM'") [Var 2,Var 16,Var 13,Var 19],Comb FuncCall ("OracleFiniteMap","minusFM'") [Var 2,Var 17,Var 14,Var 20],Var 21]]))]))]))])]])),Func ("OracleFiniteMap","_case_90") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_89") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OracleFiniteMap","_case_89") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OracleFiniteMap","minusFM'") [Var 4,Var 5,Var 7,Var 1]]])]])),Func ("OracleFiniteMap","_case_93") 5 Private (TVar (-42)) (Rule [2,3,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5]),Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_92") [Var 2,Var 3,Var 6,Var 7,Var 8,Var 9,Var 10,Var 5,Var 1]])]])),Func ("OracleFiniteMap","_case_92") 9 Private (TVar (-42)) (Rule [2,3,6,7,8,9,10,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","Branch") [Var 6,Var 7,Var 8,Var 9,Var 10]]),Branch (Pattern ("FiniteMap","Branch") [11,12,13,14,15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(16,Comb ConsCall ("FiniteMap","Branch") [Var 6,Var 7,Var 8,Var 9,Var 10])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Let [(17,Comb FuncCall ("OracleFiniteMap","splitLT") [Var 2,Var 16,Var 11,Var 1])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Let [(18,Comb FuncCall ("OracleFiniteMap","splitGT") [Var 2,Var 16,Var 11,Var 20])] (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]],Let [(19,Comb FuncCall ("OracleFiniteMap","_case_91") [Var 2,Var 3,Var 11,Var 12,Var 16,Comb FuncCall ("OracleFiniteMap","lookupFM'") [Var 2,Var 16,Var 11,Var 21],Var 22])] (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 11,Var 19,Comb FuncCall ("OracleFiniteMap","plusFM_C'") [Var 2,Var 3,Var 17,Var 14,Var 23],Comb FuncCall ("OracleFiniteMap","plusFM_C'") [Var 2,Var 3,Var 18,Var 15,Var 24],Var 25]]))]))]))]))])]])),Func ("OracleFiniteMap","_case_91") 7 Private (TVar (-42)) (Rule [2,3,11,12,16,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 12]),Branch (Pattern ("Prelude","Just") [20]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 20,Var 1],Var 12,Var 22]]))]])),Func ("OracleFiniteMap","_case_95") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_94") [Var 2,Var 5,Var 6,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_94") 5 Private (TVar (-42)) (Rule [2,5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("OracleFiniteMap","FM") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 5,Comb FuncCall ("OracleFiniteMap","plusFM_C'") [Var 5,Var 2,Var 6,Var 8,Var 1]]])]])),Func ("OracleFiniteMap","_case_97") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_96") [Var 2,Var 5,Var 6,Var 7,Var 8,Var 9,Var 4,Var 1]])]])),Func ("OracleFiniteMap","_case_96") 8 Private (TVar (-42)) (Rule [2,5,6,7,8,9,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","Branch") [Var 5,Var 6,Var 7,Var 8,Var 9]]),Branch (Pattern ("FiniteMap","Branch") [10,11,12,13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(15,Comb ConsCall ("FiniteMap","Branch") [Var 5,Var 6,Var 7,Var 8,Var 9])] (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Let [(16,Comb FuncCall ("OracleFiniteMap","splitLT") [Var 2,Var 15,Var 10,Var 1])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Let [(17,Comb FuncCall ("OracleFiniteMap","splitGT") [Var 2,Var 15,Var 10,Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","mkVBalBranch") [Var 2,Var 10,Var 11,Comb FuncCall ("OracleFiniteMap","plusFM'") [Var 2,Var 16,Var 13,Var 19],Comb FuncCall ("OracleFiniteMap","plusFM'") [Var 2,Var 17,Var 14,Var 20],Var 21]]))]))]))])]])),Func ("OracleFiniteMap","_case_99") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","_case_98") [Var 4,Var 5,Var 3,Var 1]])]])),Func ("OracleFiniteMap","_case_98") 4 Private (TVar (-42)) (Rule [4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OracleFiniteMap","plusFM'") [Var 4,Var 5,Var 7,Var 1]]])]])),Func ("OracleFiniteMap","_case_103") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [6,7,8,9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_102") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 9,Var 10,Comb FuncCall ("OraclePrelude","==") [Var 3,Var 6,Var 1],Var 11]]))]])),Func ("OracleFiniteMap","_case_102") 10 Private (TVar (-42)) (Rule [2,3,4,6,7,8,9,10,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("FiniteMap","Branch") [Var 6,Comb FuncCall ("Oracle","apply") [Var 2,Var 7,Var 1],Var 8,Var 9,Var 10]]),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_101") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 9,Var 10,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 4,Var 3,Var 1],Var 6,Var 12],Var 13]]))]])),Func ("OracleFiniteMap","_case_101") 10 Private (TVar (-42)) (Rule [2,3,4,6,7,8,9,10,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("FiniteMap","Branch") [Var 6,Var 7,Var 8,Comb FuncCall ("OracleFiniteMap","updFM.upd.49") [Var 2,Var 3,Var 4,Var 9,Var 1],Var 10]]),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_100") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 9,Var 10,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 12]]))]])),Func ("OracleFiniteMap","_case_100") 10 Private (TVar (-42)) (Rule [2,3,4,6,7,8,9,10,11,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 11) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("FiniteMap","Branch") [Var 6,Var 7,Var 8,Var 9,Comb FuncCall ("OracleFiniteMap","updFM.upd.49") [Var 2,Var 3,Var 4,Var 10,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleFiniteMap","_case_104") 4 Private (TVar (-42)) (Rule [3,4,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 5,Comb FuncCall ("OracleFiniteMap","updFM.upd.49") [Var 4,Var 3,Var 5,Var 6,Var 1]]])]])),Func ("OracleFiniteMap","_case_105") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OraclePrelude","foldl") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFiniteMap","delFromFM'") [Var 4]],Var 5,Var 3,Var 1]]])]])),Func ("OracleFiniteMap","_case_108") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FiniteMap","EmptyFM") []]),Branch (Pattern ("FiniteMap","Branch") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_107") [Var 2,Var 4,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 4,Var 1],Var 5,Var 10],Var 11]]))]])),Func ("OracleFiniteMap","_case_107") 8 Private (TVar (-42)) (Rule [2,4,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 5,Var 6,Comb FuncCall ("OracleFiniteMap","delFromFM'") [Var 2,Var 8,Var 4,Var 1],Var 9,Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_106") [Var 2,Var 4,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 4,Var 5,Var 1],Var 12]]))]])),Func ("OracleFiniteMap","_case_106") 8 Private (TVar (-42)) (Rule [2,4,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","glueBal") [Var 2,Var 8,Var 9,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 5,Var 6,Var 8,Comb FuncCall ("OracleFiniteMap","delFromFM'") [Var 2,Var 9,Var 4,Var 1],Var 11]]))]])),Func ("OracleFiniteMap","_case_109") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OracleFiniteMap","delFromFM'") [Var 4,Var 5,Var 3,Var 1]]])]])),Func ("OracleFiniteMap","_case_110") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 5,Comb FuncCall ("OracleFiniteMap","addListToFM_C'") [Var 5,Var 2,Var 6,Var 4,Var 1]]])]])),Func ("OracleFiniteMap","_case_111") 5 Private (TVar (-42)) (Rule [2,4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleFiniteMap","FM") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 6,Comb FuncCall ("OracleFiniteMap","addToFM_C'") [Var 6,Var 2,Var 7,Var 4,Var 5,Var 1]]])]])),Func ("OracleFiniteMap","_case_112") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","addToFM_C'") [Var 3,Var 2,Var 4,Var 6,Var 7,Var 1]])]])),Func ("OracleFiniteMap","_case_113") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 4,Comb FuncCall ("OracleFiniteMap","addListToFM'") [Var 4,Var 5,Var 3,Var 1]]])]])),Func ("OracleFiniteMap","_case_116") 6 Private (TVar (-42)) (Rule [2,3,5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("FiniteMap","EmptyFM") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","unitFM'") [Var 5,Var 6,Var 1]]),Branch (Pattern ("FiniteMap","Branch") [7,8,9,10,11]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFiniteMap","_case_115") [Var 2,Var 3,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 1],Var 7,Var 12],Var 13]]))]])),Func ("OracleFiniteMap","_case_115") 11 Private (TVar (-42)) (Rule [2,3,5,6,7,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 7,Var 8,Comb FuncCall ("OracleFiniteMap","addToFM_C'") [Var 2,Var 3,Var 10,Var 5,Var 6,Var 1],Var 11,Var 13]])),Branch (Pattern ("Prelude","False") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","_case_114") [Var 2,Var 3,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","==") [Var 5,Var 7,Var 1],Var 14]]))]])),Func ("OracleFiniteMap","_case_114") 11 Private (TVar (-42)) (Rule [2,3,5,6,7,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("FiniteMap","Branch") [Var 5,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 8,Var 1],Var 6,Var 13],Var 9,Var 10,Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleFiniteMap","mkBalBranch") [Var 7,Var 8,Var 10,Comb FuncCall ("OracleFiniteMap","addToFM_C'") [Var 2,Var 3,Var 11,Var 5,Var 6,Var 1],Var 14]]))]])),Func ("OracleFiniteMap","_case_117") 4 Private (TVar (-42)) (Rule [3,4,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleFiniteMap","FM") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleFiniteMap","FM") [Var 5,Comb FuncCall ("OracleFiniteMap","addToFM'") [Var 5,Var 6,Var 3,Var 4,Var 1]]])]]))] []