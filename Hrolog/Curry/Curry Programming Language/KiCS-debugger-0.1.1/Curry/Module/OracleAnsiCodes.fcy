Prog "OracleAnsiCodes" ["CEventOracle","Oracle","IOExts","AnsiCodes","Char","List","Prelude","OracleChar","OracleList","OraclePrelude"] [] [Func ("OracleAnsiCodes","esc") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","chr") [Lit (Intc 27),Var 1]])),Func ("OracleAnsiCodes","cmd") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OracleAnsiCodes","esc") [Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude","[]") []],Var 2,Var 3]]]))),Func ("OracleAnsiCodes","cursorPos") 3 Public (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleAnsiCodes","cmd") [Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc 'H'),Comb ConsCall ("Prelude","[]") []],Var 5],Var 6],Var 7],Var 8]]))),Func ("OracleAnsiCodes","cursorHome") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAnsiCodes","cmd") [Comb ConsCall ("Prelude",":") [Lit (Charc 'H'),Comb ConsCall ("Prelude","[]") []],Var 1]])),Func ("OracleAnsiCodes","moveCursor") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAnsiCodes","cmd") [Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Var 2,Var 4],Var 5]]))),Func ("OracleAnsiCodes","cursorUp") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","moveCursor") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("OracleAnsiCodes","cursorDown") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","moveCursor") [Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("OracleAnsiCodes","cursorFwd") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","moveCursor") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("OracleAnsiCodes","cursorBack") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","moveCursor") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("OracleAnsiCodes","saveCursor") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAnsiCodes","cmd") [Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []],Var 1]])),Func ("OracleAnsiCodes","restoreCursor") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAnsiCodes","cmd") [Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude","[]") []],Var 1]])),Func ("OracleAnsiCodes","clear") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAnsiCodes","cmd") [Comb ConsCall ("Prelude",":") [Lit (Charc '2'),Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude","[]") []]],Var 1]])),Func ("OracleAnsiCodes","eraseLine") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAnsiCodes","cmd") [Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude","[]") []],Var 1]])),Func ("OracleAnsiCodes","mode") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OracleAnsiCodes","cmd") [Comb ConsCall ("Prelude",":") [Lit (Charc '0'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude","[]") []]],Var 1])] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OracleAnsiCodes","cmd") [Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 2,Var 5],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("OracleAnsiCodes","_case_4") [Var 3,Var 4,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleAnsiCodes","isSuffixOf") [Var 4,Var 6],Var 3,Var 7],Var 8],Var 9],Var 10],Var 11],Var 12]]))]))),Func ("OracleAnsiCodes","isSuffixOf") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleList","isPrefixOf") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","reverse") [Var 1],Var 2,Var 3]]],Comb FuncCall ("OraclePrelude","reverse") [Var 4],Var 5]]))),Func ("OracleAnsiCodes","bold") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 1)]]])),Func ("OracleAnsiCodes","underline") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 4)]]])),Func ("OracleAnsiCodes","revColors") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 7)]]])),Func ("OracleAnsiCodes","concealed") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 8)]]])),Func ("OracleAnsiCodes","black") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 30)]]])),Func ("OracleAnsiCodes","red") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 31)]]])),Func ("OracleAnsiCodes","green") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 32)]]])),Func ("OracleAnsiCodes","yellow") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 33)]]])),Func ("OracleAnsiCodes","blue") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 34)]]])),Func ("OracleAnsiCodes","magenta") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 35)]]])),Func ("OracleAnsiCodes","cyan") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 36)]]])),Func ("OracleAnsiCodes","white") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 37)]]])),Func ("OracleAnsiCodes","bgBlack") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 40)]]])),Func ("OracleAnsiCodes","bgRed") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 41)]]])),Func ("OracleAnsiCodes","bgGreen") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 42)]]])),Func ("OracleAnsiCodes","bgYellow") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 43)]]])),Func ("OracleAnsiCodes","bgBlue") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 44)]]])),Func ("OracleAnsiCodes","bgMagenta") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 45)]]])),Func ("OracleAnsiCodes","bgCyan") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 46)]]])),Func ("OracleAnsiCodes","bgWhite") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleAnsiCodes","mode") [Lit (Intc 47)]]])),Func ("OracleAnsiCodes","ansiLength") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAnsiCodes","ansiLength.aux.95") [Var 2,Comb FuncCall ("OraclePrelude","length") [Var 2,Var 1],Var 3]]))),Func ("OracleAnsiCodes","ansiLength.aux.95") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAnsiCodes","_case_3") [Var 3,Var 2,Var 1]])),Func ("OracleAnsiCodes","_case_3") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleAnsiCodes","_case_2") [Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 4,Comb FuncCall ("OracleAnsiCodes","esc") [Var 1],Var 6],Comb FuncCall ("OracleChar","isDigit") [Comb FuncCall ("OraclePrelude","!!") [Var 5,Lit (Intc 2),Var 7],Var 8],Var 9],Var 10]]))]])),Func ("OracleAnsiCodes","_case_2") 5 Private (TVar (-42)) (Rule [3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleAnsiCodes","ansiLength.aux.95") [Comb FuncCall ("OraclePrelude","tail") [Comb FuncCall ("OraclePrelude","tail") [Comb FuncCall ("OraclePrelude","tail") [Comb FuncCall ("OraclePrelude","tail") [Var 5,Var 1],Var 7],Var 8],Var 9],Comb FuncCall ("OraclePrelude","-") [Var 3,Lit (Intc 5),Var 10],Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleAnsiCodes","_case_1") [Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Comb FuncCall ("OracleAnsiCodes","esc") [Var 1],Var 12],Var 13]]))]])),Func ("OracleAnsiCodes","_case_1") 5 Private (TVar (-42)) (Rule [3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleAnsiCodes","ansiLength.aux.95") [Comb FuncCall ("OraclePrelude","tail") [Comb FuncCall ("OraclePrelude","tail") [Comb FuncCall ("OraclePrelude","tail") [Var 5,Var 1],Var 7],Var 8],Comb FuncCall ("OraclePrelude","-") [Var 3,Lit (Intc 4),Var 9],Var 10]])),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleAnsiCodes","_case_0") [Var 3,Var 5,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 11]]))]])),Func ("OracleAnsiCodes","_case_0") 4 Private (TVar (-42)) (Rule [3,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleAnsiCodes","ansiLength.aux.95") [Var 5,Var 3,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleAnsiCodes","_case_4") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]]))] []