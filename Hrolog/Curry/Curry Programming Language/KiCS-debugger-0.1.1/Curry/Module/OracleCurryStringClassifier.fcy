Prog "OracleCurryStringClassifier" ["CEventOracle","Oracle","IOExts","CurryStringClassifier","Char","Prelude","OracleChar","OraclePrelude"] [] [Func ("OracleCurryStringClassifier","isSmallComment") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_88") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","isBigComment") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_87") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","isComment") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OracleCurryStringClassifier","isSmallComment") [Var 2,Var 1],Comb FuncCall ("OracleCurryStringClassifier","isBigComment") [Var 2,Var 3],Var 4]]))),Func ("OracleCurryStringClassifier","isText") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_86") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","isLetter") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_85") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","isCode") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_84") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","isModuleHead") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_83") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","isMeta") 2 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_82") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","weaveIntoCode") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])))) (Rule [2,3,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OracleCurryStringClassifier","unweaveCode") [Var 3,Var 1])] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleCurryStringClassifier","weaveIntoCode._#selFP3#cs") [Var 4,Var 7])] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleCurryStringClassifier","weaveIntoCode._#selFP4#ncs") [Var 4,Var 8])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","weave") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 9],Var 6],Var 10]]))]))]))]))),Func ("OracleCurryStringClassifier","weaveIntoCode._#selFP3#cs") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_81") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","weaveIntoCode._#selFP4#ncs") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_80") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","unweaveCode") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_79") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","unweaveCode._#selFP6#cs") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_77") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","unweaveCode._#selFP7#ncs") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_76") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","weave") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_75") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","scan") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [2,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Let [(3,Comb FuncCall ("Oracle","unknown") [Var 1])] (Comb FuncCall ("OracleCurryStringClassifier","modHead") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Lit (Intc 1),Comb ConsCall ("CurryStringClassifier","Code") [Var 3],Var 3,Var 2,Var 4],Var 5])]))),Func ("OracleCurryStringClassifier","stateScan") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_68") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OracleCurryStringClassifier","stateScan._#selFP9#comment") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_29") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","stateScan._#selFP10#rest") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_28") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","modHead") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_27") [Var 2,Var 3,Var 1]])),Func ("OracleCurryStringClassifier","modHead._#lambda11") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 2,Lit (Charc '\n'),Var 1],Comb FuncCall ("OraclePrelude","==") [Var 2,Lit (Charc '\r'),Var 3],Var 4]]))),Func ("OracleCurryStringClassifier","modHeadInLine") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_19") [Var 2,Var 3,Var 1]])),Func ("OracleCurryStringClassifier","modHeadInLine._#lambda13") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 2,Lit (Charc '\n'),Var 1],Comb FuncCall ("OraclePrelude","==") [Var 2,Lit (Charc '\r'),Var 3],Var 4]]))),Func ("OracleCurryStringClassifier","headers") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("OracleCurryStringClassifier","lineBeginsWith") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OraclePrelude","length") [Var 3,Var 1])] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","_case_15") [Var 2,Var 3,Var 4,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","length") [Var 2,Var 5],Var 4,Var 6],Var 7]]))]))),Func ("OracleCurryStringClassifier","lineBeginsWith._#selFP12#s'") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_13") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","lineBeginsWith._#selFP13#rest") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_12") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","isSep") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OracleChar","isSpace") [Var 2,Var 1],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Var 2,Var 3],Comb FuncCall ("OracleCurryStringClassifier","infixIDs") [Var 4],Var 5],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Var 2,Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude","[]") []]]],Var 7],Var 8],Var 9]]))),Func ("OracleCurryStringClassifier","infixIDs") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '~'),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc '$'),Comb ConsCall ("Prelude",":") [Lit (Charc '%'),Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '/'),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]])),Func ("OracleCurryStringClassifier","delimiters") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]])),Func ("OracleCurryStringClassifier","toBeEscaped") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\r'),Comb ConsCall ("Prelude",":") [Lit (Charc '\t'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("OracleCurryStringClassifier","maybeCode") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 2],Var 3]])),Func ("OracleCurryStringClassifier","maybeMo") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_11") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","==") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Var 4]]))),Func ("OracleCurryStringClassifier","plainCode") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_8") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","unscan") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_4") [Var 2,Var 1]])),Func ("OracleCurryStringClassifier","readScan") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OraclePrelude","readFile") [Var 2,Var 1],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","return") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","scan") []],Var 3],Var 4]]))),Func ("OracleCurryStringClassifier","testScan") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OraclePrelude","readFile") [Var 2,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","testScan._#lambda18") []],Var 3]]))),Func ("OracleCurryStringClassifier","testScan._#lambda18") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","print") [Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OracleCurryStringClassifier","unscan") [Comb FuncCall ("OracleCurryStringClassifier","scan") [Var 2,Var 1],Var 3],Var 2,Var 4],Var 5]]))),Func ("OracleCurryStringClassifier","testWeave") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OraclePrelude","readFile") [Var 2,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","testWeave._#lambda19") []],Var 3]]))),Func ("OracleCurryStringClassifier","testWeave._#lambda19") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","print") [Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OracleCurryStringClassifier","unscan") [Comb FuncCall ("OracleCurryStringClassifier","weave") [Comb FuncCall ("OracleCurryStringClassifier","unweaveCode") [Comb FuncCall ("OracleCurryStringClassifier","scan") [Var 2,Var 1],Var 3],Var 4],Var 5],Var 2,Var 6],Var 7]]))),Func ("OracleCurryStringClassifier","_case_4") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_3") [Var 4,Var 3,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCurryStringClassifier","_case_3") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("CurryStringClassifier","ModuleHead") [5]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","_case_2") [Var 4,Var 1],Var 23]])),Branch (Pattern ("CurryStringClassifier","Code") [17]) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 17,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1],Var 24]])),Branch (Pattern ("CurryStringClassifier","Text") [18]) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb FuncCall ("OraclePrelude","++") [Var 18,Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]],Var 25]]])),Branch (Pattern ("CurryStringClassifier","Letter") [19]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb FuncCall ("OraclePrelude","++") [Var 19,Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]],Var 26]]])),Branch (Pattern ("CurryStringClassifier","BigComment") [20]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 20,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1],Var 27],Var 28],Var 29]])),Branch (Pattern ("CurryStringClassifier","SmallComment") [21]) (Let [(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 21,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1],Var 30],Var 31]])),Branch (Pattern ("CurryStringClassifier","Meta") [22]) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 22,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1],Var 32],Var 33],Var 34]]))]])),Func ("OracleCurryStringClassifier","_case_2") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_1") [Var 4,Var 7,Var 6,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_1") 4 Private (TVar (-42)) (Rule [4,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("CurryStringClassifier","Code") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_0") [Var 4,Var 7,Var 8,Var 1]]),Branch (Pattern ("CurryStringClassifier","SmallComment") [11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","BigComment") [12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","Text") [13]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","Letter") [14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","Meta") [16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_0") 4 Private (TVar (-42)) (Rule [4,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 7],Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","unscan") [Var 4,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_8") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_7") [Var 4,Var 3,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []])]])),Func ("OracleCurryStringClassifier","_case_7") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("CurryStringClassifier","ModuleHead") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_6") [Var 5,Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","Code") [15]) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 15,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 21]])),Branch (Pattern ("CurryStringClassifier","Text") [16]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb FuncCall ("OraclePrelude","++") [Var 16,Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1]],Var 22]]])),Branch (Pattern ("CurryStringClassifier","Letter") [17]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb FuncCall ("OraclePrelude","++") [Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1]],Var 23]]])),Branch (Pattern ("CurryStringClassifier","BigComment") [18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","SmallComment") [19]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1]]),Branch (Pattern ("CurryStringClassifier","Meta") [20]) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Var 20,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 24],Var 25],Var 26]]))]])),Func ("OracleCurryStringClassifier","_case_6") 3 Private (TVar (-42)) (Rule [5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_5") [Var 4,Var 5,Var 7,Var 6,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 8]]))]])),Func ("OracleCurryStringClassifier","_case_5") 5 Private (TVar (-42)) (Rule [4,5,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("CurryStringClassifier","Code") [8]) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","drop") [Lit (Intc 1),Var 8,Var 1],Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 7,Var 15],Var 16],Var 17]])),Branch (Pattern ("CurryStringClassifier","SmallComment") [9]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 18]])),Branch (Pattern ("CurryStringClassifier","BigComment") [10]) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 19]])),Branch (Pattern ("CurryStringClassifier","Text") [11]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 20]])),Branch (Pattern ("CurryStringClassifier","Letter") [12]) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 21]])),Branch (Pattern ("CurryStringClassifier","ModuleHead") [13]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 22]])),Branch (Pattern ("CurryStringClassifier","Meta") [14]) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Var 5,Comb FuncCall ("OracleCurryStringClassifier","plainCode") [Var 4,Var 1],Var 23]]))]])),Func ("OracleCurryStringClassifier","_case_11") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","ModuleHead") [Var 2],Comb FuncCall ("OracleCurryStringClassifier","_case_10") [Var 3,Var 1]]])]])),Func ("OracleCurryStringClassifier","_case_10") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_9") [Var 3,Var 5,Var 4,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCurryStringClassifier","_case_9") 4 Private (TVar (-42)) (Rule [3,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("CurryStringClassifier","Code") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Var 6]],Var 5]]),Branch (Pattern ("CurryStringClassifier","SmallComment") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CurryStringClassifier","BigComment") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CurryStringClassifier","Text") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CurryStringClassifier","Letter") [10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("CurryStringClassifier","Meta") [12]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCurryStringClassifier","_case_12") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleCurryStringClassifier","_case_13") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCurryStringClassifier","_case_15") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_14") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 6]]))]])),Func ("OracleCurryStringClassifier","_case_14") 4 Private (TVar (-42)) (Rule [2,3,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 2,Var 3,Var 1],Let [(5,Comb FuncCall ("OraclePrelude","splitAt") [Comb FuncCall ("OraclePrelude","length") [Var 3,Var 9],Var 2,Var 10])] (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleCurryStringClassifier","lineBeginsWith._#selFP12#s'") [Var 5,Var 11])] (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleCurryStringClassifier","lineBeginsWith._#selFP13#rest") [Var 5,Var 12])] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 3,Var 6,Var 13],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","null") [Var 7,Var 14],Comb FuncCall ("OracleCurryStringClassifier","isSep") [Comb FuncCall ("OraclePrelude","head") [Var 7,Var 15],Var 16],Var 17],Var 18]]))]))])),Var 19]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCurryStringClassifier","_case_19") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") [],Var 6]])),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_18") [Var 2,Var 5,Var 4,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_18") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("CurryStringClassifier","Code") [6]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","_case_17") [Var 2,Var 5,Var 6,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","break") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","modHeadInLine._#lambda13") []],Var 1],Var 6,Var 14],Var 15]])),Branch (Pattern ("CurryStringClassifier","BigComment") [11]) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","BigComment") [Var 11],Comb FuncCall ("OracleCurryStringClassifier","modHeadInLine") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Var 5,Var 16]],Var 17]])),Branch (Pattern ("CurryStringClassifier","SmallComment") [12]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","SmallComment") [Var 12],Comb FuncCall ("OracleCurryStringClassifier","modHeadInLine") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Var 5,Var 18]],Var 19]])),Branch (Pattern ("CurryStringClassifier","Meta") [13]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Meta") [Var 13],Var 5],Var 20]]))]])),Func ("OracleCurryStringClassifier","_case_17") 5 Private (TVar (-42)) (Rule [2,5,6,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_16") [Var 2,Var 5,Var 6,Var 7,Var 8,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_16") 6 Private (TVar (-42)) (Rule [2,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","modHead") [Comb FuncCall ("OraclePrelude",".") [Var 2,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","++") [Var 7]],Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude",":") [Var 9]],Var 1],Var 11],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 5],Var 12]])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","modHead") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 6],Var 5],Var 1]])]])),Func ("OracleCurryStringClassifier","_case_27") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_26") [Var 2,Var 5,Var 4,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") [],Var 6]]))]])),Func ("OracleCurryStringClassifier","_case_26") 4 Private (TVar (-42)) (Rule [2,5,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("CurryStringClassifier","Code") [6]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","_case_25") [Var 2,Var 5,Var 6,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","break") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","modHead._#lambda11") []],Var 1],Var 6,Var 18],Var 19]])),Branch (Pattern ("CurryStringClassifier","BigComment") [15]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","BigComment") [Var 15],Comb FuncCall ("OracleCurryStringClassifier","modHead") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Var 5,Var 20]],Var 21]])),Branch (Pattern ("CurryStringClassifier","SmallComment") [16]) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","SmallComment") [Var 16],Comb FuncCall ("OracleCurryStringClassifier","modHead") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Var 5,Var 22]],Var 23]])),Branch (Pattern ("CurryStringClassifier","Meta") [17]) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Meta") [Var 17],Var 5],Var 24]]))]])),Func ("OracleCurryStringClassifier","_case_25") 5 Private (TVar (-42)) (Rule [2,5,6,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_24") [Var 2,Var 5,Var 6,Var 8,Var 7,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_24") 6 Private (TVar (-42)) (Rule [2,5,6,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_23") [Var 2,Var 5,Var 8,Var 1]]),Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_22") [Var 2,Var 5,Var 6,Var 11,Var 12,Var 8,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_22") 7 Private (TVar (-42)) (Rule [2,5,6,11,12,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCurryStringClassifier","_case_21") [Var 2,Var 5,Var 6,Var 11,Var 12,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","any") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","lineBeginsWith") [Comb ConsCall ("Prelude",":") [Var 11,Var 12]]],Var 1],Comb FuncCall ("OracleCurryStringClassifier","headers") [Var 15],Var 16],Var 17]])),Branch (Pattern ("Prelude",":") [13,14]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCurryStringClassifier","_case_20") [Var 2,Var 5,Var 6,Var 11,Var 12,Var 13,Var 14,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","any") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","lineBeginsWith") [Comb ConsCall ("Prelude",":") [Var 11,Var 12]]],Var 1],Comb FuncCall ("OracleCurryStringClassifier","headers") [Var 18],Var 19],Var 20]]))]])),Func ("OracleCurryStringClassifier","_case_20") 9 Private (TVar (-42)) (Rule [2,5,6,11,12,13,14,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 15) [Branch (Pattern ("Prelude","True") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","modHead") [Comb FuncCall ("OraclePrelude",".") [Var 2,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Var 11,Var 12]]],Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude",":") [Var 13]],Var 1],Var 16],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 14],Var 5],Var 17]])),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 6],Var 5],Var 18]]))]])),Func ("OracleCurryStringClassifier","_case_21") 7 Private (TVar (-42)) (Rule [2,5,6,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","ModuleHead") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude",":") [Var 11,Var 12],Var 1]],Comb FuncCall ("OracleCurryStringClassifier","modHeadInLine") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []],Var 5,Var 14]]])),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","maybeMo") [Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 6],Var 5],Var 15]]))]])),Func ("OracleCurryStringClassifier","_case_23") 4 Private (TVar (-42)) (Rule [2,5,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","modHead") [Var 2,Var 5,Var 1]]),Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","modHead") [Comb FuncCall ("OraclePrelude",".") [Var 2,Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude",":") [Var 9]],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 5],Var 11]]))]])),Func ("OracleCurryStringClassifier","_case_28") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleCurryStringClassifier","_case_29") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCurryStringClassifier","_case_68") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","cond") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Var 8]])),Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_67") [Var 2,Var 4,Var 6,Var 7,Var 3,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_67") 6 Private (TVar (-42)) (Rule [2,4,6,7,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("CurryStringClassifier","Code") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_66") [Var 2,Var 4,Var 6,Var 8,Var 7,Var 1]]),Branch (Pattern ("CurryStringClassifier","Text") [27]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_43") [Var 2,Var 4,Var 6,Var 27,Var 7,Var 1]]),Branch (Pattern ("CurryStringClassifier","BigComment") [31]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_37") [Var 2,Var 4,Var 6,Var 31,Var 7,Var 1]]),Branch (Pattern ("CurryStringClassifier","Meta") [35]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_33") [Var 2,Var 4,Var 6,Var 35,Var 7,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_33") 6 Private (TVar (-42)) (Rule [2,4,6,35,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","cond") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb FuncCall ("OraclePrelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 39],Var 40]])),Branch (Pattern ("Prelude",":") [36,37]) (Let [(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(44,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude",":") [Var 44,Comb ConsCall ("Prelude","[]") []]]]],Let [(38,Comb FuncCall ("Oracle","unknown") [Var 1])] (Comb FuncCall ("OracleCurryStringClassifier","_case_32") [Var 2,Var 4,Var 6,Var 35,Var 36,Var 37,Var 38,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '+'),Var 41],Comb FuncCall ("OraclePrelude","==") [Var 36,Lit (Charc '}'),Var 42],Var 43],Var 44])]))]])),Func ("OracleCurryStringClassifier","_case_32") 9 Private (TVar (-42)) (Rule [2,4,6,35,36,37,38,39,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 39) [Branch (Pattern ("Prelude","True") []) (Let [(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Meta") [Var 35],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 38],Var 38,Var 37,Var 40]],Var 41]])),Branch (Pattern ("Prelude","False") []) (Let [(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_31") [Var 2,Var 4,Var 6,Var 35,Var 36,Var 37,Var 38,Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '\n'),Var 1],Var 42]]))]])),Func ("OracleCurryStringClassifier","_case_31") 9 Private (TVar (-42)) (Rule [2,4,6,35,36,37,38,39,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 39) [Branch (Pattern ("Prelude","True") []) (Let [(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(42,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude",":") [Var 42,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Var 38],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Comb FuncCall ("OraclePrelude","+") [Var 2,Lit (Intc 1),Var 40],Comb ConsCall ("CurryStringClassifier","Meta") [Var 35],Var 38,Comb ConsCall ("Prelude",":") [Var 36,Var 37],Var 41],Var 42]])),Branch (Pattern ("Prelude","False") []) (Let [(43,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 43,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_30") [Var 2,Var 4,Var 6,Var 35,Var 36,Var 37,Var 38,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 43]]))]])),Func ("OracleCurryStringClassifier","_case_30") 9 Private (TVar (-42)) (Rule [2,4,6,35,36,37,38,39,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 39) [Branch (Pattern ("Prelude","True") []) (Let [(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(41,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude",":") [Var 41,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Var 38],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Meta") [Var 35],Var 38,Comb ConsCall ("Prelude",":") [Var 36,Var 37],Var 40],Var 41]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCurryStringClassifier","_case_37") 6 Private (TVar (-42)) (Rule [2,4,6,31,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","cond") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb FuncCall ("OraclePrelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 35],Var 36]])),Branch (Pattern ("Prelude",":") [32,33]) (Let [(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(40,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude",":") [Var 40,Comb ConsCall ("Prelude","[]") []]]]],Let [(34,Comb FuncCall ("Oracle","unknown") [Var 1])] (Comb FuncCall ("OracleCurryStringClassifier","_case_36") [Var 2,Var 4,Var 6,Var 31,Var 32,Var 33,Var 34,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '-'),Var 37],Comb FuncCall ("OraclePrelude","==") [Var 32,Lit (Charc '}'),Var 38],Var 39],Var 40])]))]])),Func ("OracleCurryStringClassifier","_case_36") 9 Private (TVar (-42)) (Rule [2,4,6,31,32,33,34,35,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 35) [Branch (Pattern ("Prelude","True") []) (Let [(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","BigComment") [Var 31],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 34],Var 34,Var 33,Var 36]],Var 37]])),Branch (Pattern ("Prelude","False") []) (Let [(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_35") [Var 2,Var 4,Var 6,Var 31,Var 32,Var 33,Var 34,Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '\n'),Var 1],Var 38]]))]])),Func ("OracleCurryStringClassifier","_case_35") 9 Private (TVar (-42)) (Rule [2,4,6,31,32,33,34,35,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 35) [Branch (Pattern ("Prelude","True") []) (Let [(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(38,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude",":") [Var 38,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Var 34],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Comb FuncCall ("OraclePrelude","+") [Var 2,Lit (Intc 1),Var 36],Comb ConsCall ("CurryStringClassifier","BigComment") [Var 31],Var 34,Comb ConsCall ("Prelude",":") [Var 32,Var 33],Var 37],Var 38]])),Branch (Pattern ("Prelude","False") []) (Let [(39,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 39,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_34") [Var 2,Var 4,Var 6,Var 31,Var 32,Var 33,Var 34,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 39]]))]])),Func ("OracleCurryStringClassifier","_case_34") 9 Private (TVar (-42)) (Rule [2,4,6,31,32,33,34,35,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 35) [Branch (Pattern ("Prelude","True") []) (Let [(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(37,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude",":") [Var 37,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Var 34],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","BigComment") [Var 31],Var 34,Comb ConsCall ("Prelude",":") [Var 32,Var 33],Var 36],Var 37]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCurryStringClassifier","_case_43") 6 Private (TVar (-42)) (Rule [2,4,6,27,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","cond") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb FuncCall ("OracleCurryStringClassifier","_case_42") [Var 6,Var 27,Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '"'),Var 31],Var 32],Var 33]])),Branch (Pattern ("Prelude",":") [28,29]) (Let [(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude","[]") []]],Let [(30,Comb FuncCall ("Oracle","unknown") [Var 1])] (Comb FuncCall ("OracleCurryStringClassifier","_case_41") [Var 2,Var 4,Var 6,Var 27,Var 28,Var 29,Var 30,Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '"'),Var 34],Var 35])]))]])),Func ("OracleCurryStringClassifier","_case_41") 9 Private (TVar (-42)) (Rule [2,4,6,27,28,29,30,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 31) [Branch (Pattern ("Prelude","True") []) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Text") [Var 27],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 30],Var 30,Comb ConsCall ("Prelude",":") [Var 28,Var 29],Var 32]],Var 33]])),Branch (Pattern ("Prelude","False") []) (Let [(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_40") [Var 2,Var 4,Var 6,Var 27,Var 28,Var 29,Var 30,Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '\\'),Var 1],Var 34]]))]])),Func ("OracleCurryStringClassifier","_case_40") 9 Private (TVar (-42)) (Rule [2,4,6,27,28,29,30,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 31) [Branch (Pattern ("Prelude","True") []) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 28,Var 30]],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Text") [Var 27],Var 30,Var 29,Var 32],Var 33]])),Branch (Pattern ("Prelude","False") []) (Let [(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(36,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude",":") [Var 36,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCurryStringClassifier","_case_39") [Var 2,Var 4,Var 6,Var 27,Var 28,Var 29,Var 30,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Var 6,Var 1],Comb FuncCall ("OracleCurryStringClassifier","toBeEscaped") [Var 34],Var 35],Var 36]]))]])),Func ("OracleCurryStringClassifier","_case_39") 9 Private (TVar (-42)) (Rule [2,4,6,27,28,29,30,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 31) [Branch (Pattern ("Prelude","True") []) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(34,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude",":") [Var 34,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 32]],Var 33],Var 34]])),Branch (Pattern ("Prelude","False") []) (Let [(35,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 35,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_38") [Var 2,Var 4,Var 6,Var 27,Var 28,Var 29,Var 30,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 35]]))]])),Func ("OracleCurryStringClassifier","_case_38") 9 Private (TVar (-42)) (Rule [2,4,6,27,28,29,30,31,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 31) [Branch (Pattern ("Prelude","True") []) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Var 30],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Text") [Var 27],Var 30,Comb ConsCall ("Prelude",":") [Var 28,Var 29],Var 32],Var 33]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCurryStringClassifier","_case_42") 4 Private (TVar (-42)) (Rule [6,27,28,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 28) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Text") [Var 27],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 1]])]])),Func ("OracleCurryStringClassifier","_case_66") 6 Private (TVar (-42)) (Rule [2,4,6,8,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","cond") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("OracleCurryStringClassifier","maybeCode") [Var 8,Comb ConsCall ("Prelude","[]") [],Var 12],Var 13]])),Branch (Pattern ("Prelude",":") [9,10]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Let [(11,Comb FuncCall ("Oracle","unknown") [Var 1])] (Comb FuncCall ("OracleCurryStringClassifier","_case_65") [Var 2,Var 4,Var 6,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '"'),Var 14],Var 15])]))]])),Func ("OracleCurryStringClassifier","_case_65") 9 Private (TVar (-42)) (Rule [2,4,6,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb FuncCall ("OracleCurryStringClassifier","maybeCode") [Var 8,Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Text") [Var 11],Var 11,Comb ConsCall ("Prelude",":") [Var 9,Var 10],Var 13],Var 14],Var 15]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCurryStringClassifier","_case_64") [Var 2,Var 4,Var 6,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '-'),Var 1],Comb FuncCall ("OraclePrelude","==") [Var 9,Lit (Charc '-'),Var 16],Var 17],Var 18]]))]])),Func ("OracleCurryStringClassifier","_case_64") 9 Private (TVar (-42)) (Rule [2,4,6,8,9,10,11,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 15) [Branch (Pattern ("Prelude","True") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Let [(12,Comb FuncCall ("OraclePrelude","span") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Lit (Charc '\n')]],Var 10,Var 1])] (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Let [(13,Comb FuncCall ("OracleCurryStringClassifier","stateScan._#selFP9#comment") [Var 12,Var 16])] (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Let [(14,Comb FuncCall ("OracleCurryStringClassifier","stateScan._#selFP10#rest") [Var 12,Var 17])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 18],Comb FuncCall ("OracleCurryStringClassifier","maybeCode") [Var 8,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","SmallComment") [Var 13],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Var 14,Var 19]],Var 20],Var 21]]))]))]))])),Branch (Pattern ("Prelude","False") []) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCurryStringClassifier","_case_63") [Var 2,Var 4,Var 6,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '{'),Var 1],Comb FuncCall ("OraclePrelude","==") [Var 9,Lit (Charc '-'),Var 22],Var 23],Var 24]]))]])),Func ("OracleCurryStringClassifier","_case_63") 9 Private (TVar (-42)) (Rule [2,4,6,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb FuncCall ("OracleCurryStringClassifier","maybeCode") [Var 8,Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","BigComment") [Var 11],Var 11,Var 10,Var 13],Var 14],Var 15]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCurryStringClassifier","_case_62") [Var 2,Var 4,Var 6,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '{'),Var 1],Comb FuncCall ("OraclePrelude","==") [Var 9,Lit (Charc '+'),Var 16],Var 17],Var 18]]))]])),Func ("OracleCurryStringClassifier","_case_62") 9 Private (TVar (-42)) (Rule [2,4,6,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude","[]") [],Var 1],Comb FuncCall ("OracleCurryStringClassifier","maybeCode") [Var 8,Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Meta") [Var 11],Var 11,Var 10,Var 13],Var 14],Var 15]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OracleCurryStringClassifier","_case_61") [Var 2,Var 4,Var 6,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 9,Lit (Charc '\''),Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Var 6,Var 16],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleCurryStringClassifier","infixIDs") [Var 17],Comb FuncCall ("OracleCurryStringClassifier","delimiters") [Var 18],Var 19],Var 20],Var 21],Var 22]]))]])),Func ("OracleCurryStringClassifier","_case_61") 9 Private (TVar (-42)) (Rule [2,4,6,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleCurryStringClassifier","maybeCode") [Var 8]],Comb FuncCall ("OracleCurryStringClassifier","_case_60") [Var 2,Var 11,Var 10,Var 13],Var 14],Var 15]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_45") [Var 2,Var 4,Var 6,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","==") [Var 6,Lit (Charc '\n'),Var 1],Var 16]]))]])),Func ("OracleCurryStringClassifier","_case_45") 9 Private (TVar (-42)) (Rule [2,4,6,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Var 11],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Comb FuncCall ("OraclePrelude","+") [Var 2,Lit (Intc 1),Var 13],Comb ConsCall ("CurryStringClassifier","Code") [Var 8],Var 11,Comb ConsCall ("Prelude",":") [Var 9,Var 10],Var 14],Var 15]])),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_44") [Var 2,Var 4,Var 6,Var 8,Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 16]]))]])),Func ("OracleCurryStringClassifier","_case_44") 9 Private (TVar (-42)) (Rule [2,4,6,8,9,10,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","&>") [Comb FuncCall ("OraclePrelude","=:=") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Var 11],Var 1],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 8],Var 11,Comb ConsCall ("Prelude",":") [Var 9,Var 10],Var 13],Var 14]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCurryStringClassifier","_case_60") 4 Private (TVar (-42)) (Rule [2,11,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_59") [Var 2,Var 11,Var 15,Var 16,Comb FuncCall ("OraclePrelude","==") [Var 15,Lit (Charc '\\'),Var 1],Var 17]])),Branch (Pattern ("Prelude","[]") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 18],Var 19]]))]])),Func ("OracleCurryStringClassifier","_case_59") 6 Private (TVar (-42)) (Rule [2,11,15,16,17,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 17) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_58") [Var 2,Var 11,Var 15,Var 16,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_47") [Var 2,Var 11,Var 15,Var 16,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_47") 5 Private (TVar (-42)) (Rule [2,11,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [25,26]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_46") [Var 2,Var 11,Var 15,Var 25,Var 26,Comb FuncCall ("OraclePrelude","==") [Var 25,Lit (Charc '\''),Var 1],Var 27]])),Branch (Pattern ("Prelude","[]") []) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 28],Var 29]]))]])),Func ("OracleCurryStringClassifier","_case_46") 7 Private (TVar (-42)) (Rule [2,11,15,25,26,27,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 27) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Var 26,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 28],Var 29]]))]])),Func ("OracleCurryStringClassifier","_case_58") 5 Private (TVar (-42)) (Rule [2,11,15,16,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_57") [Var 2,Var 11,Var 15,Var 17,Var 18,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 19],Var 20]]))]])),Func ("OracleCurryStringClassifier","_case_57") 6 Private (TVar (-42)) (Rule [2,11,15,17,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_56") [Var 2,Var 11,Var 15,Var 17,Var 18,Var 19,Var 20,Comb FuncCall ("OraclePrelude","==") [Var 19,Lit (Charc '\''),Var 1],Var 21]])),Branch (Pattern ("Prelude","[]") []) (Let [(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_48") [Var 2,Var 11,Var 15,Var 17,Comb FuncCall ("OraclePrelude","==") [Var 17,Lit (Charc '\''),Var 1],Var 22]]))]])),Func ("OracleCurryStringClassifier","_case_48") 6 Private (TVar (-42)) (Rule [2,11,15,17,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Comb ConsCall ("Prelude","[]") [],Var 1]]]),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 19],Var 20]]))]])),Func ("OracleCurryStringClassifier","_case_56") 9 Private (TVar (-42)) (Rule [2,11,15,17,18,19,20,21,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 21) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Var 20,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_55") [Var 2,Var 11,Var 15,Var 17,Var 18,Var 19,Var 20,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_55") 8 Private (TVar (-42)) (Rule [2,11,15,17,18,19,20,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_54") [Var 2,Var 11,Var 15,Var 17,Var 18,Var 19,Var 21,Var 22,Var 1]]),Branch (Pattern ("Prelude","[]") []) (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_49") [Var 2,Var 11,Var 15,Var 17,Var 18,Comb FuncCall ("OraclePrelude","==") [Var 17,Lit (Charc '\''),Var 1],Var 23]]))]])),Func ("OracleCurryStringClassifier","_case_49") 7 Private (TVar (-42)) (Rule [2,11,15,17,18,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Var 18,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 20],Var 21]]))]])),Func ("OracleCurryStringClassifier","_case_54") 9 Private (TVar (-42)) (Rule [2,11,15,17,18,19,21,22,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_53") [Var 2,Var 11,Var 15,Var 17,Var 18,Var 19,Var 21,Var 23,Var 24,Comb FuncCall ("OraclePrelude","==") [Var 23,Lit (Charc '\''),Var 1],Var 25]])),Branch (Pattern ("Prelude","[]") []) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_50") [Var 2,Var 11,Var 15,Var 17,Var 18,Comb FuncCall ("OraclePrelude","==") [Var 17,Lit (Charc '\''),Var 1],Var 26]]))]])),Func ("OracleCurryStringClassifier","_case_50") 7 Private (TVar (-42)) (Rule [2,11,15,17,18,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Var 18,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 20],Var 21]]))]])),Func ("OracleCurryStringClassifier","_case_53") 11 Private (TVar (-42)) (Rule [2,11,15,17,18,19,21,23,24,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 25) [Branch (Pattern ("Prelude","True") []) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","_case_52") [Var 2,Var 11,Var 17,Var 19,Var 21,Var 24,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","all") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleChar","isDigit") []],Var 1],Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]],Var 26],Var 27]])),Branch (Pattern ("Prelude","False") []) (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_51") [Var 2,Var 11,Var 15,Var 17,Var 18,Comb FuncCall ("OraclePrelude","==") [Var 17,Lit (Charc '\''),Var 1],Var 28]]))]])),Func ("OracleCurryStringClassifier","_case_51") 7 Private (TVar (-42)) (Rule [2,11,15,17,18,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Var 18,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 20],Var 21]]))]])),Func ("OracleCurryStringClassifier","_case_52") 8 Private (TVar (-42)) (Rule [2,11,17,19,21,24,25,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 25) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleCurryStringClassifier","stateScan") [Var 2,Comb ConsCall ("CurryStringClassifier","Code") [Var 11],Var 11,Var 24,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","error") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 26],Var 27]]))]])),Func ("OracleCurryStringClassifier","_case_75") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_74") [Var 4,Var 3,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_74") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_73") [Var 4,Var 1]]),Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_71") [Var 4,Var 9,Var 10,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_71") 4 Private (TVar (-42)) (Rule [4,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_70") [Var 9,Var 10,Var 4,Var 1]]),Branch (Pattern ("Prelude",":") [13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_69") [Var 9,Var 13,Var 14,Var 4,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_69") 5 Private (TVar (-42)) (Rule [9,13,14,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 15,Comb FuncCall ("OracleCurryStringClassifier","weave") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 13,Var 14],Var 16],Var 1]]]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCurryStringClassifier","_case_70") 4 Private (TVar (-42)) (Rule [9,10,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [11,12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 11,Comb FuncCall ("OracleCurryStringClassifier","weave") [Comb ConsCall ("Prelude","(,)") [Var 10,Var 12],Var 1]]]])]])),Func ("OracleCurryStringClassifier","_case_73") 2 Private (TVar (-42)) (Rule [4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleCurryStringClassifier","_case_72") [Var 5,Var 6,Var 1]])]])),Func ("OracleCurryStringClassifier","_case_72") 3 Private (TVar (-42)) (Rule [5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleCurryStringClassifier","_case_76") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleCurryStringClassifier","_case_77") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCurryStringClassifier","_case_79") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [3,4]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleCurryStringClassifier","unweaveCode") [Var 4,Var 1])] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleCurryStringClassifier","unweaveCode._#selFP6#cs") [Var 5,Var 8])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleCurryStringClassifier","unweaveCode._#selFP7#ncs") [Var 5,Var 9])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleCurryStringClassifier","_case_78") [Var 3,Var 6,Var 7,Comb FuncCall ("OracleCurryStringClassifier","isCode") [Var 3,Var 10],Var 11]]))]))]))]))]])),Func ("OracleCurryStringClassifier","_case_78") 5 Private (TVar (-42)) (Rule [3,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 6,Comb ConsCall ("Prelude",":") [Var 3,Var 7]]])]])),Func ("OracleCurryStringClassifier","_case_80") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleCurryStringClassifier","_case_81") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleCurryStringClassifier","_case_82") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CurryStringClassifier","Meta") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CurryStringClassifier","SmallComment") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","BigComment") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Text") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Letter") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Code") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleCurryStringClassifier","_case_83") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CurryStringClassifier","ModuleHead") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CurryStringClassifier","SmallComment") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","BigComment") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Text") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Letter") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Code") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Meta") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleCurryStringClassifier","_case_84") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CurryStringClassifier","Code") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CurryStringClassifier","SmallComment") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","BigComment") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Text") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Letter") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Meta") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleCurryStringClassifier","_case_85") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CurryStringClassifier","Letter") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CurryStringClassifier","SmallComment") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","BigComment") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Text") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Code") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Meta") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleCurryStringClassifier","_case_86") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CurryStringClassifier","Text") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CurryStringClassifier","SmallComment") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","BigComment") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Letter") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Code") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Meta") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleCurryStringClassifier","_case_87") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CurryStringClassifier","BigComment") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CurryStringClassifier","SmallComment") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Text") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Letter") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Code") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Meta") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]])),Func ("OracleCurryStringClassifier","_case_88") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("CurryStringClassifier","SmallComment") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","True") []]),Branch (Pattern ("CurryStringClassifier","BigComment") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Text") [5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Letter") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Code") [7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("CurryStringClassifier","Meta") [9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","False") []])]]))] []