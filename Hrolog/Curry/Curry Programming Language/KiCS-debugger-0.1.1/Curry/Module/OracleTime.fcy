Prog "OracleTime" ["CEventOracle","Oracle","IOExts","Time","Prelude","OraclePrelude"] [] [Func ("OracleTime","ctYear") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_38") [Var 2,Var 1]])),Func ("OracleTime","ctMonth") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_37") [Var 2,Var 1]])),Func ("OracleTime","ctDay") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_36") [Var 2,Var 1]])),Func ("OracleTime","ctHour") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_35") [Var 2,Var 1]])),Func ("OracleTime","ctMin") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_34") [Var 2,Var 1]])),Func ("OracleTime","ctSec") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_33") [Var 2,Var 1]])),Func ("OracleTime","ctTZ") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_32") [Var 2,Var 1]])),Func ("OracleTime","getLocalTime") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Time","CalendarTime") []])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle",">>=") [Comb FuncCall ("OracleTime","getClockTime") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleTime","getLocalTime._#lambda2") []],Var 2]]))),Func ("OracleTime","getLocalTime._#lambda2") 2 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Time","CalendarTime") []]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","toCalendarTime") [Var 2,Var 1]])),Func ("OracleTime","clockTimeToInt") 2 Public (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_31") [Var 2,Var 1]])),Func ("OracleTime","toCalendarTime") 2 Public (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Time","CalendarTime") []]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","$##") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleTime","prim_toCalendarTime") []],Var 2,Var 1]])),Func ("OracleTime","toUTCTime") 2 Public (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","CalendarTime") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","$##") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleTime","prim_toUTCTime") []],Var 2,Var 1]])),Func ("OracleTime","toClockTime") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","$##") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleTime","prim_toClockTime") []],Var 2,Var 1]])),Func ("OracleTime","calendarTimeToString") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_30") [Var 2,Var 1]])),Func ("OracleTime","toDayString") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_29") [Var 2,Var 1]])),Func ("OracleTime","toTimeString") 2 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_28") [Var 2,Var 1]])),Func ("OracleTime","toTimeString.digit2.90") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","_case_27") [Var 2,Comb FuncCall ("OraclePrelude","<") [Var 2,Lit (Intc 10),Var 1],Var 3]]))),Func ("OracleTime","addSeconds") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_26") [Var 2,Var 3,Var 1]])),Func ("OracleTime","addMinutes") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_25") [Var 2,Var 3,Var 1]])),Func ("OracleTime","addHours") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_24") [Var 2,Var 3,Var 1]])),Func ("OracleTime","addDays") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_23") [Var 2,Var 3,Var 1]])),Func ("OracleTime","addMonths") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") [])))) (Rule [2,3,1] (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OracleTime","toUTCTime") [Var 3,Var 1])] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleTime","addMonths._#selFP3#y") [Var 4,Var 13])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleTime","addMonths._#selFP4#mo") [Var 4,Var 14])] (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleTime","addMonths._#selFP5#d") [Var 4,Var 15])] (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleTime","addMonths._#selFP6#h") [Var 4,Var 16])] (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleTime","addMonths._#selFP7#mi") [Var 4,Var 17])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Let [(10,Comb FuncCall ("OracleTime","addMonths._#selFP8#s") [Var 4,Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OracleTime","addMonths._#selFP9#tz") [Var 4,Var 19])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []]]]],Let [(12,Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","mod") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","-") [Var 6,Lit (Intc 1),Var 20],Var 2,Var 21],Lit (Intc 12),Var 22],Lit (Intc 1),Var 23])] (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","_case_22") [Var 2,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Comb FuncCall ("OraclePrelude",">") [Var 12,Lit (Intc 0),Var 24],Var 25]]))]))]))]))]))]))]))]))]))]))),Func ("OracleTime","addMonths._#selFP3#y") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_21") [Var 2,Var 1]])),Func ("OracleTime","addMonths._#selFP4#mo") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_20") [Var 2,Var 1]])),Func ("OracleTime","addMonths._#selFP5#d") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_19") [Var 2,Var 1]])),Func ("OracleTime","addMonths._#selFP6#h") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_18") [Var 2,Var 1]])),Func ("OracleTime","addMonths._#selFP7#mi") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_17") [Var 2,Var 1]])),Func ("OracleTime","addMonths._#selFP8#s") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_16") [Var 2,Var 1]])),Func ("OracleTime","addMonths._#selFP9#tz") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_15") [Var 2,Var 1]])),Func ("OracleTime","addYears") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","_case_14") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","==") [Var 2,Lit (Intc 0),Var 1],Var 4]]))),Func ("OracleTime","addYears._#selFP11#y") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_13") [Var 2,Var 1]])),Func ("OracleTime","addYears._#selFP12#mo") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_12") [Var 2,Var 1]])),Func ("OracleTime","addYears._#selFP13#d") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_11") [Var 2,Var 1]])),Func ("OracleTime","addYears._#selFP14#h") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_10") [Var 2,Var 1]])),Func ("OracleTime","addYears._#selFP15#mi") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_9") [Var 2,Var 1]])),Func ("OracleTime","addYears._#selFP16#s") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_8") [Var 2,Var 1]])),Func ("OracleTime","addYears._#selFP17#tz") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_7") [Var 2,Var 1]])),Func ("OracleTime","daysOfMonth") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","_case_6") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","/=") [Var 2,Lit (Intc 2),Var 1],Var 4]]))),Func ("OracleTime","validDate") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude",">") [Var 3,Lit (Intc 0),Var 1],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","<") [Var 3,Lit (Intc 13),Var 5],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude",">") [Var 4,Lit (Intc 0),Var 6],Comb FuncCall ("OraclePrelude","<=") [Var 4,Comb FuncCall ("OracleTime","daysOfMonth") [Var 3,Var 2,Var 7],Var 8],Var 9],Var 10],Var 11]]))),Func ("OracleTime","compareDate") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Ordering") [])))))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleTime","compareCalendarTime") []]])),Func ("OracleTime","compareCalendarTime") 3 Public (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Ordering") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleTime","compareClockTime") [Comb FuncCall ("OracleTime","toClockTime") [Var 2,Var 1],Comb FuncCall ("OracleTime","toClockTime") [Var 3,Var 4],Var 5]]))),Func ("OracleTime","compareClockTime") 3 Public (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Ordering") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_4") [Var 3,Var 2,Var 1]])),Func ("OracleTime","_case_4") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CTime") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleTime","_case_3") [Var 4,Var 3,Var 1]])]])),Func ("OracleTime","_case_3") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Time","CTime") [5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","_case_2") [Var 4,Var 5,Comb FuncCall ("OraclePrelude","<") [Var 4,Var 5,Var 1],Var 6]]))]])),Func ("OracleTime","_case_2") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","LT") []]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","_case_1") [Var 4,Var 5,Comb FuncCall ("OraclePrelude",">") [Var 4,Var 5,Var 1],Var 7]]))]])),Func ("OracleTime","_case_1") 4 Private (TVar (-42)) (Rule [4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","GT") []]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","_case_0") [Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 7]]))]])),Func ("OracleTime","_case_0") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","EQ") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleTime","_case_6") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","!!") [Comb ConsCall ("Prelude",":") [Lit (Intc 31),Comb ConsCall ("Prelude",":") [Lit (Intc 28),Comb ConsCall ("Prelude",":") [Lit (Intc 31),Comb ConsCall ("Prelude",":") [Lit (Intc 30),Comb ConsCall ("Prelude",":") [Lit (Intc 31),Comb ConsCall ("Prelude",":") [Lit (Intc 30),Comb ConsCall ("Prelude",":") [Lit (Intc 31),Comb ConsCall ("Prelude",":") [Lit (Intc 31),Comb ConsCall ("Prelude",":") [Lit (Intc 30),Comb ConsCall ("Prelude",":") [Lit (Intc 31),Comb ConsCall ("Prelude",":") [Lit (Intc 30),Comb ConsCall ("Prelude",":") [Lit (Intc 31),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","-") [Var 2,Lit (Intc 1),Var 1],Var 5]])),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("OracleTime","_case_5") [Var 3,Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","mod") [Var 3,Lit (Intc 4),Var 1],Lit (Intc 0),Var 6],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","/=") [Comb FuncCall ("OraclePrelude","mod") [Var 3,Lit (Intc 100),Var 7],Lit (Intc 0),Var 8],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("OraclePrelude","mod") [Var 3,Lit (Intc 400),Var 9],Lit (Intc 0),Var 10],Var 11],Var 12],Var 13]]))]])),Func ("OracleTime","_case_5") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Lit (Intc 29)]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Lit (Intc 28)])]])),Func ("OracleTime","_case_7") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 9])]])),Func ("OracleTime","_case_8") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8])]])),Func ("OracleTime","_case_9") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleTime","_case_10") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleTime","_case_11") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleTime","_case_12") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleTime","_case_13") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleTime","_case_14") 4 Private (TVar (-42)) (Rule [2,3,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OracleTime","toUTCTime") [Var 3,Var 1])] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleTime","addYears._#selFP11#y") [Var 4,Var 13])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleTime","addYears._#selFP12#mo") [Var 4,Var 14])] (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleTime","addYears._#selFP13#d") [Var 4,Var 15])] (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleTime","addYears._#selFP14#h") [Var 4,Var 16])] (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleTime","addYears._#selFP15#mi") [Var 4,Var 17])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Let [(10,Comb FuncCall ("OracleTime","addYears._#selFP16#s") [Var 4,Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OracleTime","addYears._#selFP17#tz") [Var 4,Var 19])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","toClockTime") [Comb ConsCall ("Time","CalendarTime") [Comb FuncCall ("OraclePrelude","+") [Var 5,Var 2,Var 20],Var 6,Var 7,Var 8,Var 9,Var 10,Var 11],Var 21]]))]))]))]))]))]))]))]))]))]])),Func ("OracleTime","_case_15") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 9])]])),Func ("OracleTime","_case_16") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8])]])),Func ("OracleTime","_case_17") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleTime","_case_18") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleTime","_case_19") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleTime","_case_20") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleTime","_case_21") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleTime","_case_22") 11 Private (TVar (-42)) (Rule [2,5,6,7,8,9,10,11,12,13,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleTime","addYears") [Comb FuncCall ("OraclePrelude","div") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","-") [Var 6,Lit (Intc 1),Var 1],Var 2,Var 14],Lit (Intc 12),Var 15],Comb FuncCall ("OracleTime","toClockTime") [Comb ConsCall ("Time","CalendarTime") [Var 5,Var 12,Var 7,Var 8,Var 9,Var 10,Var 11],Var 16],Var 17]])),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OracleTime","addYears") [Comb FuncCall ("OraclePrelude","-") [Comb FuncCall ("OraclePrelude","div") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","-") [Var 6,Lit (Intc 1),Var 1],Var 2,Var 18],Lit (Intc 12),Var 19],Lit (Intc 1),Var 20],Comb FuncCall ("OracleTime","toClockTime") [Comb ConsCall ("Time","CalendarTime") [Var 5,Comb FuncCall ("OraclePrelude","+") [Var 12,Lit (Intc 12),Var 21],Var 7,Var 8,Var 9,Var 10,Var 11],Var 22],Var 23]]))]])),Func ("OracleTime","_case_23") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Time","CTime") [4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Time","CTime") [Comb FuncCall ("OraclePrelude","+") [Var 4,Comb FuncCall ("OraclePrelude","*") [Var 2,Lit (Intc 86400),Var 1],Var 5]]]))]])),Func ("OracleTime","_case_24") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Time","CTime") [4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Time","CTime") [Comb FuncCall ("OraclePrelude","+") [Var 4,Comb FuncCall ("OraclePrelude","*") [Var 2,Lit (Intc 3600),Var 1],Var 5]]]))]])),Func ("OracleTime","_case_25") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Time","CTime") [4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Time","CTime") [Comb FuncCall ("OraclePrelude","+") [Var 4,Comb FuncCall ("OraclePrelude","*") [Var 2,Lit (Intc 60),Var 1],Var 5]]]))]])),Func ("OracleTime","_case_26") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Time","CTime") [4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Time","CTime") [Comb FuncCall ("OraclePrelude","+") [Var 4,Var 2,Var 1]]])]])),Func ("OracleTime","_case_27") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc '0'),Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","chr") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","ord") [Lit (Charc '0'),Var 1],Var 2,Var 4],Var 5],Comb ConsCall ("Prelude","[]") []]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1]])]])),Func ("OracleTime","_case_28") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleTime","toTimeString.digit2.90") [Var 6,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleTime","toTimeString.digit2.90") [Var 7,Var 10],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleTime","toTimeString.digit2.90") [Var 8,Var 11],Var 12],Var 13],Var 14],Var 15]]))]])),Func ("OracleTime","_case_29") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(10,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","!!") [Var 10,Comb FuncCall ("OraclePrelude","-") [Var 4,Lit (Intc 1),Var 1],Var 11],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 5,Var 12],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","show") [Var 3,Var 13],Var 14],Var 15],Var 16],Var 17]]))])]])),Func ("OracleTime","_case_30") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(10,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","!!") [Var 10,Comb FuncCall ("OraclePrelude","-") [Var 4,Lit (Intc 1),Var 1],Var 11],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 5,Var 12],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OracleTime","toTimeString") [Var 2,Var 13],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","show") [Var 3,Var 14],Var 15],Var 16],Var 17],Var 18],Var 19],Var 20]]))])]])),Func ("OracleTime","_case_31") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CTime") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleTime","_case_32") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 9])]])),Func ("OracleTime","_case_33") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8])]])),Func ("OracleTime","_case_34") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 7])]])),Func ("OracleTime","_case_35") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleTime","_case_36") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleTime","_case_37") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleTime","_case_38") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Time","CalendarTime") [3,4,5,6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleTime","getClockTime") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Time","ClockTime") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","lambda_world") [Comb FuncCall ("Oracle","safeIOResult") [Comb FuncCall ("Time","getClockTime") []]]])),Func ("OracleTime","prim_toCalendarTime") 2 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","IO") [TCons ("Time","CalendarTime") []]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","lambda_world") [Comb FuncCall ("Oracle","safeIOResult") [Comb FuncCall ("Time","prim_toCalendarTime") [Var 2]]]])),Func ("OracleTime","prim_toUTCTime") 2 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","CalendarTime") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb FuncCall ("Time","prim_toUTCTime") [Var 2]])),Func ("OracleTime","prim_toClockTime") 2 Private (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Time","ClockTime") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb FuncCall ("Time","prim_toClockTime") [Var 2]]))] []