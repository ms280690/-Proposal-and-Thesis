Prog "OracleGraphInductive" ["CEventOracle","Oracle","IOExts","GraphInductive","FiniteMap","Maybe","Prelude","Sort","OracleFiniteMap","OracleMaybe","OraclePrelude","OracleSort"] [TypeSyn ("OracleGraphInductive","GDecomp") Public [0,1] (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]),TypeSyn ("OracleGraphInductive","Decomp") Public [0,1] (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]),TypeSyn ("OracleGraphInductive","GraphRep") Private [0,1] (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]]),TypeSyn ("OracleGraphInductive","UGr") Public [] (TCons ("GraphInductive","Graph") [TCons ("Prelude","()") [],TCons ("Prelude","()") []]),Type ("OracleGraphInductive","Graph") Public [0,1] [Cons ("OracleGraphInductive","Gr") 1 Private [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]]]]] [Func ("OracleGraphInductive",":&") 3 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_99") [Var 3,Var 2,Var 1]])),Func ("OracleGraphInductive","matchAny") 2 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]],TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_95") [Var 2,Var 1]])),Func ("OracleGraphInductive","empty") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleGraphInductive","Gr") [Comb FuncCall ("OracleFiniteMap","emptyFM") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","<") []],Var 1]]])),Func ("OracleGraphInductive","mkGraph") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","insEdges") [Var 3]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","insNodes") [Var 2]],Var 1],Comb FuncCall ("OracleGraphInductive","empty") [Var 4],Var 5]]))),Func ("OracleGraphInductive","buildGr") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]]) (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive",":&") []],Comb FuncCall ("OracleGraphInductive","empty") [Var 1]]]])),Func ("OracleGraphInductive","mkUGraph") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TCons ("Prelude","()") [],TCons ("Prelude","()") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OracleGraphInductive","mkGraph") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","labUNodes") [Var 1],Var 2,Var 4],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","labUEdges") [Var 5],Var 3,Var 6],Var 7]]))),Func ("OracleGraphInductive","insNode") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_89") [Var 2,Var 1]])),Func ("OracleGraphInductive","insEdge") 3 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_88") [Var 3,Var 2,Var 1]])),Func ("OracleGraphInductive","insEdge._#selFP3#pr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("OracleGraphInductive","Graph") [TVar 212,TVar 213]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_87") [Var 2,Var 1]])),Func ("OracleGraphInductive","insEdge._#selFP4#la") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("OracleGraphInductive","Graph") [TVar 212,TVar 213]]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 212))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_84") [Var 2,Var 1]])),Func ("OracleGraphInductive","insEdge._#selFP5#su") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("OracleGraphInductive","Graph") [TVar 212,TVar 213]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_81") [Var 2,Var 1]])),Func ("OracleGraphInductive","insEdge._#selFP6#g'") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("OracleGraphInductive","Graph") [TVar 212,TVar 213]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 212,TVar 213]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_78") [Var 2,Var 1]])),Func ("OracleGraphInductive","delNode") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","delNodes") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]]])),Func ("OracleGraphInductive","delEdge") 3 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_75") [Var 3,Var 2,Var 1]])),Func ("OracleGraphInductive","insNodes") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","foldr") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","insNode") []],Var 3,Var 2,Var 1]])),Func ("OracleGraphInductive","insEdges") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","insEdge") []],Var 3,Var 2,Var 1]])),Func ("OracleGraphInductive","delNodes") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_71") [Var 3,Var 2,Var 1]])),Func ("OracleGraphInductive","delEdges") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","delEdge") []],Var 3,Var 2,Var 1]])),Func ("OracleGraphInductive","isEmpty") 2 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_70") [Var 2,Var 1]])),Func ("OracleGraphInductive","match") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]],TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_69") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","match._#lambda5") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("OracleFiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]],TVar 148,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]]]],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]],TVar 148,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]]]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 148,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]]]],TCons ("OracleGraphInductive","Graph") [TVar 148,TVar 146]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_68") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","noNodes") 2 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_65") [Var 2,Var 1]])),Func ("OracleGraphInductive","nodeRange") 2 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_64") [Var 2,Var 1]])),Func ("OracleGraphInductive","context") 3 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_61") [Var 2,Var 3,Comb FuncCall ("OracleGraphInductive","match") [Var 3,Var 2,Var 1],Var 4]]))),Func ("OracleGraphInductive","lab") 3 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleMaybe",">>-") [Comb FuncCall ("OraclePrelude","fst") [Comb FuncCall ("OracleGraphInductive","match") [Var 3,Var 2,Var 1],Var 4],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("Prelude","Just") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","lab'") []],Var 5],Var 6]]))),Func ("OracleGraphInductive","neighbors") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","neighbors._#lambda7") []],Var 2],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","context") []],Var 3]]))),Func ("OracleGraphInductive","neighbors._#lambda7") 2 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 416,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 415,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 416,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_59") [Var 2,Var 1]])),Func ("OracleGraphInductive","suc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []]]],Var 2],Comb FuncCall ("OracleGraphInductive","context4") [Var 3],Var 4]]))),Func ("OracleGraphInductive","pre") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []]]],Var 2],Comb FuncCall ("OracleGraphInductive","context1") [Var 3],Var 4]]))),Func ("OracleGraphInductive","lsuc") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","flip2") []]]],Var 2],Comb FuncCall ("OracleGraphInductive","context4") [Var 3],Var 4]]))),Func ("OracleGraphInductive","lpre") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","flip2") []]]],Var 2],Comb FuncCall ("OracleGraphInductive","context1") [Var 3],Var 4]]))),Func ("OracleGraphInductive","out") 3 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","out._#lambda8") [Var 3]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","context4") [Var 1],Var 2,Var 4],Var 3,Var 5],Var 6]]))),Func ("OracleGraphInductive","out._#lambda8") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 511,TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 511])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_58") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","inn") 3 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","inn._#lambda9") [Var 3]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","context1") [Var 1],Var 2,Var 4],Var 3,Var 5],Var 6]]))),Func ("OracleGraphInductive","inn._#lambda9") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 521,TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 521])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_57") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","outdeg") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","length") []],Var 2],Comb FuncCall ("OracleGraphInductive","context4") [Var 3],Var 4]]))),Func ("OracleGraphInductive","indeg") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","length") []],Var 2],Comb FuncCall ("OracleGraphInductive","context1") [Var 3],Var 4]]))),Func ("OracleGraphInductive","deg") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","deg._#lambda10") []],Var 2],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","context") []],Var 3]]))),Func ("OracleGraphInductive","deg._#lambda10") 2 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 553,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 552,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 553,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_56") [Var 2,Var 1]])),Func ("OracleGraphInductive","gelem") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleMaybe","isJust") [Comb FuncCall ("OraclePrelude","fst") [Comb FuncCall ("OracleGraphInductive","match") [Var 2,Var 3,Var 1],Var 4],Var 5]]))),Func ("OracleGraphInductive","equal") 3 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","slabNodes") [Var 1],Var 2,Var 4],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","slabNodes") [Var 5],Var 3,Var 6],Var 7],Comb FuncCall ("OraclePrelude","==") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","slabEdges") [Var 8],Var 2,Var 9],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","slabEdges") [Var 10],Var 3,Var 11],Var 12],Var 13]]))),Func ("OracleGraphInductive","nodeComp") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Ordering") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_55") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","==") [Var 2,Var 3,Var 1],Var 4]]))),Func ("OracleGraphInductive","slabNodes") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OracleGraphInductive","sortBy") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","nodeComp") []],Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labNodes") []],Var 2]]))),Func ("OracleGraphInductive","edgeComp") 3 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Ordering") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Let [(4,Var 2)] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleGraphInductive","edgeComp._#selFP11#v") [Var 4,Var 1])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleGraphInductive","edgeComp._#selFP12#w") [Var 4,Var 10])] (Comb FuncCall ("CEventOracle","replace") [Var 11,Let [(7,Var 3)] (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleGraphInductive","edgeComp._#selFP9#x") [Var 7,Var 11])] (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleGraphInductive","edgeComp._#selFP10#y") [Var 7,Var 12])] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_52") [Var 2,Var 3,Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("OraclePrelude","==") [Var 2,Var 3,Var 13],Var 14]]))]))]))])]))]))])),Func ("OracleGraphInductive","edgeComp._#selFP11#v") 2 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_49") [Var 2,Var 1]])),Func ("OracleGraphInductive","edgeComp._#selFP12#w") 2 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_48") [Var 2,Var 1]])),Func ("OracleGraphInductive","edgeComp._#selFP9#x") 2 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_47") [Var 2,Var 1]])),Func ("OracleGraphInductive","edgeComp._#selFP10#y") 2 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_46") [Var 2,Var 1]])),Func ("OracleGraphInductive","slabEdges") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OracleGraphInductive","sortBy") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","edgeComp") []],Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labEdges") []],Var 2]]))),Func ("OracleGraphInductive","node'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_45") [Var 2,Var 1]])),Func ("OracleGraphInductive","lab'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 1))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_44") [Var 2,Var 1]])),Func ("OracleGraphInductive","labNode'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_43") [Var 2,Var 1]])),Func ("OracleGraphInductive","neighbors'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_42") [Var 2,Var 1]])),Func ("OracleGraphInductive","suc'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_41") [Var 2,Var 1]])),Func ("OracleGraphInductive","pre'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_40") [Var 2,Var 1]])),Func ("OracleGraphInductive","lpre'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_39") [Var 2,Var 1]])),Func ("OracleGraphInductive","lsuc'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_38") [Var 2,Var 1]])),Func ("OracleGraphInductive","out'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_37") [Var 2,Var 1]])),Func ("OracleGraphInductive","out'._#lambda11") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 732,TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 732])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_36") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","inn'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_35") [Var 2,Var 1]])),Func ("OracleGraphInductive","inn'._#lambda12") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 742,TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 742])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_34") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","outdeg'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_33") [Var 2,Var 1]])),Func ("OracleGraphInductive","indeg'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_32") [Var 2,Var 1]])),Func ("OracleGraphInductive","deg'") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_31") [Var 2,Var 1]])),Func ("OracleGraphInductive","labNodes") 2 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_30") [Var 2,Var 1]])),Func ("OracleGraphInductive","labNodes._#lambda13") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 574,TCons ("Prelude","Int") []]],TVar 573,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 574,TCons ("Prelude","Int") []]]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 573]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_29") [Var 2,Var 1]])),Func ("OracleGraphInductive","labEdges") 2 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_27") [Var 2,Var 1]])),Func ("OracleGraphInductive","labEdges._#lambda14") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 620,TCons ("Prelude","Int") []]],TVar 619,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 620,TCons ("Prelude","Int") []]]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 620]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_26") [Var 2,Var 1]])),Func ("OracleGraphInductive","labEdges._#lambda14._#lambda15") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 620,TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 620])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_24") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","nodes") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","fst") []]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labNodes") []],Var 1]])),Func ("OracleGraphInductive","edges") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","edges._#lambda16") []]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labEdges") []],Var 1]])),Func ("OracleGraphInductive","edges._#lambda16") 2 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 788]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_23") [Var 2,Var 1]])),Func ("OracleGraphInductive","newNodes") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [2,3,1] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OracleGraphInductive","nodeRange") [Var 3,Var 1])] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleGraphInductive","newNodes._#selFP14#n") [Var 4,Var 6])] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","enumFromTo") [Comb FuncCall ("OraclePrelude","+") [Var 5,Lit (Intc 1),Var 7],Comb FuncCall ("OraclePrelude","+") [Var 5,Var 2,Var 8],Var 9]]))]))]))),Func ("OracleGraphInductive","newNodes._#selFP14#n") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Int") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_22") [Var 2,Var 1]])),Func ("OracleGraphInductive","ufold") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 2) (TVar 2))))) (FuncType (TVar 2) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 2))))) (Rule [2,3,4,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleGraphInductive","matchAny") [Var 4,Var 1])] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleGraphInductive","ufold._#selFP16#c") [Var 5,Var 8])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleGraphInductive","ufold._#selFP17#g'") [Var 5,Var 9])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_21") [Var 2,Var 3,Var 4,Var 6,Var 7,Comb FuncCall ("OracleGraphInductive","isEmpty") [Var 4,Var 10],Var 11]]))]))]))]))),Func ("OracleGraphInductive","ufold._#selFP16#c") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 806,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]]],TCons ("OracleGraphInductive","Graph") [TVar 806,TVar 807]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 806,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_19") [Var 2,Var 1]])),Func ("OracleGraphInductive","ufold._#selFP17#g'") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 806,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]]],TCons ("OracleGraphInductive","Graph") [TVar 806,TVar 807]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleGraphInductive","Graph") [TVar 806,TVar 807]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_18") [Var 2,Var 1]])),Func ("OracleGraphInductive","gmap") 2 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","Int") []]]]))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("OracleGraphInductive","Graph") [TVar 3,TVar 2]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","ufold") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","gmap._#lambda17") [Var 2]],Comb FuncCall ("OracleGraphInductive","empty") [Var 1]]]])),Func ("OracleGraphInductive","gmap._#lambda17") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 822,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 830,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 829,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 830,TCons ("Prelude","Int") []]]]))) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 822,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 829,TVar 830]) (TCons ("OracleGraphInductive","Graph") [TVar 829,TVar 830])))))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive",":&") [Comb FuncCall ("Oracle","apply") [Var 2,Var 3,Var 1]]]])),Func ("OracleGraphInductive","nmap") 2 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 2]) (TCons ("OracleGraphInductive","Graph") [TVar 1,TVar 2]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","gmap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","nmap._#lambda18") [Var 2]],Var 1]])),Func ("OracleGraphInductive","nmap._#lambda18") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 841) (TVar 844))) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 841,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 844,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_17") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","emap") 2 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 2,TVar 0]) (TCons ("OracleGraphInductive","Graph") [TVar 2,TVar 1]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","gmap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","emap._#lambda20") [Var 2]],Var 1]])),Func ("OracleGraphInductive","emap.map1.213") 2 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 2]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 2]]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","emap.map1.213._#lambda19") [Var 2]]]]])),Func ("OracleGraphInductive","emap.map1.213._#lambda19") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 853) (TVar 856))) (FuncType (TCons ("Prelude","(,)") [TVar 853,TVar 854]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TVar 856,TVar 854])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_16") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","emap._#lambda20") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 865) (TVar 866))) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 865,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 863,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 865,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 866,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 863,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 866,TCons ("Prelude","Int") []]]])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_15") [Var 2,Var 3,Var 1]])),Func ("OracleGraphInductive","labUEdges") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TCons ("Prelude","()") []]])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labUEdges._#lambda21") []]]]])),Func ("OracleGraphInductive","labUEdges._#lambda21") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 249,TVar 250]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TVar 249,TVar 250,TCons ("Prelude","()") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_14") [Var 2,Var 1]])),Func ("OracleGraphInductive","labUNodes") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","()") []]])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labUNodes._#lambda22") []]]]])),Func ("OracleGraphInductive","labUNodes._#lambda22") 2 Private (FuncType (TVar 254) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TVar 254,TCons ("Prelude","()") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","()") []]])),Func ("OracleGraphInductive","showGraph") 2 Public (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_13") [Var 2,Var 1]])),Func ("OracleGraphInductive","showNode") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","(,,)") [TVar 1,TVar 2,TVar 3]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_12") [Var 2,Var 1]])),Func ("OracleGraphInductive",".:") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 2) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 3) (TVar 0))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 2) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 3) (TVar 1)))))))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude",".") []],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude",".") []],Var 1]])),Func ("OracleGraphInductive","fst4") 2 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 0))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_10") [Var 2,Var 1]])),Func ("OracleGraphInductive","fth4") 2 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 3))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_9") [Var 2,Var 1]])),Func ("OracleGraphInductive","flip2") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TVar 1,TVar 0]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_8") [Var 2,Var 1]])),Func ("OracleGraphInductive","context1") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","fst4") []],Var 2],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","context") []],Var 3]]))),Func ("OracleGraphInductive","context4") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleGraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]])))))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive",".:") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","fth4") []],Var 2],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","context") []],Var 3]]))),Func ("OracleGraphInductive","addSucc") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_7") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleGraphInductive","addPred") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]],TVar 2,TVar 3]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]],TVar 2,TVar 3]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_6") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleGraphInductive","clearSucc") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 4,TVar 0]]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 4,TVar 0]]]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_5") [Var 2,Var 4,Var 1]])),Func ("OracleGraphInductive","clearPred") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TVar 0]],TVar 3,TVar 4]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TVar 0]],TVar 3,TVar 4]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_4") [Var 2,Var 4,Var 1]])),Func ("OracleGraphInductive","updAdj") 4 Private (FuncType (TCons ("OracleFiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]))))) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleFiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_3") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleGraphInductive","sortBy") 2 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleSort","mergeSort") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","sortBy._#lambda23") [Var 2]]]]])),Func ("OracleGraphInductive","sortBy._#lambda23") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 587) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 587) (TCons ("Prelude","Ordering") []))))) (FuncType (TVar 587) (FuncType (TVar 587) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","Bool") []))))) (Rule [2,3,4,1] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Let [(5,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 3,Var 1],Var 4,Var 6])] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude","EQ") [],Var 7],Comb FuncCall ("OraclePrelude","==") [Var 5,Comb ConsCall ("Prelude","LT") [],Var 8],Var 9]]))]))),Func ("OracleGraphInductive","_case_3") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_2") [Var 2,Var 4,Var 6,Var 5,Var 1]])]])),Func ("OracleGraphInductive","_case_2") 5 Private (TVar (-42)) (Rule [2,4,6,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_1") [Var 2,Var 4,Var 6,Var 7,Var 8,Comb FuncCall ("OracleFiniteMap","elemFM") [Var 8,Var 2,Var 1],Var 9]]))]])),Func ("OracleGraphInductive","_case_1") 7 Private (TVar (-42)) (Rule [2,4,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleGraphInductive","updAdj") [Comb FuncCall ("OracleFiniteMap","updFM") [Var 2,Var 8,Comb FuncCall ("Oracle","apply") [Var 4,Var 7,Var 1],Var 10],Var 6,Var 4,Var 11]])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_0") [Var 8,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 12]]))]])),Func ("OracleGraphInductive","_case_0") 3 Private (TVar (-42)) (Rule [8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","error") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 8,Var 1],Var 10],Var 11]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleGraphInductive","_case_4") 3 Private (TVar (-42)) (Rule [2,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Var 2]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 1],Var 5,Var 8],Var 6,Var 7]]))]])),Func ("OracleGraphInductive","_case_5") 3 Private (TVar (-42)) (Rule [2,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","(,,)") [Var 5,Var 6,Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Var 2]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 1],Var 7,Var 8]]]))]])),Func ("OracleGraphInductive","_case_6") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 2],Var 5],Var 6,Var 7]])]])),Func ("OracleGraphInductive","_case_7") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Var 5,Var 6,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 2],Var 7]]])]])),Func ("OracleGraphInductive","_case_8") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 4,Var 3]])]])),Func ("OracleGraphInductive","_case_9") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleGraphInductive","_case_10") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleGraphInductive","_case_12") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_11") [Var 3,Var 4,Var 1]])]])),Func ("OracleGraphInductive","_case_11") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 6,Var 8],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","show") [Var 7,Var 9],Var 10],Var 11],Var 12],Var 13]]))]])),Func ("OracleGraphInductive","_case_13") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleGraphInductive","Gr") [3]) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","unlines") [Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","showNode") []],Comb FuncCall ("OracleFiniteMap","fmToList") [Var 3,Var 1],Var 4],Var 5]]))]])),Func ("OracleGraphInductive","_case_14") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Var 3,Var 4,Comb ConsCall ("Prelude","()") []]])]])),Func ("OracleGraphInductive","_case_15") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,,,)") [4,5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,,,)") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","emap.map1.213") [Var 2,Var 1],Var 4,Var 8],Var 5,Var 6,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleGraphInductive","emap.map1.213") [Var 2,Var 9],Var 7,Var 10]]]))]])),Func ("OracleGraphInductive","_case_16") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Oracle","apply") [Var 2,Var 4,Var 1],Var 5]])]])),Func ("OracleGraphInductive","_case_17") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,,,)") [4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude","(,,,)") [Var 4,Var 5,Comb FuncCall ("Oracle","apply") [Var 2,Var 6,Var 1],Var 7]])]])),Func ("OracleGraphInductive","_case_18") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleGraphInductive","_case_19") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleGraphInductive","_case_21") 7 Private (TVar (-42)) (Rule [2,3,4,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_20") [Var 2,Var 3,Var 6,Var 7,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 9]]))]])),Func ("OracleGraphInductive","_case_20") 6 Private (TVar (-42)) (Rule [2,3,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 6,Var 1],Comb FuncCall ("OracleGraphInductive","ufold") [Var 2,Var 3,Var 7,Var 9],Var 10]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleGraphInductive","_case_22") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleGraphInductive","_case_23") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]])]])),Func ("OracleGraphInductive","_case_24") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Var 2,Var 5,Var 4]])]])),Func ("OracleGraphInductive","_case_26") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_25") [Var 3,Var 4,Var 1]])]])),Func ("OracleGraphInductive","_case_25") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labEdges._#lambda14._#lambda15") [Var 3]],Var 7,Var 1]])]])),Func ("OracleGraphInductive","_case_27") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleGraphInductive","Gr") [3]) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","concatMap") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labEdges._#lambda14") []],Var 1],Comb FuncCall ("OracleFiniteMap","fmToList") [Var 3,Var 4],Var 5]]))]])),Func ("OracleGraphInductive","_case_29") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_28") [Var 3,Var 4,Var 1]])]])),Func ("OracleGraphInductive","_case_28") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Var 6]])]])),Func ("OracleGraphInductive","_case_30") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleGraphInductive","Gr") [3]) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","labNodes._#lambda13") []],Comb FuncCall ("OracleFiniteMap","fmToList") [Var 3,Var 1],Var 4]]))]])),Func ("OracleGraphInductive","_case_31") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","length") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","length") [Var 6,Var 7],Var 8]]))]])),Func ("OracleGraphInductive","_case_32") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","length") [Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_33") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","length") [Var 6,Var 1]])]])),Func ("OracleGraphInductive","_case_34") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Var 5,Var 2,Var 4]])]])),Func ("OracleGraphInductive","_case_35") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","inn'._#lambda12") [Var 4]],Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_36") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Var 2,Var 5,Var 4]])]])),Func ("OracleGraphInductive","_case_37") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","out'._#lambda11") [Var 4]],Var 6,Var 1]])]])),Func ("OracleGraphInductive","_case_38") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","flip2") []],Var 6,Var 1]])]])),Func ("OracleGraphInductive","_case_39") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","flip2") []],Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_40") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_41") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 6,Var 1]])]])),Func ("OracleGraphInductive","_case_42") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 3,Var 1],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 6,Var 7],Var 8]]))]])),Func ("OracleGraphInductive","_case_43") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]])]])),Func ("OracleGraphInductive","_case_44") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5])]])),Func ("OracleGraphInductive","_case_45") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleGraphInductive","_case_46") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleGraphInductive","_case_47") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleGraphInductive","_case_48") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleGraphInductive","_case_49") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleGraphInductive","_case_52") 8 Private (TVar (-42)) (Rule [2,3,5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","EQ") []]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OracleGraphInductive","_case_51") [Var 5,Var 6,Var 8,Var 9,Comb FuncCall ("OraclePrelude","||") [Comb FuncCall ("OraclePrelude","<") [Var 5,Var 8,Var 1],Comb FuncCall ("OraclePrelude","&&") [Comb FuncCall ("OraclePrelude","==") [Var 5,Var 8,Var 11],Comb FuncCall ("OraclePrelude","<") [Var 6,Var 9,Var 12],Var 13],Var 14],Var 15]]))]])),Func ("OracleGraphInductive","_case_51") 6 Private (TVar (-42)) (Rule [5,6,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","LT") []]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_50") [Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 11]]))]])),Func ("OracleGraphInductive","_case_50") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","GT") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleGraphInductive","_case_55") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","EQ") []]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OracleGraphInductive","_case_54") [Var 2,Var 3,Comb FuncCall ("OraclePrelude","<") [Comb FuncCall ("OraclePrelude","fst") [Var 2,Var 1],Comb FuncCall ("OraclePrelude","fst") [Var 3,Var 5],Var 6],Var 7]]))]])),Func ("OracleGraphInductive","_case_54") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","LT") []]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_53") [Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 5]]))]])),Func ("OracleGraphInductive","_case_53") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","GT") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleGraphInductive","_case_56") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","length") [Var 3,Var 1],Comb FuncCall ("OraclePrelude","length") [Var 6,Var 7],Var 8]]))]])),Func ("OracleGraphInductive","_case_57") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Var 5,Var 2,Var 4]])]])),Func ("OracleGraphInductive","_case_58") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,,)") [Var 2,Var 5,Var 4]])]])),Func ("OracleGraphInductive","_case_59") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Comb FuncCall ("OraclePrelude","++") [Var 3,Var 6,Var 1],Var 7]]))]])),Func ("OracleGraphInductive","_case_61") 4 Private (TVar (-42)) (Rule [2,3,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_60") [Var 3,Var 4,Var 1]])]])),Func ("OracleGraphInductive","_case_60") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","error") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","show") [Var 3,Var 1],Var 7],Var 8]])),Branch (Pattern ("Prelude","Just") [6]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleGraphInductive","_case_64") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleGraphInductive","Gr") [3]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Let [(4,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","fst") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleMaybe","fromJust") []],Var 1])] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_63") [Var 3,Var 4,Comb FuncCall ("OracleFiniteMap","isEmptyFM") [Var 3,Var 5],Var 6]]))]))]])),Func ("OracleGraphInductive","_case_63") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Lit (Intc 0),Lit (Intc 0)]]),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_62") [Var 3,Var 4,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 6]]))]])),Func ("OracleGraphInductive","_case_62") 4 Private (TVar (-42)) (Rule [3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Oracle","apply") [Var 4,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleFiniteMap","minFM") [Var 1],Var 3,Var 6],Var 7],Comb FuncCall ("Oracle","apply") [Var 4,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OracleFiniteMap","maxFM") [Var 8],Var 3,Var 9],Var 10]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleGraphInductive","_case_65") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleGraphInductive","Gr") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","sizeFM") [Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_68") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_67") [Var 2,Var 4,Var 5,Var 1]])]])),Func ("OracleGraphInductive","_case_67") 4 Private (TVar (-42)) (Rule [2,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_66") [Var 2,Var 4,Var 7,Var 1]])]])),Func ("OracleGraphInductive","_case_66") 4 Private (TVar (-42)) (Rule [2,4,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,)") [8,9,10]) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]],Let [(11,Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Var 2]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 1],Var 10,Var 15])] (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []]],Let [(12,Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Var 2]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 16],Var 8,Var 17])] (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []],Let [(13,Comb FuncCall ("OracleGraphInductive","updAdj") [Var 4,Var 11,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","clearPred") [Var 2]],Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Let [(14,Comb FuncCall ("OracleGraphInductive","updAdj") [Var 13,Var 12,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","clearSucc") [Var 2]],Var 19])] (Comb FuncCall ("CEventOracle","collapse") [Var 20,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,,,)") [Var 12,Var 2,Var 9,Var 10]],Comb ConsCall ("OracleGraphInductive","Gr") [Var 14]]])]))]))]))]))]])),Func ("OracleGraphInductive","_case_69") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleGraphInductive","Gr") [4]) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","maybe") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("OracleGraphInductive","Gr") [Var 4]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive","match._#lambda5") [Var 2]],Comb FuncCall ("OracleFiniteMap","splitFM") [Var 4,Var 2,Var 1],Var 5]]))]])),Func ("OracleGraphInductive","_case_70") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleGraphInductive","Gr") [3]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFiniteMap","isEmptyFM") [Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_71") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleGraphInductive","delNodes") [Var 5,Comb FuncCall ("OraclePrelude","snd") [Comb FuncCall ("OracleGraphInductive","match") [Var 4,Var 3,Var 1],Var 6],Var 7]]))]])),Func ("OracleGraphInductive","_case_75") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_74") [Var 3,Var 4,Var 5,Comb FuncCall ("OracleGraphInductive","match") [Var 4,Var 3,Var 1],Var 6]]))]])),Func ("OracleGraphInductive","_case_74") 5 Private (TVar (-42)) (Rule [3,4,5,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_73") [Var 3,Var 5,Var 7,Var 6,Var 1]])]])),Func ("OracleGraphInductive","_case_73") 5 Private (TVar (-42)) (Rule [3,5,7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Prelude","Just") [8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_72") [Var 5,Var 7,Var 8,Var 1]])]])),Func ("OracleGraphInductive","_case_72") 4 Private (TVar (-42)) (Rule [5,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","(,,,)") [9,10,11,12]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleGraphInductive",":&") [Comb ConsCall ("Prelude","(,,,)") [Var 9,Var 10,Var 11,Comb FuncCall ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePrelude","/=") []],Var 5]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","snd") []],Var 1],Var 12,Var 13]],Var 7,Var 14]]))]])),Func ("OracleGraphInductive","_case_78") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_77") [Var 4,Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_77") 3 Private (TVar (-42)) (Rule [4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","Just") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_76") [Var 4,Var 5,Var 1]])]])),Func ("OracleGraphInductive","_case_76") 3 Private (TVar (-42)) (Rule [4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleGraphInductive","_case_81") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_80") [Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_80") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","Just") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_79") [Var 5,Var 1]])]])),Func ("OracleGraphInductive","_case_79") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 9])]])),Func ("OracleGraphInductive","_case_84") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_83") [Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_83") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","Just") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_82") [Var 5,Var 1]])]])),Func ("OracleGraphInductive","_case_82") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 8])]])),Func ("OracleGraphInductive","_case_87") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_86") [Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_86") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","Just") [5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_85") [Var 5,Var 1]])]])),Func ("OracleGraphInductive","_case_85") 2 Private (TVar (-42)) (Rule [5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [6,7,8,9]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 6])]])),Func ("OracleGraphInductive","_case_88") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleGraphInductive","match") [Var 4,Var 3,Var 1])] (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleGraphInductive","insEdge._#selFP3#pr") [Var 7,Var 12])] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleGraphInductive","insEdge._#selFP4#la") [Var 7,Var 13])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Let [(10,Comb FuncCall ("OracleGraphInductive","insEdge._#selFP5#su") [Var 7,Var 14])] (Let [(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OracleGraphInductive","insEdge._#selFP6#g'") [Var 7,Var 15])] (Comb FuncCall ("CEventOracle","replace") [Var 16,Comb FuncCall ("OracleGraphInductive",":&") [Comb ConsCall ("Prelude","(,,,)") [Var 8,Var 4,Var 9,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Var 5],Var 10]],Var 11,Var 16]])]))]))]))]))]))]])),Func ("OracleGraphInductive","_case_89") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleGraphInductive",":&") [Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Var 3,Var 4,Comb ConsCall ("Prelude","[]") []]]]])]])),Func ("OracleGraphInductive","_case_95") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleGraphInductive","Gr") [3]) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_94") [Var 3,Comb FuncCall ("OracleFiniteMap","isEmptyFM") [Var 3,Var 1],Var 4]]))]])),Func ("OracleGraphInductive","_case_94") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_93") [Var 3,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 5]]))]])),Func ("OracleGraphInductive","_case_93") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleGraphInductive","_case_92") [Var 3,Comb FuncCall ("OraclePrelude","head") [Comb FuncCall ("OracleFiniteMap","fmToListPreOrder") [Var 3,Var 1],Var 5],Var 6]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleGraphInductive","_case_92") 3 Private (TVar (-42)) (Rule [3,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_91") [Var 3,Var 4,Comb FuncCall ("OracleGraphInductive","match") [Var 4,Comb ConsCall ("OracleGraphInductive","Gr") [Var 3],Var 1],Var 7]]))]])),Func ("OracleGraphInductive","_case_91") 4 Private (TVar (-42)) (Rule [3,4,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_90") [Var 7,Var 6,Var 1]])]])),Func ("OracleGraphInductive","_case_90") 3 Private (TVar (-42)) (Rule [7,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","Just") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 8,Var 7]]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleGraphInductive","_case_99") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [4,5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleGraphInductive","_case_98") [Var 4,Var 5,Var 6,Var 7,Var 3,Var 1]])]])),Func ("OracleGraphInductive","_case_98") 6 Private (TVar (-42)) (Rule [4,5,6,7,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleGraphInductive","Gr") [8]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleFiniteMap","addToFM") [Var 8,Var 5,Comb ConsCall ("Prelude","(,,)") [Var 4,Var 6,Var 7],Var 1])] (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Let [(10,Comb FuncCall ("OracleGraphInductive","updAdj") [Var 9,Var 4,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","addSucc") [Var 5]],Var 12])] (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Let [(11,Comb FuncCall ("OracleGraphInductive","updAdj") [Var 10,Var 7,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleGraphInductive","addPred") [Var 5]],Var 13])] (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_97") [Var 5,Var 6,Var 8,Var 11,Comb FuncCall ("OracleFiniteMap","elemFM") [Var 5,Var 8,Var 14],Var 15]]))]))]))]))]])),Func ("OracleGraphInductive","_case_97") 6 Private (TVar (-42)) (Rule [5,6,8,11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("OraclePrelude","error") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 5,Var 1],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","show") [Var 6,Var 13],Var 14],Var 15],Var 16],Var 17]])),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleGraphInductive","_case_96") [Var 11,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 18]]))]])),Func ("OracleGraphInductive","_case_96") 3 Private (TVar (-42)) (Rule [11,12,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OracleGraphInductive","Gr") [Var 11]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]]))] [Op ("OracleGraphInductive",".:") InfixrOp 5,Op ("OracleGraphInductive",":&") InfixrOp 5]