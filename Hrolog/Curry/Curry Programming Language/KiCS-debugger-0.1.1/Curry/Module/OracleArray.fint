Prog "OracleArray" ["CEventOracle","Oracle","IOExts","Array","Integer","Prelude","OracleInteger","OraclePrelude"] [Type ("OracleArray","Array") Public [0] [Cons ("OracleArray","Array") 2 Private [FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 0)),TCons ("Array","Entry") [TVar 0]]]] [Func ("OracleArray","emptyErrorArray") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleArray","Array") [TVar 0])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","emptyDefaultArray") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleArray","errorArray") []],Var 1]])),Func ("OracleArray","errorArray") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 0))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","error") [Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'z'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Var 3],Var 4],Var 5]]))),Func ("OracleArray","emptyDefaultArray") 2 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleArray","Array") [TVar 0]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OracleArray","Array") [Var 2,Comb ConsCall ("Array","Empty") []]])),Func ("OracleArray","//") 3 Public (FuncType (TCons ("OracleArray","Array") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleArray","Array") [TVar 0])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_33") [Var 3,Var 2,Var 1]])),Func ("OracleArray","//._#lambda2") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 72))) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 72]) (FuncType (TCons ("Array","Entry") [TVar 72]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Array","Entry") [TVar 72]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_32") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleArray","update") 4 Public (FuncType (TCons ("OracleArray","Array") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleArray","Array") [TVar 0]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_31") [Var 3,Var 4,Var 2,Var 1]])),Func ("OracleArray","applyAt") 4 Public (FuncType (TCons ("OracleArray","Array") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleArray","Array") [TVar 0]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_30") [Var 3,Var 4,Var 2,Var 1]])),Func ("OracleArray","at") 5 Private (FuncType (TVar 0) (FuncType (TCons ("Array","Entry") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Array","Entry") [TVar 0])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_29") [Var 2,Var 4,Var 5,Var 3,Var 1]])),Func ("OracleArray","!") 3 Public (FuncType (TCons ("OracleArray","Array") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 0)))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_22") [Var 3,Var 2,Var 1]])),Func ("OracleArray","from") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Array","Entry") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 0))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_21") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleArray","split") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_17") [Var 2,Var 1]])),Func ("OracleArray","split._#selFP3#xs") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 126],TCons ("Prelude","[]") [TVar 126]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 126]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_15") [Var 2,Var 1]])),Func ("OracleArray","split._#selFP4#ys") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 126],TCons ("Prelude","[]") [TVar 126]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 126]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_14") [Var 2,Var 1]])),Func ("OracleArray","listToDefaultArray") 2 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("OracleArray","Array") [TVar 0]))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OracleArray","Array") [Var 2]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleArray","listToArray") []],Var 1]])),Func ("OracleArray","listToErrorArray") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("OracleArray","Array") [TVar 0])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","listToDefaultArray") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleArray","errorArray") []],Var 1]])),Func ("OracleArray","listToArray") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Array","Entry") [TVar 0]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_13") [Var 2,Var 1]])),Func ("OracleArray","listToArray._#selFP6#ys") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 137],TCons ("Prelude","[]") [TVar 137]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 137]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_12") [Var 2,Var 1]])),Func ("OracleArray","listToArray._#selFP7#zs") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 137],TCons ("Prelude","[]") [TVar 137]]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 137]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_11") [Var 2,Var 1]])),Func ("OracleArray","combine") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 2))))) (FuncType (TCons ("OracleArray","Array") [TVar 0]) (FuncType (TCons ("OracleArray","Array") [TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleArray","Array") [TVar 2]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_10") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleArray","combine._#lambda3") 5 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 252))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 255))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 252) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 255) (TVar 263))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 263)))))) (Rule [2,3,4,5,1] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 4,Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 1],Var 6],Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 7],Var 8]]))),Func ("OracleArray","comb") 8 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (TVar 2))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TVar 1))) (FuncType (TCons ("Array","Entry") [TVar 0]) (FuncType (TCons ("Array","Entry") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Array","Entry") [TVar 2]))))))))) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_8") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 5,Var 1]])),Func ("OracleArray","combineSimilar") 4 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))) (FuncType (TCons ("OracleArray","Array") [TVar 0]) (FuncType (TCons ("OracleArray","Array") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OracleArray","Array") [TVar 0]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_5") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleArray","combSim") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))) (FuncType (TCons ("Array","Entry") [TVar 0]) (FuncType (TCons ("Array","Entry") [TVar 0]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Array","Entry") [TVar 0]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_3") [Var 2,Var 4,Var 3,Var 1]])),Func ("OracleArray","foldArray") 4 Public (FuncType (TVar 0) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))))) (FuncType (TCons ("OracleArray","Array") [TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 0))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_1") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleArray","foldEntries") 4 Private (FuncType (TVar 0) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 1) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TVar 0))))))) (FuncType (TCons ("Array","Entry") [TVar 1]) (FuncType (TCons ("CEventOracle","Ref") []) (TVar 0))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_0") [Var 2,Var 3,Var 4,Var 1]])),Func ("OracleArray","arrayToList") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OracleArray","Array") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleArray","foldArray") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]],Comb (FuncPartCall 4) ("OracleArray","arrayToList._#lambda4") []]]]])),Func ("OracleArray","arrayToList._#lambda4") 4 Private (FuncType (TVar 345) (FuncType (TCons ("Prelude","[]") [TVar 345]) (FuncType (TCons ("Prelude","[]") [TVar 345]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TVar 345]))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("OraclePrelude","++") [Var 3,Var 4,Var 1]]])),Func ("OracleArray","_case_0") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Array","Empty") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Array","Entry") [5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 1],Comb FuncCall ("OracleArray","foldEntries") [Var 2,Var 3,Var 6,Var 8],Var 9],Comb FuncCall ("OracleArray","foldEntries") [Var 2,Var 3,Var 7,Var 10],Var 11]]))]])),Func ("OracleArray","_case_1") 4 Private (TVar (-42)) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("OracleArray","Array") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","foldEntries") [Var 2,Var 3,Var 6,Var 1]])]])),Func ("OracleArray","_case_3") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Array","Empty") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4]),Branch (Pattern ("Array","Entry") [5,6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_2") [Var 2,Var 3,Var 5,Var 6,Var 7,Var 4,Var 1]])]])),Func ("OracleArray","_case_2") 7 Private (TVar (-42)) (Rule [2,3,5,6,7,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Array","Empty") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("Array","Entry") [8,9,10]) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Array","Entry") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 1],Var 8,Var 11],Comb FuncCall ("OracleArray","combSim") [Var 2,Var 6,Var 9,Var 12],Comb FuncCall ("OracleArray","combSim") [Var 2,Var 7,Var 10,Var 13]]]))]])),Func ("OracleArray","_case_5") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleArray","Array") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_4") [Var 2,Var 5,Var 6,Var 4,Var 1]])]])),Func ("OracleArray","_case_4") 5 Private (TVar (-42)) (Rule [2,5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("OracleArray","Array") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleArray","Array") [Var 5,Comb FuncCall ("OracleArray","combSim") [Var 2,Var 6,Var 8,Var 1]]])]])),Func ("OracleArray","_case_8") 8 Private (TVar (-42)) (Rule [2,3,4,6,7,8,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Array","Empty") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_7") [Var 2,Var 3,Var 4,Var 7,Var 8,Var 6,Var 1]]),Branch (Pattern ("Array","Entry") [12,13,14]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_6") [Var 2,Var 3,Var 4,Var 7,Var 8,Var 12,Var 13,Var 14,Var 6,Var 1]])]])),Func ("OracleArray","_case_6") 10 Private (TVar (-42)) (Rule [2,3,4,7,8,12,13,14,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Array","Empty") []) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Array","Entry") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 12,Var 1],Comb FuncCall ("Oracle","apply") [Var 4,Comb FuncCall ("OraclePrelude","-") [Comb FuncCall ("OraclePrelude","+") [Var 7,Var 8,Var 18],Lit (Intc 1),Var 19],Var 20],Var 21],Comb FuncCall ("OracleArray","comb") [Var 2,Var 3,Var 4,Var 13,Comb ConsCall ("Array","Empty") [],Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Var 7,Var 22],Var 8,Var 23],Comb FuncCall ("OracleArray","comb") [Var 2,Var 3,Var 4,Var 14,Comb ConsCall ("Array","Empty") [],Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Var 7,Var 24],Comb FuncCall ("OraclePrelude","+") [Var 8,Var 7,Var 25],Var 26]]])),Branch (Pattern ("Array","Entry") [15,16,17]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Array","Entry") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 12,Var 1],Var 15,Var 27],Comb FuncCall ("OracleArray","comb") [Var 2,Var 3,Var 4,Var 13,Var 16,Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Var 7,Var 28],Var 8,Var 29],Comb FuncCall ("OracleArray","comb") [Var 2,Var 3,Var 4,Var 14,Var 17,Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Var 7,Var 30],Comb FuncCall ("OraclePrelude","+") [Var 8,Var 7,Var 31],Var 32]]]))]])),Func ("OracleArray","_case_7") 7 Private (TVar (-42)) (Rule [2,3,4,7,8,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Array","Empty") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Array","Empty") []]),Branch (Pattern ("Array","Entry") [9,10,11]) (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Array","Entry") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("OraclePrelude","-") [Comb FuncCall ("OraclePrelude","+") [Var 7,Var 8,Var 1],Lit (Intc 1),Var 12],Var 13],Var 14],Var 9,Var 15],Comb FuncCall ("OracleArray","comb") [Var 2,Var 3,Var 4,Comb ConsCall ("Array","Empty") [],Var 10,Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Var 7,Var 16],Var 8,Var 17],Comb FuncCall ("OracleArray","comb") [Var 2,Var 3,Var 4,Comb ConsCall ("Array","Empty") [],Var 11,Comb FuncCall ("OraclePrelude","*") [Lit (Intc 2),Var 7,Var 18],Comb FuncCall ("OraclePrelude","+") [Var 8,Var 7,Var 19],Var 20]]]))]])),Func ("OracleArray","_case_10") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OracleArray","Array") [5,6]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_9") [Var 2,Var 5,Var 6,Var 4,Var 1]])]])),Func ("OracleArray","_case_9") 5 Private (TVar (-42)) (Rule [2,5,6,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("OracleArray","Array") [7,8]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleArray","Array") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleArray","combine._#lambda3") [Var 5,Var 7,Var 2]],Comb FuncCall ("OracleArray","comb") [Var 2,Var 5,Var 7,Var 6,Var 8,Lit (Intc 0),Lit (Intc 1),Var 1]]])]])),Func ("OracleArray","_case_11") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleArray","_case_12") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleArray","_case_13") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Array","Empty") []]),Branch (Pattern ("Prelude",":") [3,4]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Let [(5,Comb FuncCall ("OracleArray","split") [Var 4,Var 1])] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Let [(6,Comb FuncCall ("OracleArray","listToArray._#selFP6#ys") [Var 5,Var 8])] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleArray","listToArray._#selFP7#zs") [Var 5,Var 9])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Array","Entry") [Var 3,Comb FuncCall ("OracleArray","listToArray") [Var 6,Var 10],Comb FuncCall ("OracleArray","listToArray") [Var 7,Var 11]]]))]))]))]))]])),Func ("OracleArray","_case_14") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleArray","_case_15") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]])),Func ("OracleArray","_case_17") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleArray","_case_16") [Var 3,Var 4,Var 1]])]])),Func ("OracleArray","_case_16") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Let [(7,Comb FuncCall ("OracleArray","split") [Var 6,Var 1])] (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Let [(8,Comb FuncCall ("OracleArray","split._#selFP3#xs") [Var 7,Var 10])] (Let [(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []],Let [(9,Comb FuncCall ("OracleArray","split._#selFP4#ys") [Var 7,Var 11])] (Comb FuncCall ("CEventOracle","collapse") [Var 12,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 8],Comb ConsCall ("Prelude",":") [Var 5,Var 9]]])]))]))]))]])),Func ("OracleArray","_case_21") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Array","Empty") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 2]),Branch (Pattern ("Array","Entry") [5,6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_20") [Var 2,Var 4,Var 5,Var 6,Var 7,Comb FuncCall ("OraclePrelude","==") [Var 4,Lit (Intc 0),Var 1],Var 8]]))]])),Func ("OracleArray","_case_20") 7 Private (TVar (-42)) (Rule [2,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_19") [Var 2,Var 4,Var 6,Var 7,Comb FuncCall ("OracleInteger","odd") [Var 4,Var 1],Var 9]]))]])),Func ("OracleArray","_case_19") 6 Private (TVar (-42)) (Rule [2,4,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","from") [Var 2,Var 6,Comb FuncCall ("OraclePrelude","div") [Var 4,Lit (Intc 2),Var 1],Var 9]])),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_18") [Var 2,Var 4,Var 7,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 10]]))]])),Func ("OracleArray","_case_18") 5 Private (TVar (-42)) (Rule [2,4,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleArray","from") [Var 2,Var 7,Comb FuncCall ("OraclePrelude","-") [Comb FuncCall ("OraclePrelude","div") [Var 4,Lit (Intc 2),Var 1],Lit (Intc 1),Var 9],Var 10]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleArray","_case_22") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleArray","Array") [4,5]) (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","from") [Comb FuncCall ("Oracle","apply") [Var 4,Var 3,Var 1],Var 5,Var 3,Var 6]]))]])),Func ("OracleArray","_case_29") 5 Private (TVar (-42)) (Rule [2,4,5,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Array","Empty") []) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_28") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","==") [Var 4,Lit (Intc 0),Var 1],Var 9]])),Branch (Pattern ("Array","Entry") [6,7,8]) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_25") [Var 2,Var 4,Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("OraclePrelude","==") [Var 4,Lit (Intc 0),Var 1],Var 10]]))]])),Func ("OracleArray","_case_25") 8 Private (TVar (-42)) (Rule [2,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Array","Entry") [Comb FuncCall ("Oracle","apply") [Var 5,Var 6,Var 1],Var 7,Var 8]]),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_24") [Var 2,Var 4,Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("OracleInteger","odd") [Var 4,Var 1],Var 10]]))]])),Func ("OracleArray","_case_24") 8 Private (TVar (-42)) (Rule [2,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Array","Entry") [Var 6,Comb FuncCall ("OracleArray","at") [Var 2,Var 7,Comb FuncCall ("OraclePrelude","div") [Var 4,Lit (Intc 2),Var 1],Var 5,Var 10],Var 8]])),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_23") [Var 2,Var 4,Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 11]]))]])),Func ("OracleArray","_case_23") 8 Private (TVar (-42)) (Rule [2,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Array","Entry") [Var 6,Var 7,Comb FuncCall ("OracleArray","at") [Var 2,Var 8,Comb FuncCall ("OraclePrelude","-") [Comb FuncCall ("OraclePrelude","div") [Var 4,Lit (Intc 2),Var 1],Lit (Intc 1),Var 10],Var 5,Var 11]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleArray","_case_28") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Array","Entry") [Comb FuncCall ("Oracle","apply") [Var 5,Var 2,Var 1],Comb ConsCall ("Array","Empty") [],Comb ConsCall ("Array","Empty") []]]),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_27") [Var 2,Var 4,Var 5,Comb FuncCall ("OracleInteger","odd") [Var 4,Var 1],Var 7]]))]])),Func ("OracleArray","_case_27") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Array","Entry") [Var 2,Comb FuncCall ("OracleArray","at") [Var 2,Comb ConsCall ("Array","Empty") [],Comb FuncCall ("OraclePrelude","div") [Var 4,Lit (Intc 2),Var 1],Var 5,Var 7],Comb ConsCall ("Array","Empty") []]])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","_case_26") [Var 2,Var 4,Var 5,Comb FuncCall ("OraclePrelude","otherwise") [Var 1],Var 8]]))]])),Func ("OracleArray","_case_26") 5 Private (TVar (-42)) (Rule [2,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Array","Entry") [Var 2,Comb ConsCall ("Array","Empty") [],Comb FuncCall ("OracleArray","at") [Var 2,Comb ConsCall ("Array","Empty") [],Comb FuncCall ("OraclePrelude","-") [Comb FuncCall ("OraclePrelude","div") [Var 4,Lit (Intc 2),Var 1],Lit (Intc 1),Var 7],Var 5,Var 8]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","failed") [Var 1]])]])),Func ("OracleArray","_case_30") 4 Private (TVar (-42)) (Rule [3,4,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleArray","Array") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("OracleArray","Array") [Var 5,Comb FuncCall ("OracleArray","at") [Comb FuncCall ("Oracle","apply") [Var 5,Var 3,Var 1],Var 6,Var 3,Var 4,Var 7]]]))]])),Func ("OracleArray","_case_31") 4 Private (TVar (-42)) (Rule [3,4,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleArray","Array") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("OracleArray","Array") [Var 5,Comb FuncCall ("OracleArray","at") [Comb FuncCall ("Oracle","apply") [Var 5,Var 3,Var 1],Var 6,Var 3,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","const") [Var 4]],Var 7]]]))]])),Func ("OracleArray","_case_32") 4 Private (TVar (-42)) (Rule [2,4,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OracleArray","at") [Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 1],Var 4,Var 5,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","const") [Var 6]],Var 7]]))]])),Func ("OracleArray","_case_33") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OracleArray","Array") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OracleArray","Array") [Var 4,Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleArray","//._#lambda2") [Var 4]],Var 5,Var 3,Var 1]]])]]))] [Op ("OracleArray","!") InfixlOp 9,Op ("OracleArray","//") InfixlOp 9]