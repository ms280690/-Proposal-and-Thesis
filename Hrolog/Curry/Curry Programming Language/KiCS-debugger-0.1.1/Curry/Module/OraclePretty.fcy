Prog "OraclePretty" ["CEventOracle","Oracle","IOExts","Pretty","Dequeue","Prelude","OracleDequeue","OraclePrelude"] [Type ("OraclePretty","Doc") Public [] [Cons ("OraclePretty","Doc") 1 Private [FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Tokens") []) (TCons ("OraclePretty","Tokens") []))]],Type ("OraclePretty","Tokens") Private [] [Cons ("OraclePretty","Text") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("OraclePretty","Tokens") []],Cons ("OraclePretty","Line") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("OraclePretty","Tokens") []],Cons ("OraclePretty","Open") 1 Private [TCons ("OraclePretty","Tokens") []],Cons ("OraclePretty","Close") 1 Private [TCons ("OraclePretty","Tokens") []],Cons ("OraclePretty","Empty") 0 Private [],Cons ("OraclePretty","OpenNest") 2 Private [FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))),TCons ("OraclePretty","Tokens") []],Cons ("OraclePretty","CloseNest") 1 Private [TCons ("OraclePretty","Tokens") []]]] [Func ("OraclePretty","deDoc") 2 Private (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Tokens") []) (TCons ("OraclePretty","Tokens") []))))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_30") [Var 2,Var 1]])),Func ("OraclePretty","empty") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","text") [Comb ConsCall ("Prelude","[]") [],Var 1]])),Func ("OraclePretty","text") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OraclePretty","Doc") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","Text") [Var 2]]]])),Func ("OraclePretty","linesep") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","Doc") []],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partCons") []],Comb (ConsPartCall 2) ("OraclePretty","Line") []],Var 1]])),Func ("OraclePretty","line") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","linesep") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Var 2]]))),Func ("OraclePretty","linebreak") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","linesep") [Var 1],Comb ConsCall ("Prelude","[]") [],Var 2]]))),Func ("OraclePretty","softline") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","group") [Comb FuncCall ("OraclePretty","line") [Var 1],Var 2]]))),Func ("OraclePretty","softbreak") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","group") [Comb FuncCall ("OraclePretty","linebreak") [Var 1],Var 2]]))),Func ("OraclePretty","group") 2 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("OraclePretty","Doc") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","Open") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePretty","deDoc") [Var 2,Var 1],Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","Close") []],Var 3],Var 4]]]))),Func ("OraclePretty","nest") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("OraclePretty","Doc") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","OpenNest") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]],Comb (FuncPartCall 4) ("OraclePretty","nest._#lambda2") [Var 2]]]],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePretty","deDoc") [Var 3,Var 1],Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","CloseNest") []],Var 4],Var 5]]]))),Func ("OraclePretty","nest._#lambda2") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_29") [Var 2,Var 3,Var 1]])),Func ("OraclePretty","hang") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("OraclePretty","Doc") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","OpenNest") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 1) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") []],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []]]],Comb (FuncPartCall 4) ("OraclePretty","hang._#lambda3") [Var 2]]]],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePretty","deDoc") [Var 3,Var 1],Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","CloseNest") []],Var 4],Var 5]]]))),Func ("OraclePretty","hang._#lambda3") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [2,3,4,5,1] (Let [(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","+") [Comb FuncCall ("OraclePrelude","-") [Var 5,Var 4,Var 1],Var 2,Var 6],Var 3]]))),Func ("OraclePretty","align") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","hang") [Lit (Intc 0)]]])),Func ("OraclePretty","combine") 4 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","enclose") [Var 3,Var 4,Var 2,Var 1]])),Func ("OraclePretty","<>") 3 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("OraclePretty","Doc") [Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePretty","deDoc") [Var 2,Var 1],Comb FuncCall ("OraclePretty","deDoc") [Var 3,Var 4],Var 5]]]))),Func ("OraclePretty","<+>") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","combine") [Comb FuncCall ("OraclePretty","space") [Var 1]]]])),Func ("OraclePretty","<$>") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","combine") [Comb FuncCall ("OraclePretty","line") [Var 1]]]])),Func ("OraclePretty","</>") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","combine") [Comb FuncCall ("OraclePretty","softline") [Var 1]]]])),Func ("OraclePretty","<$$>") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","combine") [Comb FuncCall ("OraclePretty","linebreak") [Var 1]]]])),Func ("OraclePretty","<//>") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","combine") [Comb FuncCall ("OraclePretty","softbreak") [Var 1]]]])),Func ("OraclePretty","compose") 3 Public (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") []))))) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_28") [Var 2,Var 3,Var 1]])),Func ("OraclePretty","hsep") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","compose") [Comb FuncCall ("OraclePretty","<+>") [Var 1]]]])),Func ("OraclePretty","vsep") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","compose") [Comb FuncCall ("OraclePretty","<$>") [Var 1]]]])),Func ("OraclePretty","fillSep") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","compose") [Comb FuncCall ("OraclePretty","</>") [Var 1]]]])),Func ("OraclePretty","sep") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","group") []],Comb FuncCall ("OraclePretty","vsep") [Var 1],Var 2]]))),Func ("OraclePretty","hcat") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","compose") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","<>") []]]]])),Func ("OraclePretty","vcat") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","compose") [Comb FuncCall ("OraclePretty","<$$>") [Var 1]]]])),Func ("OraclePretty","fillCat") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","compose") [Comb FuncCall ("OraclePretty","<//>") [Var 1]]]])),Func ("OraclePretty","cat") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","group") []],Comb FuncCall ("OraclePretty","vcat") [Var 1],Var 2]]))),Func ("OraclePretty","punctuate") 3 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_27") [Var 2,Var 3,Var 1]])),Func ("OraclePretty","punctuate.go.75") 3 Private (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_26") [Var 2,Var 3,Var 1]])),Func ("OraclePretty","encloseSep") 5 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_24") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OraclePretty","hEncloseSep") 5 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_23") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OraclePretty","fillEncloseSep") 5 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])))))) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_22") [Var 2,Var 3,Var 4,Var 5,Var 1]])),Func ("OraclePretty","fillEncloseSep.withSoftBreaks.96") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_21") [Var 2,Var 1]])),Func ("OraclePretty","list") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePretty","lbracket") [Var 1],Comb FuncCall ("OraclePretty","rbracket") [Var 2],Comb FuncCall ("OraclePretty","comma") [Var 3]]]]))),Func ("OraclePretty","tupled") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePretty","lparen") [Var 1],Comb FuncCall ("OraclePretty","rparen") [Var 2],Comb FuncCall ("OraclePretty","comma") [Var 3]]]]))),Func ("OraclePretty","semiBraces") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("OraclePretty","Doc") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","fillEncloseSep") [Comb FuncCall ("OraclePretty","lbrace") [Var 1],Comb FuncCall ("OraclePretty","rbrace") [Var 2],Comb FuncCall ("OraclePretty","semi") [Var 3]]]]))),Func ("OraclePretty","enclose") 4 Public (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","<>") [Var 2,Var 4,Var 1],Var 3,Var 5]]))),Func ("OraclePretty","squotes") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","squote") [Var 1],Comb FuncCall ("OraclePretty","squote") [Var 2]]]]))),Func ("OraclePretty","dquotes") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","dquote") [Var 1],Comb FuncCall ("OraclePretty","dquote") [Var 2]]]]))),Func ("OraclePretty","bquotes") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","bquote") [Var 1],Comb FuncCall ("OraclePretty","bquote") [Var 2]]]]))),Func ("OraclePretty","parens") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","lparen") [Var 1],Comb FuncCall ("OraclePretty","rparen") [Var 2]]]]))),Func ("OraclePretty","angles") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","langle") [Var 1],Comb FuncCall ("OraclePretty","rangle") [Var 2]]]]))),Func ("OraclePretty","braces") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","lbrace") [Var 1],Comb FuncCall ("OraclePretty","rbrace") [Var 2]]]]))),Func ("OraclePretty","brackets") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Doc") []) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","enclose") [Comb FuncCall ("OraclePretty","lbracket") [Var 1],Comb FuncCall ("OraclePretty","rbracket") [Var 2]]]]))),Func ("OraclePretty","char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","text") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Var 1]])),Func ("OraclePretty","string") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("OraclePretty","Doc") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude",".") [Comb FuncCall ("OraclePretty","hcat") [Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","string._#lambda4") []]]],Var 2]]))),Func ("OraclePretty","string._#lambda4") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePretty","_case_19") [Var 2,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePrelude","elem") [Var 2,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\r'),Comb ConsCall ("Prelude","[]") []]],Var 3],Var 4]]))),Func ("OraclePretty","int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","text") [Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 3]]))),Func ("OraclePretty","float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") []))) (Rule [2,1] (Let [(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","text") [Comb FuncCall ("OraclePrelude","show") [Var 2,Var 1],Var 3]]))),Func ("OraclePretty","lparen") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '('),Var 1]])),Func ("OraclePretty","rparen") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc ')'),Var 1]])),Func ("OraclePretty","langle") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '<'),Var 1]])),Func ("OraclePretty","rangle") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '>'),Var 1]])),Func ("OraclePretty","lbrace") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '{'),Var 1]])),Func ("OraclePretty","rbrace") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '}'),Var 1]])),Func ("OraclePretty","lbracket") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '['),Var 1]])),Func ("OraclePretty","rbracket") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc ']'),Var 1]])),Func ("OraclePretty","squote") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '\''),Var 1]])),Func ("OraclePretty","dquote") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '"'),Var 1]])),Func ("OraclePretty","bquote") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '`'),Var 1]])),Func ("OraclePretty","semi") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc ';'),Var 1]])),Func ("OraclePretty","colon") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc ':'),Var 1]])),Func ("OraclePretty","comma") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc ','),Var 1]])),Func ("OraclePretty","space") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc ' '),Var 1]])),Func ("OraclePretty","dot") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '.'),Var 1]])),Func ("OraclePretty","backslash") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '\\'),Var 1]])),Func ("OraclePretty","equals") 1 Public (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Doc") [])) (Rule [1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Lit (Charc '='),Var 1]])),Func ("OraclePretty","normalise") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Tokens") []) (TCons ("OraclePretty","Tokens") [])))) (Rule [1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","normalise.go.173") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []]]]])),Func ("OraclePretty","normalise.open.173") 2 Private (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Tokens") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_18") [Var 2,Var 1]])),Func ("OraclePretty","normalise.go.173") 3 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("OraclePretty","Tokens") []) (TCons ("OraclePretty","Tokens") []))) (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Tokens") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_17") [Var 2,Var 3,Var 1]])),Func ("OraclePretty","doc2Tokens") 2 Private (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("OraclePretty","Tokens") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_16") [Var 2,Var 1]])),Func ("OraclePretty","pretty") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OraclePretty","Doc") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,1] (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","noGroup") [Comb FuncCall ("OraclePretty","doc2Tokens") [Var 3,Var 1],Var 2,Lit (Intc 1),Var 2,Comb ConsCall ("Prelude",":") [Lit (Intc 0),Comb ConsCall ("Prelude","[]") []],Var 4]]))),Func ("OraclePretty","length") 1 Private (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Int") [])))) (Rule [1] (Let [(2,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(3,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","length") []],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","filter") [Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","not") []],Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","flip") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","elem") []],Comb FuncCall ("OraclePrelude","++") [Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude",":") [Lit (Intc 6),Comb ConsCall ("Prelude",":") [Lit (Intc 7),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","enumFromTo") [Lit (Intc 16),Lit (Intc 31),Var 1],Var 2]]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","ord") []],Var 3],Var 4]]],Var 5]]))),Func ("OraclePretty","noGroup") 6 Private (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_15") [Var 3,Var 4,Var 5,Var 6,Var 2,Var 1]])),Func ("OraclePretty","noGroup._#lambda6") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])),Func ("OraclePretty","oneGroup") 6 Private (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_13") [Var 3,Var 4,Var 5,Var 6,Var 2,Var 1]])),Func ("OraclePretty","oneGroup.outText.234") 6 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 4,Comb FuncCall ("OraclePrelude","-") [Var 5,Var 2,Var 1],Var 7],Var 6,Var 8],Var 9]]))),Func ("OraclePretty","oneGroup._#lambda7") 6 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup.outText.234") [Var 2,Var 4,Var 6]],Var 7]]))),Func ("OraclePretty","oneGroup.outLine.240") 8 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_12") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 1]])),Func ("OraclePretty","oneGroup._#lambda8") 7 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))))) (Rule [2,3,4,5,6,7,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 6,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup.outLine.240") [Var 2,Var 4,Var 5,Var 6,Var 7]],Var 8]]))),Func ("OraclePretty","oneGroup._#lambda9") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])),Func ("OraclePretty","oneGroup._#lambda10") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup._#lambda10._#lambda11") [Var 6,Var 2,Var 4]],Var 7]]))),Func ("OraclePretty","oneGroup._#lambda10._#lambda11") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 6,Var 7],Var 5,Var 8],Var 4,Var 9],Var 10]]))),Func ("OraclePretty","oneGroup._#lambda12") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 3,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup._#lambda12._#lambda13") [Var 4]],Var 5]]))),Func ("OraclePretty","oneGroup._#lambda12._#lambda13") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","tail") [Var 4,Var 5],Var 6]]))),Func ("OraclePretty","multiGroup") 9 Private (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Dequeue","Queue") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))))))) (Rule [2,3,4,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_10") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 2,Var 1]])),Func ("OraclePretty","multiGroup.outText.261") 6 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 4,Comb FuncCall ("OraclePrelude","-") [Var 5,Var 2,Var 1],Var 7],Var 6,Var 8],Var 9]]))),Func ("OraclePretty","multiGroup._#lambda14") 6 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup.outText.261") [Var 2,Var 4,Var 6]],Var 7]]))),Func ("OraclePretty","multiGroup.outLine.267") 8 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_6") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 1]])),Func ("OraclePretty","multiGroup._#lambda15") 7 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))))) (Rule [2,3,4,5,6,7,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 6,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup.outLine.267") [Var 2,Var 4,Var 5,Var 6,Var 7]],Var 8]]))),Func ("OraclePretty","multiGroup._#lambda16") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])),Func ("OraclePretty","multiGroup._#lambda18") 7 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))))) (Rule [2,3,4,5,6,7,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 6,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","multiGroup._#lambda18._#lambda19") [Var 7,Var 2,Var 4,Var 5]],Var 8]]))),Func ("OraclePretty","multiGroup._#lambda18._#lambda19") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("OraclePrelude","<=") [Var 4,Comb FuncCall ("OraclePrelude","+") [Var 5,Var 6,Var 1],Var 7],Var 8],Var 2,Var 9],Var 6,Var 10]]))),Func ("OraclePretty","multiGroup._#lambda20") 7 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))))) (Rule [2,3,4,5,6,7,1] (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 6,Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","multiGroup._#lambda20._#lambda21") [Var 7,Var 3,Var 4,Var 5]],Var 8]]))),Func ("OraclePretty","multiGroup._#lambda20._#lambda21") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Comb FuncCall ("OraclePrelude","<=") [Var 4,Comb FuncCall ("OraclePrelude","+") [Var 5,Var 6,Var 1],Var 7],Var 8],Var 2,Var 9],Var 6,Var 10]]))),Func ("OraclePretty","multiGroup._#lambda22") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 5,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda22._#lambda23") [Var 6,Var 2,Var 4]],Var 7]]))),Func ("OraclePretty","multiGroup._#lambda22._#lambda23") 6 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 5,Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 3,Var 6,Var 7],Var 5,Var 8],Var 4,Var 9],Var 10]]))),Func ("OraclePretty","multiGroup._#lambda24") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 3,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda24._#lambda25") [Var 4]],Var 5]]))),Func ("OraclePretty","multiGroup._#lambda24._#lambda25") 4 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,1] (Let [(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(6,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 2,Var 3,Var 1],Comb FuncCall ("OraclePrelude","tail") [Var 4,Var 5],Var 6]]))),Func ("OraclePretty","pruneOne") 6 Private (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,1] (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","_case_4") [Var 2,Var 3,Var 4,Var 5,Var 6,Comb FuncCall ("OraclePrelude","<=") [Var 4,Var 5,Var 1],Var 7]]))),Func ("OraclePretty","pruneMulti") 9 Private (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Dequeue","Queue") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))))))) (Rule [2,3,4,5,6,7,8,9,1] (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","_case_3") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Comb FuncCall ("OraclePrelude","<=") [Var 4,Var 5,Var 1],Var 10]]))),Func ("OraclePretty","pruneMulti._#lambda26") 8 Private (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Dequeue","Queue") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("OraclePretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("CEventOracle","Ref") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,7,8,1] (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","_case_2") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("OracleDequeue","matchLast") [Var 4,Var 1],Var 9]]))),Func ("OraclePretty","_case_2") 9 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","Nothing") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","pruneOne") [Var 6,Var 7,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 5,Var 8,Var 1],Var 2,Var 11],Var 8,Var 12]])),Branch (Pattern ("Prelude","Just") [9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_1") [Var 2,Var 3,Var 5,Var 6,Var 7,Var 8,Var 9,Var 1]])]])),Func ("OraclePretty","_case_1") 8 Private (TVar (-42)) (Rule [2,3,5,6,7,8,9,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 9) [Branch (Pattern ("Prelude","(,)") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_0") [Var 2,Var 3,Var 5,Var 6,Var 7,Var 8,Var 11,Var 10,Var 1]])]])),Func ("OraclePretty","_case_0") 9 Private (TVar (-42)) (Rule [2,3,5,6,7,8,11,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","(,)") [12,13]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","pruneMulti") [Var 6,Var 7,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 12,Var 8,Var 1],Var 13,Var 11,Var 5,Var 2,Var 14],Var 8,Var 15]]))]])),Func ("OraclePretty","_case_3") 10 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,9,10,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","multiGroup") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 6,Comb ConsCall ("Prelude","False") [],Var 1],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","pruneMulti._#lambda26") [Var 9,Var 4,Var 7,Var 8,Var 2,Var 3]],Var 11]]))]])),Func ("OraclePretty","_case_4") 7 Private (TVar (-42)) (Rule [2,3,4,5,6,7,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","oneGroup") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 1]]),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 6,Comb ConsCall ("Prelude","False") [],Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","noGroup") [Var 2,Var 3,Var 4]],Var 8]]))]])),Func ("OraclePretty","_case_6") 8 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_5") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 9,Var 5,Var 1]])]])),Func ("OraclePretty","_case_5") 9 Private (TVar (-42)) (Rule [2,3,4,6,7,8,9,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 6,Comb FuncCall ("OraclePrelude","-") [Var 7,Var 2,Var 1],Var 10],Var 8,Var 11],Var 12]])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","replicate") [Var 9,Lit (Charc ' '),Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 6,Comb FuncCall ("OraclePrelude","-") [Var 4,Var 9,Var 13],Var 14],Var 8,Var 15],Var 16]]]))]])),Func ("OraclePretty","_case_10") 9 Private (TVar (-42)) (Rule [3,4,5,6,7,8,9,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OraclePretty","Text") [10,11]) (Let [(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude","[]") []]],Let [(12,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","length") [Var 1],Var 10,Var 26])] (Let [(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","pruneMulti") [Var 11,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 4,Var 12,Var 27],Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda14") [Var 12,Var 9,Var 10]],Var 28]]))])),Branch (Pattern ("OraclePretty","Line") [13,14]) (Let [(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []]],Let [(15,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","length") [Var 1],Var 13,Var 29])] (Let [(31,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 30,Comb ConsCall ("Prelude",":") [Var 31,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","pruneMulti") [Var 14,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 4,Var 15,Var 30],Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda15") [Var 15,Var 9,Var 13,Var 3]],Var 31]]))])),Branch (Pattern ("OraclePretty","Open") [16]) (Let [(32,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 32,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","multiGroup") [Var 16,Var 3,Var 4,Var 5,Var 6,Comb FuncCall ("OracleDequeue","cons") [Comb ConsCall ("Prelude","(,)") [Var 8,Var 9],Var 7,Var 1],Var 4,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda16") []],Var 32]])),Branch (Pattern ("OraclePretty","Close") [17]) (Let [(33,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 33,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","_case_9") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 17,Comb FuncCall ("OracleDequeue","matchHead") [Var 7,Var 1],Var 33]])),Branch (Pattern ("OraclePretty","OpenNest") [23,24]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","multiGroup") [Var 24,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda22") [Var 23,Var 9,Var 3]],Var 1]]),Branch (Pattern ("OraclePretty","CloseNest") [25]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","multiGroup") [Var 25,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda24") [Var 9]],Var 1]])]])),Func ("OraclePretty","_case_9") 10 Private (TVar (-42)) (Rule [3,4,5,6,7,8,9,17,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","oneGroup") [Var 17,Var 3,Var 4,Var 5,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda18") [Var 9,Var 6,Var 4,Var 8]],Var 1]]),Branch (Pattern ("Prelude","Just") [18]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_8") [Var 3,Var 4,Var 5,Var 6,Var 8,Var 9,Var 17,Var 18,Var 1]])]])),Func ("OraclePretty","_case_8") 9 Private (TVar (-42)) (Rule [3,4,5,6,8,9,17,18,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 18) [Branch (Pattern ("Prelude","(,)") [19,20]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_7") [Var 3,Var 4,Var 5,Var 6,Var 8,Var 9,Var 17,Var 20,Var 19,Var 1]])]])),Func ("OraclePretty","_case_7") 10 Private (TVar (-42)) (Rule [3,4,5,6,8,9,17,20,19,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 19) [Branch (Pattern ("Prelude","(,)") [21,22]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","multiGroup") [Var 17,Var 3,Var 4,Var 5,Var 6,Var 20,Var 21,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","multiGroup._#lambda20") [Var 22,Var 9,Var 4,Var 8]],Var 1]])]])),Func ("OraclePretty","_case_12") 8 Private (TVar (-42)) (Rule [2,3,4,5,6,7,8,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_11") [Var 2,Var 3,Var 4,Var 6,Var 7,Var 8,Var 9,Var 5,Var 1]])]])),Func ("OraclePretty","_case_11") 9 Private (TVar (-42)) (Rule [2,3,4,6,7,8,9,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 6,Comb FuncCall ("OraclePrelude","-") [Var 7,Var 2,Var 1],Var 10],Var 8,Var 11],Var 12]])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","replicate") [Var 9,Lit (Charc ' '),Var 1],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 6,Comb FuncCall ("OraclePrelude","-") [Var 4,Var 9,Var 13],Var 14],Var 8,Var 15],Var 16]]]))]])),Func ("OraclePretty","_case_13") 6 Private (TVar (-42)) (Rule [3,4,5,6,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OraclePretty","Text") [7,8]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]],Let [(9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","length") [Var 1],Var 7,Var 18])] (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","pruneOne") [Var 8,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 4,Var 9,Var 19],Var 5,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup._#lambda7") [Var 9,Var 6,Var 7]],Var 20]]))])),Branch (Pattern ("OraclePretty","Line") [10,11]) (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]],Let [(12,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","length") [Var 1],Var 10,Var 21])] (Let [(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","pruneOne") [Var 11,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 4,Var 12,Var 22],Var 5,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup._#lambda8") [Var 12,Var 6,Var 10,Var 3]],Var 23]]))])),Branch (Pattern ("OraclePretty","Open") [13]) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","multiGroup") [Var 13,Var 3,Var 4,Var 5,Var 6,Comb FuncCall ("OracleDequeue","empty") [Var 1],Var 4,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup._#lambda9") []],Var 24]])),Branch (Pattern ("OraclePretty","Close") [14]) (Let [(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 6,Comb FuncCall ("OraclePrelude","<=") [Var 4,Var 5,Var 1],Var 25],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","noGroup") [Var 14,Var 3,Var 4]],Var 26]])),Branch (Pattern ("OraclePretty","OpenNest") [15,16]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","oneGroup") [Var 16,Var 3,Var 4,Var 5,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup._#lambda10") [Var 15,Var 6,Var 3]],Var 1]]),Branch (Pattern ("OraclePretty","CloseNest") [17]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","oneGroup") [Var 17,Var 3,Var 4,Var 5,Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","oneGroup._#lambda12") [Var 6]],Var 1]])]])),Func ("OraclePretty","_case_15") 6 Private (TVar (-42)) (Rule [3,4,5,6,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OraclePretty","Empty") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("OraclePretty","Text") [7,8]) (Let [(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude","[]") []]],Let [(9,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","length") [Var 1],Var 7,Var 19])] (Let [(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePrelude","++") [Var 7,Comb FuncCall ("OraclePretty","noGroup") [Var 8,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 4,Var 9,Var 20],Comb FuncCall ("OraclePrelude","-") [Var 5,Var 9,Var 21],Var 6,Var 22],Var 23]]))])),Branch (Pattern ("OraclePretty","Line") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_14") [Var 3,Var 4,Var 11,Var 6,Var 1]]),Branch (Pattern ("OraclePretty","Open") [14]) (Let [(24,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(25,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(26,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 24,Comb ConsCall ("Prelude",":") [Var 25,Comb ConsCall ("Prelude",":") [Var 26,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","oneGroup") [Var 14,Var 3,Var 4,Comb FuncCall ("OraclePrelude","+") [Var 4,Var 5,Var 1],Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OraclePretty","noGroup._#lambda6") []],Var 24],Var 5,Var 25],Var 6,Var 26]])),Branch (Pattern ("OraclePretty","Close") [15]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","noGroup") [Var 15,Var 3,Var 4,Var 5,Var 6,Var 1]]),Branch (Pattern ("OraclePretty","OpenNest") [16,17]) (Let [(27,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(28,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(29,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 27,Comb ConsCall ("Prelude",":") [Var 28,Comb ConsCall ("Prelude",":") [Var 29,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("OraclePretty","noGroup") [Var 17,Var 3,Var 4,Var 5,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Comb FuncCall ("Oracle","apply") [Var 16,Var 6,Var 1],Var 5,Var 27],Var 3,Var 28],Var 29]])),Branch (Pattern ("OraclePretty","CloseNest") [18]) (Let [(30,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 30,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","noGroup") [Var 18,Var 3,Var 4,Var 5,Comb FuncCall ("OraclePrelude","tail") [Var 6,Var 1],Var 30]]))]])),Func ("OraclePretty","_case_14") 5 Private (TVar (-42)) (Rule [3,4,11,6,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 6) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb FuncCall ("OraclePrelude","++") [Comb FuncCall ("OraclePrelude","replicate") [Var 12,Lit (Charc ' '),Var 1],Comb FuncCall ("OraclePretty","noGroup") [Var 11,Var 3,Comb FuncCall ("OraclePrelude","+") [Var 4,Lit (Intc 1),Var 14],Comb FuncCall ("OraclePrelude","-") [Var 3,Var 12,Var 15],Var 6,Var 16],Var 17]]]))]])),Func ("OraclePretty","_case_16") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OraclePretty","Doc") [3]) (Let [(4,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(5,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","normalise") [Var 1],Comb FuncCall ("Oracle","apply") [Var 3,Comb ConsCall ("OraclePretty","Empty") [],Var 4],Var 5]]))]])),Func ("OraclePretty","_case_17") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("OraclePretty","Empty") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("Oracle","apply") [Var 2,Comb ConsCall ("OraclePretty","Empty") [],Var 1]]),Branch (Pattern ("OraclePretty","Open") [4]) (Let [(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","normalise.go.173") [Comb FuncCall ("OraclePrelude",".") [Var 2,Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","normalise.open.173") []],Var 1],Var 4,Var 13]])),Branch (Pattern ("OraclePretty","Close") [5]) (Let [(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePretty","normalise.go.173") [Comb FuncCall ("OraclePrelude",".") [Var 2,Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","Close") []],Var 1],Var 5,Var 14]])),Branch (Pattern ("OraclePretty","Line") [6,7]) (Let [(15,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(16,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 15,Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OraclePrelude","$") [Comb FuncCall ("OraclePrelude",".") [Var 2,Comb FuncCall ("OraclePrelude",".") [Comb (FuncPartCall 2) ("Oracle","partCons") [Comb (ConsPartCall 1) ("OraclePretty","Line") [Var 6]],Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","normalise.go.173") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePrelude","id") []]]],Var 1],Var 15],Var 7,Var 16]])),Branch (Pattern ("OraclePretty","Text") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OraclePretty","Text") [Var 8,Comb FuncCall ("OraclePretty","normalise.go.173") [Var 2,Var 9,Var 1]]]),Branch (Pattern ("OraclePretty","OpenNest") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OraclePretty","OpenNest") [Var 10,Comb FuncCall ("OraclePretty","normalise.go.173") [Var 2,Var 11,Var 1]]]),Branch (Pattern ("OraclePretty","CloseNest") [12]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("OraclePretty","CloseNest") [Comb FuncCall ("OraclePretty","normalise.go.173") [Var 2,Var 12,Var 1]]])]])),Func ("OraclePretty","_case_18") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 2) [Branch (Pattern ("OraclePretty","Close") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3]),Branch (Pattern ("OraclePretty","Text") [4,5]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OraclePretty","Open") [Var 2]]),Branch (Pattern ("OraclePretty","Line") [6,7]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OraclePretty","Open") [Var 2]]),Branch (Pattern ("OraclePretty","Open") [8]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OraclePretty","Open") [Var 2]]),Branch (Pattern ("OraclePretty","Empty") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OraclePretty","Open") [Var 2]]),Branch (Pattern ("OraclePretty","OpenNest") [9,10]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OraclePretty","Open") [Var 2]]),Branch (Pattern ("OraclePretty","CloseNest") [11]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("OraclePretty","Open") [Var 2]])]])),Func ("OraclePretty","_case_19") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","line") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","char") [Var 2,Var 1]])]])),Func ("OraclePretty","_case_21") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_20") [Var 3,Var 4,Var 1]])]])),Func ("OraclePretty","_case_20") 3 Private (TVar (-42)) (Rule [3,4,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Let [(7,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePretty","group") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","linebreak") [Var 1],Var 3,Var 7],Var 8],Comb ConsCall ("Prelude","[]") []]])),Branch (Pattern ("Prelude",":") [5,6]) (Let [(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(14,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePretty","group") [Comb FuncCall ("OraclePretty","<>") [Comb FuncCall ("OraclePretty","linebreak") [Var 1],Comb FuncCall ("OraclePretty","group") [Comb FuncCall ("OraclePretty","<>") [Var 3,Comb FuncCall ("OraclePretty","linebreak") [Var 9],Var 10],Var 11],Var 12],Var 13],Comb FuncCall ("OraclePretty","fillEncloseSep.withSoftBreaks.96") [Var 4,Var 14]]]))]])),Func ("OraclePretty","_case_22") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","<>") [Var 2,Var 3,Var 1]]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(13,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 1],Comb FuncCall ("OraclePretty","enclose") [Var 2,Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","hcat") [Var 8],Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("OraclePretty","fillEncloseSep.withSoftBreaks.96") [Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","<>") [Var 4]],Var 7,Var 9],Var 10]],Var 11],Var 12],Var 13]]))]])),Func ("OraclePretty","_case_23") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","<>") [Var 2,Var 3,Var 1]]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 1],Comb FuncCall ("OraclePretty","enclose") [Var 2,Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","hcat") [Var 8],Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","<>") [Var 4]],Var 7,Var 9]],Var 10],Var 11],Var 12]]))]])),Func ("OraclePretty","_case_24") 5 Private (TVar (-42)) (Rule [2,3,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","<>") [Var 2,Var 3,Var 1]]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(9,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(10,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(11,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(12,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","align") [Var 1],Comb FuncCall ("OraclePretty","enclose") [Var 2,Var 3,Comb FuncCall ("Oracle","apply") [Comb FuncCall ("OraclePretty","cat") [Var 8],Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OraclePretty","<>") [Var 4]],Var 7,Var 9]],Var 10],Var 11],Var 12]]))]])),Func ("OraclePretty","_case_26") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","_case_25") [Var 2,Var 4,Var 5,Var 1]])]])),Func ("OraclePretty","_case_25") 4 Private (TVar (-42)) (Rule [2,4,5,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePretty","<>") [Var 4,Var 2,Var 1],Comb FuncCall ("OraclePretty","punctuate.go.75") [Var 2,Var 5,Var 8]]]))]])),Func ("OraclePretty","_case_27") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","punctuate.go.75") [Var 2,Var 3,Var 1]])]])),Func ("OraclePretty","_case_28") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePretty","empty") [Var 1]]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OraclePrelude","foldr1") [Var 2,Var 3,Var 1]])]])),Func ("OraclePretty","_case_29") 3 Private (TVar (-42)) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("OraclePrelude","+") [Var 6,Var 2,Var 1],Var 3]])]])),Func ("OraclePretty","_case_30") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("OraclePretty","Doc") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 3])]]))] [Op ("OraclePretty","<>") InfixlOp 1,Op ("OraclePretty","<+>") InfixlOp 1,Op ("OraclePretty","<$>") InfixlOp 1,Op ("OraclePretty","</>") InfixlOp 1,Op ("OraclePretty","<$$>") InfixlOp 1,Op ("OraclePretty","<//>") InfixlOp 1]