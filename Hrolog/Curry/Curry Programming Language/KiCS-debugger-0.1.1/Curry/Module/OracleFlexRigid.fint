Prog "OracleFlexRigid" ["CEventOracle","Oracle","IOExts","FlexRigid","FlatCurry","Prelude","OracleFlatCurry","OraclePrelude"] [] [Func ("OracleFlexRigid","getFlexRigid") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FlexRigid","FlexRigidResult") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","_case_7") [Var 2,Var 1]])),Func ("OracleFlexRigid","getFlexRigid._#lambda2") 2 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FlatCurry","Expr") []))) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","_case_5") [Var 2,Var 1]])),Func ("OracleFlexRigid","joinCaseTypes") 3 Private (FuncType (TCons ("FlexRigid","FlexRigidResult") []) (FuncType (TCons ("FlexRigid","FlexRigidResult") []) (FuncType (TCons ("CEventOracle","Ref") []) (TCons ("FlexRigid","FlexRigidResult") [])))) (Rule [2,3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","_case_4") [Var 3,Var 2,Var 1]])),Func ("OracleFlexRigid","_case_4") 3 Private (TVar (-42)) (Rule [3,2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlexRigid","ConflictFR") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","_case_3") [Var 3,Var 1]]),Branch (Pattern ("FlexRigid","UnknownFR") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","_case_2") [Var 3,Var 1]]),Branch (Pattern ("FlexRigid","KnownFlex") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","_case_1") [Var 3,Var 1]]),Branch (Pattern ("FlexRigid","KnownRigid") []) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","_case_0") [Var 3,Var 1]])]])),Func ("OracleFlexRigid","_case_0") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlexRigid","ConflictFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []]),Branch (Pattern ("FlexRigid","UnknownFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownRigid") []]),Branch (Pattern ("FlexRigid","KnownFlex") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []]),Branch (Pattern ("FlexRigid","KnownRigid") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownRigid") []])]])),Func ("OracleFlexRigid","_case_1") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlexRigid","ConflictFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []]),Branch (Pattern ("FlexRigid","UnknownFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownFlex") []]),Branch (Pattern ("FlexRigid","KnownFlex") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownFlex") []]),Branch (Pattern ("FlexRigid","KnownRigid") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []])]])),Func ("OracleFlexRigid","_case_2") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlexRigid","ConflictFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []]),Branch (Pattern ("FlexRigid","UnknownFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","UnknownFR") []]),Branch (Pattern ("FlexRigid","KnownFlex") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownFlex") []]),Branch (Pattern ("FlexRigid","KnownRigid") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownRigid") []])]])),Func ("OracleFlexRigid","_case_3") 2 Private (TVar (-42)) (Rule [3,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 3) [Branch (Pattern ("FlexRigid","ConflictFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []]),Branch (Pattern ("FlexRigid","UnknownFR") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []]),Branch (Pattern ("FlexRigid","KnownFlex") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []]),Branch (Pattern ("FlexRigid","KnownRigid") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","ConflictFR") []])]])),Func ("OracleFlexRigid","_case_5") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Branch") [3,4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Var 4])]])),Func ("OracleFlexRigid","_case_7") 2 Private (TVar (-42)) (Rule [2,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","UnknownFR") []]),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","UnknownFR") []]),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Let [(17,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFlexRigid","joinCaseTypes") []],Comb ConsCall ("FlexRigid","UnknownFR") [],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlexRigid","getFlexRigid") []],Var 7,Var 1],Var 17]])),Branch (Pattern ("FlatCurry","Let") [8,9]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","getFlexRigid") [Var 9,Var 1]]),Branch (Pattern ("FlatCurry","Free") [10,11]) (Comb FuncCall ("CEventOracle","replace") [Var 1,Comb FuncCall ("OracleFlexRigid","getFlexRigid") [Var 11,Var 1]]),Branch (Pattern ("FlatCurry","Or") [12,13]) (Let [(18,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(19,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 18,Comb ConsCall ("Prelude",":") [Var 19,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("OracleFlexRigid","joinCaseTypes") [Comb FuncCall ("OracleFlexRigid","getFlexRigid") [Var 12,Var 1],Comb FuncCall ("OracleFlexRigid","getFlexRigid") [Var 13,Var 18],Var 19]])),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Let [(20,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(21,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(22,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []]),(23,Comb FuncCall ("CEventOracle","fresh") [Comb ConsCall ("Prelude","()") []])] (Comb FuncCall ("CEventOracle","expand") [Var 1,Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude",":") [Var 23,Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("OraclePrelude","foldr") [Comb FuncCall ("Oracle","compose") [Comb (FuncPartCall 2) ("Oracle","partCall") [],Comb (FuncPartCall 2) ("Oracle","compose") [Comb (FuncPartCall 3) ("Oracle","partFunc") []],Comb (FuncPartCall 3) ("OracleFlexRigid","joinCaseTypes") []],Comb FuncCall ("OracleFlexRigid","_case_6") [Var 14,Comb FuncCall ("OraclePrelude","==") [Var 14,Comb ConsCall ("FlatCurry","Flex") [],Var 1],Var 20],Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlexRigid","getFlexRigid") []],Comb ConsCall ("Prelude",":") [Var 15,Comb FuncCall ("OraclePrelude","map") [Comb (FuncPartCall 2) ("Oracle","partFunc") [Comb (FuncPartCall 2) ("OracleFlexRigid","getFlexRigid._#lambda2") []],Var 16,Var 21]],Var 22],Var 23]]))]])),Func ("OracleFlexRigid","_case_6") 3 Private (TVar (-42)) (Rule [14,15,1] (Comb FuncCall ("CEventOracle","replace") [Var 1,Case Rigid (Var 15) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownFlex") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CEventOracle","collapse") [Var 1,Comb ConsCall ("FlexRigid","KnownRigid") []])]]))] []