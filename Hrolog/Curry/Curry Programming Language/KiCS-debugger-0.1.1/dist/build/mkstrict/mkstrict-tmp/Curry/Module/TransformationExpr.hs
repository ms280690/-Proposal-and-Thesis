{-# OPTIONS -cpp #-}

{-# LANGUAGE RankNTypes, ScopedTypeVariables, MultiParamTypeClasses, FlexibleInstances, TypeSynonymInstances #-}

module Curry.Module.TransformationExpr (module Curry.Module.TransformationExpr) where

import Curry.RunTimeSystem
import Curry.Module.AbstractCurry
import Curry.Module.FlatCurry
import Curry.Module.FlatCurryGoodies
import Curry.Module.FlatToAbstractCurry
import Curry.Module.Prelude
import Curry.Module.SrcRef
import Curry.Module.TransformationComb
import Curry.Module.TransformationDebugInfo
import Curry.Module.TransformationMonad
import Curry.Module.AbstractHaskell



-- begin included



-- end included

c_transformExpr :: Curry.Module.FlatCurry.C_Expr -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr x1 x2@(Curry.Module.Prelude.T2 x5 x6) x3 x4 st = Curry.Module.TransformationMonad.op_62_62_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_setInfoTree(x4)))(Curry.Module.FlatCurryGoodies.c_trExpr(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46var'463))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46lit'463(x5)))(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa))(Curry.Module.Prelude.cp(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))))(Curry.Module.TransformationExpr.c_transformExpr'46comb'463(x5)))(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationExpr.c_transformExpr'46leT'463))(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationExpr.c_transformExpr'46freE'463))(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationExpr.c_transformExpr'46or'463))(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa))(Curry.Module.Prelude.cp(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))))(Curry.Module.TransformationExpr.c_transformExpr'46casE'463(x6)(x5)(x3)))(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationExpr.c_transformExpr'46br'463(x5)))(x1)(st))(st)
c_transformExpr x1 (Curry.Module.Prelude.T2Or i xs) x3 x4 st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformExpr(x1)(x)(x3)(x4)(st))(i)(xs)(st)
c_transformExpr x1 x x3 x4 st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformExpr")(x)



c_transformExpr'46var'463 :: Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46var'463 x1 st = Curry.Module.TransformationMonad.op_62_62_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_ignoreVarRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_ret(Curry.Module.Prelude.c_apply(Curry.Module.TransformationDebugInfo.c_wrapReturn(st))(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_xx(st))(x1)(st))(st))))(st)



c_transformExpr'46lit'463 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> Curry.Module.FlatCurry.C_Literal -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46lit'463 x1 x2 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_nextSrcRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46lit'463'46_'35lambda2(x2)(x1))))



c_transformExpr'46lit'463'46_'35lambda2 :: Curry.Module.FlatCurry.C_Literal -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46lit'463'46_'35lambda2 x1 x2 x3 st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationMonad.c_ret))(Curry.Module.TransformationExpr.c_transformLiteral(x1)(x2)(x3)(st))(st)



c_transformExpr'46comb'463 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> Curry.Module.FlatCurry.C_CombType -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46comb'463 x1 x2 x3 x4 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_nextSrcRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46comb'463'46_'35lambda3(x2)(x4)(x1)(x3))))



c_transformExpr'46comb'463'46_'35lambda3 :: Curry.Module.FlatCurry.C_CombType -> (Curry.Module.Prelude.List (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr))) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46comb'463'46_'35lambda3 x1 x2 x3 x4 x5 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.c_apply(Curry.Module.TransformationMonad.c_sequence(st))(x2)(st))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46comb'463'46_'35lambda3'46_'35lambda4(x1)(x3)(x4)(x5))))



c_transformExpr'46comb'463'46_'35lambda3'46_'35lambda4 :: Curry.Module.FlatCurry.C_CombType -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CExpr) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46comb'463'46_'35lambda3'46_'35lambda4 x1 x2 x3 x4 x5 st = Curry.Module.TransformationComb.c_transformComb(x1)(x3)(x5)(x2)(x4)(st)



c_transformExpr'46leT'463 :: (Curry.Module.Prelude.List (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)))) -> (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46leT'463 x1 x2 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_nextSrcRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46leT'463'46_'35lambda5(x2)(x1))))



c_transformExpr'46leT'463'46_'35lambda5 :: (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.List (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)))) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46leT'463'46_'35lambda5 x1 x2 x3 st = Curry.Module.TransformationExpr.c_transformExpr'46leT'463'46_'35lambda5_case_11(x1)(x2)(Curry.Module.Prelude.c_unzip(x2)(st))(st)



c_transformExpr'46leT'463'46_'35lambda5'46_'35lambda7 :: (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CExpr) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46leT'463'46_'35lambda5'46_'35lambda7 x1 x2 x3 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(x1)(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46leT'463'46_'35lambda5'46_'35lambda7'46_'35lambda8(x3)(x2))))



c_transformExpr'46leT'463'46_'35lambda5'46_'35lambda7'46_'35lambda8 :: (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CExpr) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.AbstractCurry.C_CExpr -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46leT'463'46_'35lambda5'46_'35lambda7'46_'35lambda8 x1 x2 x3 st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationMonad.c_ret))(Curry.Module.TransformationDebugInfo.c_insHook((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('l'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))(Curry.Module.Prelude.List))))(Curry.Module.TransformationDebugInfo.c_dummyDebugInfo(st))(Curry.Module.TransformationExpr.c_transformLet(Curry.Module.Prelude.c_zip(x2)(x1)(st))(x3)(st))(st))(st)



c_transformExpr'46freE'463 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46freE'463 x1 x2 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_nextSrcRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46freE'463'46_'35lambda9(x2)(x1))))



c_transformExpr'46freE'463'46_'35lambda9 :: (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46freE'463'46_'35lambda9 x1 x2 x3 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(x1)(Curry.Module.Prelude.op_46(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationMonad.c_ret))(Curry.Module.Prelude.op_46(Curry.Module.Prelude.pf(Curry.Module.TransformationDebugInfo.c_insHook((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('f'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))(Curry.Module.Prelude.List)))))(Curry.Module.TransformationDebugInfo.c_dummyDebugInfo(st))))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformFree(x2)))(st))(st)))



c_transformExpr'46or'463 :: (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46or'463 x1 x2 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_nextSrcRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10(x1)(x2))))



c_transformExpr'46or'463'46_'35lambda10 :: (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46or'463'46_'35lambda10 x1 x2 x3 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.c_apply(Curry.Module.TransformationMonad.c_sequence(st))((Curry.Module.Prelude.:<)(x1)((Curry.Module.Prelude.:<)(x2)(Curry.Module.Prelude.List)))(st))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11)))



c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11 :: (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CExpr) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11 x1@((Curry.Module.Prelude.:<) x2 x3) st = Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_10(x2)(x3)(st)
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11 (Curry.Module.Prelude.ListOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11(x)(st))(i)(xs)(st)
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformExpr.or.3._#lambda10._#lambda11")(x)



c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11'46_'35lambda12 :: Curry.Module.AbstractCurry.C_CExpr -> Curry.Module.AbstractCurry.C_CExpr -> Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11'46_'35lambda12 x1 x2 x3 st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationMonad.c_ret))(Curry.Module.Prelude.op_36(Curry.Module.Prelude.pf(Curry.Module.TransformationDebugInfo.c_insHook((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('o'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))(Curry.Module.Prelude.List)))(Curry.Module.TransformationDebugInfo.c_dummyDebugInfo(st))))(Curry.Module.TransformationExpr.c_transformOr(x3)(x1)(x2)(st))(st))(st)



c_transformExpr'46casE'463 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.FlatCurry.C_CaseType -> (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.List (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CBranchExpr))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46casE'463 x1 x2 x3 x4@Curry.Module.FlatCurry.C_Flex x5 x6 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.TransformationMonad.op_62_62_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_skipNextVar))(x5)(st))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46casE'463'46_'35lambda13(x6)(x1)(x2)(x3))))
c_transformExpr'46casE'463 x1 x2 x3 x4@Curry.Module.FlatCurry.C_Rigid x5 x6 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_nextSrcRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46casE'463'46_'35lambda15(x6)(x5)(x1)(x2)(x3))))
c_transformExpr'46casE'463 x1 x2 x3 (Curry.Module.FlatCurry.C_CaseTypeOr i xs) x5 x6 st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformExpr'46casE'463(x1)(x2)(x3)(x)(x5)(x6)(st))(i)(xs)(st)
c_transformExpr'46casE'463 x1 x2 x3 x x5 x6 st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformExpr.casE.3")(x)



c_transformExpr'46casE'463'46_'35lambda13 :: (Curry.Module.Prelude.List (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CBranchExpr))) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.AbstractCurry.C_CExpr -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46casE'463'46_'35lambda13 x1 x2 x3 x4 x5 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.c_apply(Curry.Module.TransformationMonad.c_sequence(st))(x1)(st))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46casE'463'46_'35lambda13'46_'35lambda14(x5)(x2)(x3)(x4))))



c_transformExpr'46casE'463'46_'35lambda13'46_'35lambda14 :: Curry.Module.AbstractCurry.C_CExpr -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CBranchExpr) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46casE'463'46_'35lambda13'46_'35lambda14 x1 x2 x3 x4 x5 st = Curry.Module.TransformationExpr.c_transformCase(Curry.Module.FlatCurry.C_Flex)(x1)(x5)(Curry.Module.Prelude.T2(x3)(x2))(x4)(Curry.Module.Prelude.List)(st)



c_transformExpr'46casE'463'46_'35lambda15 :: (Curry.Module.Prelude.List (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CBranchExpr))) -> (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46casE'463'46_'35lambda15 x1 x2 x3 x4 x5 x6 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(x2)(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46casE'463'46_'35lambda15'46_'35lambda16(x1)(x3)(x4)(x6)(x5))))



c_transformExpr'46casE'463'46_'35lambda15'46_'35lambda16 :: (Curry.Module.Prelude.List (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CBranchExpr))) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.AbstractCurry.C_CExpr -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46casE'463'46_'35lambda15'46_'35lambda16 x1 x2 x3 x4 x5 x6 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.c_apply(Curry.Module.TransformationMonad.c_sequence(st))(x1)(st))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46casE'463'46_'35lambda15'46_'35lambda16'46_'35lambda17(x6)(x2)(x3)(x4)(x5))))



c_transformExpr'46casE'463'46_'35lambda15'46_'35lambda16'46_'35lambda17 :: Curry.Module.AbstractCurry.C_CExpr -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CBranchExpr) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformExpr'46casE'463'46_'35lambda15'46_'35lambda16'46_'35lambda17 x1 x2 x3 x4 x5 x6 st = Curry.Module.TransformationExpr.c_transformCase(Curry.Module.FlatCurry.C_Rigid)(x1)(x6)(Curry.Module.Prelude.T2(x3)(x2))(x5)(x4)(st)



c_transformExpr'46brInfo'463 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_transformExpr'46brInfo'463 x1 x2 st = Curry.Module.TransformationDebugInfo.c_debugInfo(Curry.Module.TransformationDebugInfo.c_createStaticInfo(x1)(x2)(st))(Curry.Module.TransformationDebugInfo.c_simpleDynInfo(Curry.Module.FlatToAbstractCurry.c_presym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('['))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char(']'))(Curry.Module.Prelude.List)))(st))(st))(st)



c_transformExpr'46br'463 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> Curry.Module.FlatCurry.C_Pattern -> (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CBranchExpr)
c_transformExpr'46br'463 x1 x2 x3 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_nextSrcRefs))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46br'463'46_'35lambda18(x3)(x1)(x2))))



c_transformExpr'46br'463'46_'35lambda18 :: (Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> Curry.Module.FlatCurry.C_Pattern -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CBranchExpr)
c_transformExpr'46br'463'46_'35lambda18 x1 x2 x3 x4 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(x1)(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46br'463'46_'35lambda18'46_'35lambda19(x2)(x3)(x4))))



c_transformExpr'46br'463'46_'35lambda18'46_'35lambda19 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> Curry.Module.FlatCurry.C_Pattern -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.AbstractCurry.C_CExpr -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CBranchExpr)
c_transformExpr'46br'463'46_'35lambda18'46_'35lambda19 x1 x2 x3 x4 st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationMonad.c_ret))(Curry.Module.AbstractCurry.C_CBranch(Curry.Module.TransformationExpr.c_transformPattern(x2)(st))(Curry.Module.TransformationDebugInfo.c_insHook((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('b'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('a'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('n'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('c'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('h'))(Curry.Module.Prelude.List)))))))(Curry.Module.TransformationExpr.c_transformExpr'46brInfo'463(x1)(x3)(st))(Curry.Module.Prelude.c_apply(Curry.Module.TransformationDebugInfo.c_wrapEval(st))(x4)(st))(st)))(st)



c_cpresym :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_cpresym x1 st = Curry.Module.AbstractCurry.C_CSymbol(Curry.Module.TransformationDebugInfo.c_renameModule(Curry.Module.Prelude.T2(Curry.Module.FlatToAbstractCurry.c_prelude(st))(x1))(st))



c_transformLiteral :: Curry.Module.FlatCurry.C_Literal -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_transformLiteral x1 x2 x3 st = let {x5 = Curry.Module.Prelude.op_46(Curry.Module.Prelude.pf(Curry.Module.TransformationDebugInfo.c_insHook((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('l'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('i'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))(Curry.Module.Prelude.List))))(Curry.Module.TransformationDebugInfo.c_debugInfo(Curry.Module.TransformationDebugInfo.c_createStaticInfo(x2)(x3)(st))(Curry.Module.TransformationDebugInfo.c_simpleDynInfo(Curry.Module.FlatToAbstractCurry.c_presym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('['))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char(']'))(Curry.Module.Prelude.List)))(st))(st))(st))))(Curry.Module.TransformationDebugInfo.c_wrapReturn(st))(st)} in Curry.Module.TransformationExpr.c_transformLiteral_case_8(x5)(x1)(st)



c_createInt :: Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_createInt x1 st = Curry.Module.TransformationExpr.c_createInt_case_7(x1)(Curry.Module.Prelude.op_61_61(x1)(Curry.Module.Prelude.C_Zero)(st))(st)



c_createNat :: Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_createNat x1 st = Curry.Module.TransformationExpr.c_createNat_case_4(x1)(Curry.Module.Prelude.op_61_61(x1)(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_IHi))(st))(st)



c_transformFree :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.AbstractCurry.C_CExpr -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_transformFree x1 x2 st = Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36(st))(Curry.Module.FlatToAbstractCurry.c_presym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('o'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))(Curry.Module.Prelude.List))))))(st))(st))(Curry.Module.FlatToAbstractCurry.c_acyStr((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('f'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char(' '))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('n'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('o'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char(' '))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('i'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('m'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('p'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('l'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('m'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('n'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('d'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char(' '))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('y'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))(Curry.Module.Prelude.List)))))))))))))))))))))))))(st))(st)



c_transformLet :: (Curry.Module.Prelude.List (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int Curry.Module.AbstractCurry.C_CExpr)) -> Curry.Module.AbstractCurry.C_CExpr -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_transformLet x1 x2 st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CDoExpr))(Curry.Module.Prelude.op_43_43(Curry.Module.Prelude.c_map(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformLet'46_'35lambda21))(x1)(st))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.op_36(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CSExpr))(Curry.Module.Prelude.c_apply(Curry.Module.TransformationDebugInfo.c_wrapEval(st))(x2)(st))(st))(Curry.Module.Prelude.List))(st))(st)



c_transformLet'46_'35lambda21 :: (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int Curry.Module.AbstractCurry.C_CExpr) -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CStatement
c_transformLet'46_'35lambda21 x1@(Curry.Module.Prelude.T2 x2 x3) st = Curry.Module.AbstractCurry.C_CSPat(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_px(st))(x2)(st))(x3)
c_transformLet'46_'35lambda21 (Curry.Module.Prelude.T2Or i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformLet'46_'35lambda21(x)(st))(i)(xs)(st)
c_transformLet'46_'35lambda21 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformLet._#lambda21")(x)



c_transformOr :: Curry.Module.Prelude.C_Int -> Curry.Module.AbstractCurry.C_CExpr -> Curry.Module.AbstractCurry.C_CExpr -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_transformOr x1 x2 x3 st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CDoExpr))(Curry.Module.Prelude.op_43_43((Curry.Module.Prelude.:<)(Curry.Module.AbstractCurry.C_CSPat(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_px(st))(x1)(st))(x2))((Curry.Module.Prelude.:<)(Curry.Module.AbstractCurry.C_CSPat(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_px(st))(Curry.Module.Prelude.op_43(x1)(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_IHi))(st))(st))(x3))(Curry.Module.Prelude.List)))((Curry.Module.Prelude.:<)(Curry.Module.AbstractCurry.C_CSExpr(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_comb(Curry.Module.TransformationDebugInfo.c_renameModule(Curry.Module.Prelude.T2(Curry.Module.FlatToAbstractCurry.c_prelude(st))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('?'))(Curry.Module.Prelude.List)))(st))(st))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_xx(st))(x1)(st))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_xx(st))(Curry.Module.Prelude.op_43(x1)(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_IHi))(st))(st))(Curry.Module.Prelude.List)))(st)))(Curry.Module.Prelude.List))(st))(st)



c_transformCase :: Curry.Module.FlatCurry.C_CaseType -> Curry.Module.AbstractCurry.C_CExpr -> (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CBranchExpr) -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformCase x1 x2 x3 x4@(Curry.Module.Prelude.T2 x7 x8) x5 x6 st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_freshVar))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformCase'46_'35lambda22(x2)(x3)(x7)(Curry.Module.TransformationExpr.c_transformCase_case_1(x1)(Curry.Module.Prelude.op_61_61(x1)(Curry.Module.FlatCurry.C_Flex)(st))(st))(x4)(x6)(x5))))
c_transformCase x1 x2 x3 (Curry.Module.Prelude.T2Or i xs) x5 x6 st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformCase(x1)(x2)(x3)(x)(x5)(x6)(st))(i)(xs)(st)
c_transformCase x1 x2 x3 x x5 x6 st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformCase")(x)



c_transformCase'46info'4692 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CExpr
c_transformCase'46info'4692 x1 x2 x3 st = Curry.Module.TransformationDebugInfo.c_debugInfo(Curry.Module.TransformationDebugInfo.c_createStaticInfo(x1)(x2)(st))(Curry.Module.TransformationDebugInfo.c_simpleDynInfo(Curry.Module.FlatToAbstractCurry.c_list((Curry.Module.Prelude.:<)(Curry.Module.Prelude.c_apply(Curry.Module.TransformationDebugInfo.c_genTermCallVar(st))(x3)(st))(Curry.Module.Prelude.List))(st))(st))(st)



c_transformCase'46errorBranch'4692 :: (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CBranchExpr
c_transformCase'46errorBranch'4692 x1 x2 x3 x4 x5 x6 st = Curry.Module.AbstractCurry.C_CBranch(Curry.Module.AbstractCurry.C_CPVar(Curry.Module.Prelude.T2(Curry.Module.Prelude.C_Zero)((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('_'))(Curry.Module.Prelude.List))))(Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36_36(st))(Curry.Module.AbstractCurry.C_CSymbol(Curry.Module.Prelude.T2((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('D'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('M'))(Curry.Module.Prelude.List)))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('a'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('C'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('a'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('s'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))(Curry.Module.Prelude.List))))))))))))(st))((Curry.Module.Prelude.:<)(Curry.Module.TransformationDebugInfo.c_exceptionHook(x2)(Curry.Module.TransformationExpr.c_transformCase'46info'4692(x1)(x4)(x6)(st))(st))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36_36(st))(Curry.Module.AbstractCurry.C_CSymbol(Curry.Module.TransformationDebugInfo.c_renameFunc(x3)(st)))(st))(Curry.Module.Prelude.c_map(Curry.Module.FlatToAbstractCurry.c_xx(st))(Curry.Module.Prelude.c_apply(Curry.Module.TransformationExpr.c_init(st))(x5)(st))(st))(st))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_xx(st))(x6)(st))(Curry.Module.Prelude.List))))(st))



c_transformCase'46branches'4692 :: (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CBranchExpr) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CBranchExpr
c_transformCase'46branches'4692 x1 x2 x3 x4 x5 x6 x7 st = Curry.Module.Prelude.op_43_43(x1)((Curry.Module.Prelude.:<)(Curry.Module.TransformationExpr.c_transformCase'46errorBranch'4692(x2)(x3)(x4)(x5)(x6)(x7)(st))(Curry.Module.Prelude.List))(st)



c_transformCase'46_'35lambda22 :: Curry.Module.AbstractCurry.C_CExpr -> (Curry.Module.Prelude.List Curry.Module.AbstractCurry.C_CBranchExpr) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) -> (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char) (Curry.Module.Prelude.List Curry.Module.Prelude.C_Char)) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int) -> Curry.Module.Prelude.C_Int -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.T2 (Curry.Module.Prelude.T2 Curry.Module.Prelude.C_Int (Curry.Module.Prelude.C_Maybe (Curry.Module.Prelude.T2 (Curry.Module.Prelude.List (Curry.Module.SrcRef.C_AdrTree (Curry.Module.Prelude.List Curry.Module.Prelude.C_Int))) Curry.Module.Prelude.C_Bool))) Curry.Module.AbstractCurry.C_CExpr)
c_transformCase'46_'35lambda22 x1 x2 x3 x4 x5 x6 x7 x8 st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.cp(Curry.Module.Prelude.pa)(Curry.Module.Prelude.cp(Curry.Module.Prelude.pf))(Curry.Module.TransformationMonad.c_ret))(Curry.Module.AbstractCurry.C_CDoExpr((Curry.Module.Prelude.:<)(Curry.Module.AbstractCurry.C_CSPat(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_px(st))(x8)(st))(x1))((Curry.Module.Prelude.:<)(Curry.Module.AbstractCurry.C_CSExpr(Curry.Module.TransformationDebugInfo.c_insHook((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('c'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('a'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('s'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))(Curry.Module.Prelude.List)))))(Curry.Module.TransformationExpr.c_transformCase'46info'4692(x3)(x6)(x8)(st))(Curry.Module.AbstractCurry.C_CCase(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.c_xx(st))(x8)(st))(Curry.Module.TransformationExpr.c_transformCase'46branches'4692(x2)(x3)(x4)(x5)(x6)(x7)(x8)(st)))(st)))(Curry.Module.Prelude.List))))(st)



c_init :: (Curry t0) => Curry.RunTimeSystem.State -> Curry.Module.Prelude.Prim ((Curry.Module.Prelude.List t0) -> Curry.RunTimeSystem.State -> Curry.Module.Prelude.List t0)
c_init st = Curry.Module.Prelude.op_46(Curry.Module.Prelude.c_reverse(st))(Curry.Module.Prelude.op_46(Curry.Module.Prelude.pf(Curry.Module.Prelude.c_tail))(Curry.Module.Prelude.c_reverse(st))(st))(st)



c_transformPattern :: Curry.Module.FlatCurry.C_Pattern -> Curry.RunTimeSystem.State -> Curry.Module.AbstractCurry.C_CPattern
c_transformPattern x1@(Curry.Module.FlatCurry.C_Pattern x2 x3) st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CPComb(Curry.Module.TransformationDebugInfo.c_renameCons(x2)(st))))(Curry.Module.Prelude.c_map(Curry.Module.Prelude.op_46(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CPVar))(Curry.Module.Prelude.pf(Curry.Module.FlatToAbstractCurry.c_convertVariable))(st))(x3)(st))(st)
c_transformPattern x1@(Curry.Module.FlatCurry.C_LPattern x4) st = Curry.Module.TransformationExpr.c_transformPattern_case_0(x4)(st)
c_transformPattern (Curry.Module.FlatCurry.C_PatternOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformPattern(x)(st))(i)(xs)(st)
c_transformPattern x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformPattern")(x)



c_transformPattern_case_0 x4@(Curry.Module.FlatCurry.C_Intc x5) st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CPLit))(Curry.Module.FlatToAbstractCurry.c_convertLiteral(x4)(st))(st)
c_transformPattern_case_0 x4@(Curry.Module.FlatCurry.C_Floatc x6) st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CPLit))(Curry.Module.FlatToAbstractCurry.c_convertLiteral(x4)(st))(st)
c_transformPattern_case_0 x4@(Curry.Module.FlatCurry.C_Charc x7) st = Curry.Module.Prelude.op_36(Curry.Module.Prelude.pc(Curry.Module.AbstractCurry.C_CPLit))(Curry.Module.FlatToAbstractCurry.c_convertLiteral(x4)(st))(st)
c_transformPattern_case_0 (Curry.Module.FlatCurry.C_LiteralOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformPattern_case_0(x)(st))(i)(xs)(st)
c_transformPattern_case_0 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformPattern_case_0")(x)



c_transformCase_case_1 x1 x2@Curry.Module.Prelude.C_True st = (Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('n'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('p'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('R'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('u'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('l'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('s'))(Curry.Module.Prelude.List))))))))
c_transformCase_case_1 x1 x2@Curry.Module.Prelude.C_False st = (Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('n'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('p'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('C'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('a'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('s'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))(Curry.Module.Prelude.List)))))))
c_transformCase_case_1 x1 (Curry.Module.Prelude.C_BoolOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformCase_case_1(x1)(x)(st))(i)(xs)(st)
c_transformCase_case_1 x1 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformCase_case_1")(x)



c_createNat_case_4 x1 x2@Curry.Module.Prelude.C_True st = Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('I'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('H'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('i'))(Curry.Module.Prelude.List))))(st)
c_createNat_case_4 x1 x2@Curry.Module.Prelude.C_False st = Curry.Module.TransformationExpr.c_createNat_case_3(x1)(Curry.Module.Prelude.op_61_61(Curry.Module.Prelude.c_mod(x1)(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_O(Curry.Module.Prelude.C_IHi)))(st))(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_IHi))(st))(st)
c_createNat_case_4 x1 (Curry.Module.Prelude.C_BoolOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_createNat_case_4(x1)(x)(st))(i)(xs)(st)
c_createNat_case_4 x1 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.createNat_case_4")(x)



c_createNat_case_3 x1 x2@Curry.Module.Prelude.C_True st = Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36(st))(Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('I'))(Curry.Module.Prelude.List))(st))(st))(Curry.Module.TransformationExpr.c_createNat(Curry.Module.Prelude.c_div(Curry.Module.Prelude.op_45(x1)(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_IHi))(st))(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_O(Curry.Module.Prelude.C_IHi)))(st))(st))(st)
c_createNat_case_3 x1 x2@Curry.Module.Prelude.C_False st = Curry.Module.TransformationExpr.c_createNat_case_2(x1)(Curry.Module.Prelude.op_61_61(Curry.Module.Prelude.c_mod(x1)(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_O(Curry.Module.Prelude.C_IHi)))(st))(Curry.Module.Prelude.C_Zero)(st))(st)
c_createNat_case_3 x1 (Curry.Module.Prelude.C_BoolOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_createNat_case_3(x1)(x)(st))(i)(xs)(st)
c_createNat_case_3 x1 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.createNat_case_3")(x)



c_createNat_case_2 x1 x2@Curry.Module.Prelude.C_True st = Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36(st))(Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('O'))(Curry.Module.Prelude.List))(st))(st))(Curry.Module.TransformationExpr.c_createNat(Curry.Module.Prelude.c_div(x1)(Curry.Module.Prelude.C_Pos(Curry.Module.Prelude.C_O(Curry.Module.Prelude.C_IHi)))(st))(st))(st)
c_createNat_case_2 x1 (Curry.Module.Prelude.C_BoolOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_createNat_case_2(x1)(x)(st))(i)(xs)(st)
c_createNat_case_2 x1 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.createNat_case_2")(x)



c_createInt_case_7 x1 x2@Curry.Module.Prelude.C_True st = Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('Z'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('o'))(Curry.Module.Prelude.List)))))(st)
c_createInt_case_7 x1 x2@Curry.Module.Prelude.C_False st = Curry.Module.TransformationExpr.c_createInt_case_6(x1)(Curry.Module.Prelude.op_62(x1)(Curry.Module.Prelude.C_Zero)(st))(st)
c_createInt_case_7 x1 (Curry.Module.Prelude.C_BoolOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_createInt_case_7(x1)(x)(st))(i)(xs)(st)
c_createInt_case_7 x1 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.createInt_case_7")(x)



c_createInt_case_6 x1 x2@Curry.Module.Prelude.C_True st = Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36(st))(Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('P'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('o'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('s'))(Curry.Module.Prelude.List))))(st))(st))(Curry.Module.TransformationExpr.c_createNat(x1)(st))(st)
c_createInt_case_6 x1 x2@Curry.Module.Prelude.C_False st = Curry.Module.TransformationExpr.c_createInt_case_5(x1)(Curry.Module.Prelude.op_60(x1)(Curry.Module.Prelude.C_Zero)(st))(st)
c_createInt_case_6 x1 (Curry.Module.Prelude.C_BoolOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_createInt_case_6(x1)(x)(st))(i)(xs)(st)
c_createInt_case_6 x1 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.createInt_case_6")(x)



c_createInt_case_5 x1 x2@Curry.Module.Prelude.C_True st = Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36(st))(Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('N'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('e'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('g'))(Curry.Module.Prelude.List))))(st))(st))(Curry.Module.TransformationExpr.c_createNat(Curry.Module.Prelude.c_negate(x1)(st))(st))(st)
c_createInt_case_5 x1 (Curry.Module.Prelude.C_BoolOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_createInt_case_5(x1)(x)(st))(i)(xs)(st)
c_createInt_case_5 x1 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.createInt_case_5")(x)



c_transformLiteral_case_8 x5 x1@(Curry.Module.FlatCurry.C_Intc x6) st = Curry.Module.Prelude.op_36(x5)(Curry.Module.TransformationExpr.c_createInt(x6)(st))(st)
c_transformLiteral_case_8 x5 x1@(Curry.Module.FlatCurry.C_Charc x7) st = Curry.Module.Prelude.op_36(x5)(Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36(st))(Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('C'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('h'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('a'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('r'))(Curry.Module.Prelude.List)))))(st))(st))(Curry.Module.AbstractCurry.C_CLit(Curry.Module.FlatToAbstractCurry.c_convertLiteral(x1)(st)))(st))(st)
c_transformLiteral_case_8 x5 x1@(Curry.Module.FlatCurry.C_Floatc x8) st = Curry.Module.Prelude.op_36(x5)(Curry.Module.Prelude.c_apply(Curry.Module.Prelude.c_apply(Curry.Module.FlatToAbstractCurry.op_36_36(st))(Curry.Module.TransformationExpr.c_cpresym((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('F'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('l'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('o'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('a'))((Curry.Module.Prelude.:<)(Curry.Module.Prelude.C_Char('t'))(Curry.Module.Prelude.List))))))(st))(st))(Curry.Module.AbstractCurry.C_CLit(Curry.Module.FlatToAbstractCurry.c_convertLiteral(x1)(st)))(st))(st)
c_transformLiteral_case_8 x5 (Curry.Module.FlatCurry.C_LiteralOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformLiteral_case_8(x5)(x)(st))(i)(xs)(st)
c_transformLiteral_case_8 x5 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformLiteral_case_8")(x)



c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_10 x2 x3@((Curry.Module.Prelude.:<) x4 x5) st = Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_9(x2)(x4)(x5)(st)
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_10 x2 (Curry.Module.Prelude.ListOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_10(x2)(x)(st))(i)(xs)(st)
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_10 x2 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformExpr.or.3._#lambda10._#lambda11_case_10")(x)



c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_9 x2 x4 x5@Curry.Module.Prelude.List st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.c_freshVar))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11'46_'35lambda12(x2)(x4))))
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_9 x2 x4 (Curry.Module.Prelude.ListOr i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_9(x2)(x4)(x)(st))(i)(xs)(st)
c_transformExpr'46or'463'46_'35lambda10'46_'35lambda11_case_9 x2 x4 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformExpr.or.3._#lambda10._#lambda11_case_9")(x)



c_transformExpr'46leT'463'46_'35lambda5_case_11 x1 x2 x3@(Curry.Module.Prelude.T2 x4 x5) st = Curry.Module.Prelude.pf(Curry.Module.TransformationMonad.op_62_62_61_46(Curry.Module.Prelude.c_apply(Curry.Module.TransformationMonad.c_sequence(st))(x5)(st))(Curry.Module.Prelude.pf(Curry.Module.TransformationExpr.c_transformExpr'46leT'463'46_'35lambda5'46_'35lambda7(x1)(x4))))
c_transformExpr'46leT'463'46_'35lambda5_case_11 x1 x2 (Curry.Module.Prelude.T2Or i xs) st = Curry.RunTimeSystem.mapOr(\ x st -> Curry.Module.TransformationExpr.c_transformExpr'46leT'463'46_'35lambda5_case_11(x1)(x2)(x)(st))(i)(xs)(st)
c_transformExpr'46leT'463'46_'35lambda5_case_11 x1 x2 x st = Curry.RunTimeSystem.patternFail("TransformationExpr.transformExpr.leT.3._#lambda5_case_11")(x)


