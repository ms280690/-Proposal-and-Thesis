Prog "Wrapper" ["FileGoodies","FlatCurry","Prelude"] [] [Func ("Wrapper","prelude") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Wrapper","eventMod") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Wrapper","oracle") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Wrapper","ioexts") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Wrapper","newModName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Wrapper","newModNameQ") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0])) (Rule [] (Var 0)),Func ("Wrapper","tRef") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Var 0)),Func ("Wrapper","tR") 0 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (Rule [] (Var 0)),Func ("Wrapper","lET") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","ref") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("Wrapper","flatFunc") 0 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","flatCons") 0 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","func") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","list") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","string") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","nil") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Var 0)),Func ("Wrapper","colon") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","run") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","event") 4 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))))) (Rule [] (Var 0)),Func ("Wrapper","collapse") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","closeRef") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","extIO") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","unfold") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [] (Var 0)),Func ("Wrapper","replace") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","expand") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [] (Var 0)),Func ("Wrapper","fresh") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Var 0)),Func ("Wrapper","unit") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Var 0)),Func ("Wrapper","apply") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","listFunc") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])))) (Rule [] (Var 0)),Func ("Wrapper","compose") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","unknown") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","oracleTry") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","partCons") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","partFunc") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","pc") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","pf") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","partCall") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","partial") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","dotted") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","inOraclePartCall") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("Wrapper","errorCall") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","safeIOResult") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Wrapper","specialIOs") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Var 0)),Func ("Wrapper","implementedInOracle") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Var 0)),Func ("Wrapper","arityInOracle") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Wrapper","addOrc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Wrapper","addFcy") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0))] []