Prog "Make" ["Directory","Distribution","FileGoodies","FiniteMap","FlatCurry","IOExts","Prelude","Sort","System","Time","FlatCurryGoodies"] [TypeSyn ("Make","ModuleName") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("Make","Path") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("Make","FileName") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("Make","TestAct") Private [0] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]]))),TypeSyn ("Make","ProgAct") Private [0] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 0])))),TypeSyn ("Make","Done") Private [0] (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]]),TypeSyn ("Make","Getter") Private [0] (FuncType (TCons ("Make","Parameter") []) (TVar 0)),TypeSyn ("Make","Setter") Private [0] (FuncType (TVar 0) (FuncType (TCons ("Make","Parameter") []) (TCons ("Make","Parameter") []))),Type ("Make","Parameter") Public [] [Cons ("Make","Parameter") 5 Private [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") [],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("Make","defaults") 0 Private (TCons ("Make","Parameter") []) (Rule [] (Comb ConsCall ("Make","Parameter") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","[]") []])),Func ("Make","quiet") 1 Public (FuncType (TCons ("Make","Parameter") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Make","Parameter") [2,3,4,5,6]) (Var 2)])),Func ("Make","setQuiet") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Make","Parameter") []) (TCons ("Make","Parameter") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Make","Parameter") [3,4,5,6,7]) (Comb ConsCall ("Make","Parameter") [Var 1,Var 4,Var 5,Var 6,Var 7])])),Func ("Make","force") 1 Public (FuncType (TCons ("Make","Parameter") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Make","Parameter") [2,3,4,5,6]) (Var 3)])),Func ("Make","setForce") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Make","Parameter") []) (TCons ("Make","Parameter") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Make","Parameter") [3,4,5,6,7]) (Comb ConsCall ("Make","Parameter") [Var 3,Var 1,Var 5,Var 6,Var 7])])),Func ("Make","output") 1 Public (FuncType (TCons ("Make","Parameter") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Make","Parameter") [2,3,4,5,6]) (Var 4)])),Func ("Make","setOutput") 2 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Make","Parameter") []) (TCons ("Make","Parameter") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Make","Parameter") [3,4,5,6,7]) (Comb ConsCall ("Make","Parameter") [Var 3,Var 4,Var 1,Var 6,Var 7])])),Func ("Make","main") 1 Private (FuncType (TCons ("Make","Parameter") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Make","Parameter") [2,3,4,5,6]) (Var 5)])),Func ("Make","setMain") 2 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Make","Parameter") []) (TCons ("Make","Parameter") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Make","Parameter") [3,4,5,6,7]) (Comb ConsCall ("Make","Parameter") [Var 3,Var 4,Var 5,Var 1,Var 7])])),Func ("Make","modulename") 1 Public (FuncType (TCons ("Make","Parameter") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Make","Parameter") [2,3,4,5,6]) (Var 6)])),Func ("Make","setModulename") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Make","Parameter") []) (TCons ("Make","Parameter") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Make","Parameter") [3,4,5,6,7]) (Comb ConsCall ("Make","Parameter") [Var 3,Var 4,Var 5,Var 6,Var 1])])),Func ("Make","parseArgs") 0 Public (TCons ("Prelude","IO") [TCons ("Make","Parameter") []]) (Rule [] (Let [(1,Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getArgs") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Make","parseArgs.parse.50") [Var 1,Comb FuncCall ("Make","defaults") []]]]))),Func ("Make","parseArgs.parse.50") 3 Private (FuncType (TCons ("Make","Parameter") []) (FuncType (TCons ("Make","Parameter") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Make","Parameter") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 1),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Make","parseArgs.parse.50") [Var 1,Comb FuncCall ("Make","setQuiet") [Comb ConsCall ("Prelude","True") [],Var 2],Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Make","parseArgs.parse.50") [Var 1,Comb FuncCall ("Make","setQuiet") [Comb ConsCall ("Prelude","True") [],Var 2],Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Make","parseArgs.parse.50") [Var 1,Comb FuncCall ("Make","setForce") [Comb ConsCall ("Prelude","True") [],Var 2],Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Make","parseArgs.parse.50") [Var 1,Comb FuncCall ("Make","setForce") [Comb ConsCall ("Prelude","True") [],Var 2],Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("Make","parseArgs.parse.50") [Var 1,Comb FuncCall ("Make","setOutput") [Comb ConsCall ("Prelude","Just") [Var 6],Var 2],Var 7]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("Make","parseArgs.parse.50") [Var 1,Comb FuncCall ("Make","setMain") [Comb ConsCall ("Prelude","Just") [Var 8],Var 2],Var 9]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Make","setModulename") [Var 4,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])])),Func ("Make","make") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]]))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 0])))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [] (Comb (FuncPartCall 4) ("Make","makeWithFrontendParams") [Comb FuncCall ("Distribution","defaultParams") []])),Func ("Make","makeWithFrontendParams") 5 Public (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]]))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 0])))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("FileGoodies","splitDirectoryBaseName") [Var 3])] (Let [(7,Comb FuncCall ("Make","makeWithFrontendParams._#selFP3#dir") [Var 6])] (Let [(8,Comb FuncCall ("Make","makeWithFrontendParams._#selFP4#modu") [Var 6])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Distribution","getLoadPath") [],Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Distribution","fullPath") [Var 1]],Comb (FuncPartCall 1) ("Make","makeWithFrontendParams._#lambda4") [Var 5,Var 7,Var 1,Var 8,Var 2,Var 4]]))))),Func ("Make","makeWithFrontendParams._#selFP3#dir") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Make","makeWithFrontendParams._#selFP4#modu") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Make","makeWithFrontendParams._#lambda4") 7 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 209]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 209])))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 209]]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))) (Rule [1,2,3,4,5,6,7] (Let [(8,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Var 7),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 2,Var 7])])] (Let [(9,Comb FuncCall ("Distribution","setFullPath") [Var 8,Var 3])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FileGoodies","lookupFileInPath") [Var 4,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []]],Var 8],Comb (FuncPartCall 1) ("Make","makeWithFrontendParams._#lambda4._#lambda5") [Var 1,Var 8,Var 4,Var 9,Var 5,Var 6]])))),Func ("Make","makeWithFrontendParams._#lambda4._#lambda5") 7 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 209]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 209])))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 209]]))) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Make","unless") [Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("Prelude","Nothing") []],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Make","unless") [Var 5],Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Distribution","callFrontendWithParams") [Comb ConsCall ("Distribution","FCY") [],Comb FuncCall ("Distribution","setQuiet") [Comb ConsCall ("Prelude","True") [],Var 4],Var 3],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Make","unless") [Var 5],Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IOExts","newIORef") [Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Make","makeWithFrontendParams._#lambda4._#lambda5._#lambda6") []]],Comb (FuncPartCall 1) ("Make","makeWithFrontendParams._#lambda4._#lambda5._#lambda7") [Var 1,Var 2,Var 3,Var 6]]])),Func ("Make","makeWithFrontendParams._#lambda4._#lambda5._#lambda6") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","leqString") [],Var 1],Var 2]])),Func ("Make","makeWithFrontendParams._#lambda4._#lambda5._#lambda7") 5 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 209]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 209])))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 209]]))) (FuncType (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 209]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Make","workUpDependence") [Var 2,Var 5,Var 4,Var 1,Var 3],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","()") []]])),Func ("Make","workUpDependence") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]]))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 0])))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IOExts","readIORef") [Var 2],Comb (FuncPartCall 1) ("Make","workUpDependence._#lambda8") [Var 4,Var 2,Var 5,Var 1,Var 3]])),Func ("Make","workUpDependence._#lambda8") 6 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 141]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 141])))) (FuncType (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 141]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 141]]))) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 141]) (TCons ("Prelude","IO") [TVar 141]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Make","process") [Var 4,Var 2,Var 5,Var 1,Var 3],Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("FiniteMap","lookupFM") [Var 6,Var 3]])),Func ("Make","process") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]]))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 0])))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FileGoodies","getFileInPath") [Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Var 1],Comb (FuncPartCall 1) ("Make","process._#lambda9") [Var 4,Var 2,Var 5,Var 1,Var 3]])),Func ("Make","process._#lambda9") 6 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 167]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 167])))) (FuncType (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 167]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 167]]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 167]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Make","fastReadImports") [Var 6],Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("Make","workUpDependence") [Var 4,Var 2,Var 5,Var 1]]],Comb (FuncPartCall 1) ("Make","process._#lambda9._#lambda10") [Var 1,Var 2,Var 6,Var 3,Var 5]])),Func ("Make","process._#lambda9._#lambda10") 6 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TVar 167]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TVar 167])))) (FuncType (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 167]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 167]]))) (FuncType (TCons ("Prelude","[]") [TVar 167]) (TCons ("Prelude","IO") [TVar 167]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","++") [Comb FuncCall ("FileGoodies","dirName") [Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Var 7],Var 4],Comb (FuncPartCall 1) ("Prelude","maybe") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurryFile") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 7],Var 6]],Comb (FuncPartCall 1) ("Prelude","return") []]],Comb (FuncPartCall 1) ("Make","process._#lambda9._#lambda10._#lambda11") [Var 2,Var 4]]))),Func ("Make","process._#lambda9._#lambda10._#lambda11") 3 Private (FuncType (TCons ("IOExts","IORef") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 167]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TVar 167) (TCons ("Prelude","IO") [TVar 167])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Make","updateIORef") [Var 1,Comb (FuncPartCall 1) ("Make","process._#lambda9._#lambda10._#lambda11._#lambda12") [Var 2,Var 3]],Comb FuncCall ("Prelude","return") [Var 3]])),Func ("Make","process._#lambda9._#lambda10._#lambda11._#lambda12") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TVar 167) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 167]) (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 167])))) (Rule [1,2,3] (Comb FuncCall ("FiniteMap","addToFM") [Var 3,Var 1,Var 2])),Func ("Make","obsolete") 6 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 5],Var 6])] (Let [(8,Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","++") [Var 5],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","$") [],Var 6]],Var 3])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 7],Comb (FuncPartCall 1) ("Make","obsolete._#lambda15") [Var 4,Var 7,Var 8,Var 1]])))),Func ("Make","obsolete.isNewerThan.86") 2 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 2],Comb (FuncPartCall 1) ("Make","obsolete.isNewerThan.86._#lambda13") [Var 2,Var 1]])),Func ("Make","obsolete.isNewerThan.86._#lambda13") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","not") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Var 1],Comb (FuncPartCall 1) ("Make","obsolete.isNewerThan.86._#lambda13._#lambda14") [Var 2]])])),Func ("Make","obsolete.isNewerThan.86._#lambda13._#lambda14") 2 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Time","compareClockTime") [Var 1,Var 2],Comb ConsCall ("Prelude","GT") []]])),Func ("Make","obsolete._#lambda15") 5 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TVar 287])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 287]])))))) (Rule [1,2,3,4,5] (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Var 2],Comb (FuncPartCall 1) ("Make","obsolete._#lambda15._#lambda16") [Var 1,Var 2,Var 3,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Make","unless") [Var 4],Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 2]]],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []]])])),Func ("Make","obsolete._#lambda15._#lambda16") 5 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TVar 287])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 287]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("Make","obsolete.isNewerThan.86") [Var 5]],Var 3],Comb (FuncPartCall 1) ("Make","obsolete._#lambda15._#lambda16._#lambda17") [Var 1,Var 2,Var 3,Var 4]])),Func ("Make","obsolete._#lambda15._#lambda16._#lambda17") 5 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TVar 287])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 287]])))))) (Rule [1,2,3,4,5] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","or") [],Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Make","unless") [Var 4],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 2]]],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Make","unless") [Var 4],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 2]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("Prelude","Just") []]]])])),Func ("Make","fastReadImports") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("Make","fastReadImports._#lambda18") []])),Func ("Make","fastReadImports._#lambda18") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Make","strings") [Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  ']')],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '[')],Var 1]]]])),Func ("Make","strings") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '"')]],Var 3]) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Make","strings") [Var 7]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Make","strings") [Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Make","updateIORef") 2 Private (FuncType (TCons ("IOExts","IORef") [TVar 0]) (FuncType (FuncType (TVar 0) (TVar 0)) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IOExts","readIORef") [Var 1],Comb (FuncPartCall 1) ("Make","updateIORef._#lambda20") [Var 2,Var 1]])),Func ("Make","updateIORef._#lambda20") 3 Private (FuncType (FuncType (TVar 127) (TVar 127)) (FuncType (TCons ("IOExts","IORef") [TVar 127]) (FuncType (TVar 127) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("IOExts","writeIORef") [Var 2,Comb FuncCall ("Prelude","apply") [Var 1,Var 3]])),Func ("Make","unless") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","()") []]),Branch (Pattern ("Prelude","False") []) (Var 2)]))] []