Prog "PrettyFlat" ["Char","FlatCurry","FlatCurryGoodies","Maybe","Prelude","Pretty","StyledText","System"] [TypeSyn ("PrettyFlat","Precs") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]])] [Func ("PrettyFlat","prelude") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("PrettyFlat","arrow") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("PrettyFlat","bar") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","char") [Lit (Charc  '|')]])),Func ("PrettyFlat","dcolon") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("PrettyFlat","precFillEncloseSep") 6 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("PrettyFlat","precFillEncloseSep.pre.11") [Var 1,Var 2,Var 3],Comb FuncCall ("PrettyFlat","precFillEncloseSep.pre.11") [Var 1,Var 2,Var 4],Var 5,Var 6])),Func ("PrettyFlat","precFillEncloseSep.pre.11") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb ConsCall ("Prelude","True") []) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("PrettyFlat","isInfixName") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("PrettyFlat","infixIDs") []]],Var 3])])),Func ("PrettyFlat","infixIDs") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '%'),Comb ConsCall ("Prelude",":") [Lit (Charc  '^'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]])),Func ("PrettyFlat","isTupleName") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("PrettyFlat","prelude") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","take") [Lit (Intc  2),Var 3]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]])])),Func ("PrettyFlat","showStyledProg") 0 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("PrettyFlat","prettyProg") [Lit (Intc  78)])),Func ("PrettyFlat","prettyProg") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("PrettyFlat","progDoc") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updProgExps") [],Comb FuncCall ("PrettyFlat","elimApp") []]]])),Func ("PrettyFlat","prettyTypeExpr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Lit (Intc  78)],Comb (FuncPartCall 1) ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","False") []]])),Func ("PrettyFlat","prettyTypes") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Lit (Intc  78)],Comb FuncCall ("PrettyFlat","typesDoc") [Var 1]])),Func ("PrettyFlat","prettyOps") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Lit (Intc  78)],Comb (FuncPartCall 1) ("PrettyFlat","opsDoc") []])),Func ("PrettyFlat","showProg") 0 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("StyledText","plainText") [],Comb FuncCall ("PrettyFlat","showStyledProg") []])),Func ("PrettyFlat","printStyledProg") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurry") [Var 1],Comb FuncCall ("Prelude",".") [Comb FuncCall ("StyledText","printStyledText") [],Comb FuncCall ("PrettyFlat","showStyledProg") []]])),Func ("PrettyFlat","mainPrint") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getArgs") [],Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("PrettyFlat","printProg") []]])),Func ("PrettyFlat","printProg") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurryFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("PrettyFlat","showProg") []]])),Func ("PrettyFlat","keyword") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("StyledText","magentaDoc") [],Comb (FuncPartCall 1) ("Pretty","text") []])),Func ("PrettyFlat","consname") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("StyledText","greenDoc") [],Comb (FuncPartCall 1) ("Pretty","text") []])),Func ("PrettyFlat","operator") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("StyledText","blueDoc") [])),Func ("PrettyFlat","literal") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("StyledText","cyanDoc") [])),Func ("PrettyFlat","marked") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("StyledText","bgYellowDoc") [],Comb FuncCall ("StyledText","boldDoc") []])),Func ("PrettyFlat","block") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","group") [],Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)]])),Func ("PrettyFlat","def") 3 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Let [(4,Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","fillSep") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("PrettyFlat","varDoc") [],Var 2]]]])])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","block") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Pretty","<>") [Var 1,Var 4]],Var 3]]))),Func ("PrettyFlat","app") 2 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","block") [],Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","space") [],Comb ConsCall ("Prelude",":") [Var 1,Var 2]]])])),Func ("PrettyFlat","layout") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","align") [],Comb (FuncPartCall 1) ("Pretty","compose") [Comb (FuncPartCall 2) ("Pretty","combine") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","linesep") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("PrettyFlat","qname") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyFlat","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("PrettyFlat","isTupleName") [Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","text") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("PrettyFlat","isInfixName") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","text") [Var 4]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","consname") [],Var 3],Comb FuncCall ("Pretty","dot") []],Comb FuncCall ("PrettyFlat","qname.txt.65") [Var 4]]]])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyFlat","qname.txt.65") [Comb FuncCall ("PrettyFlat","correctName") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","consname") [],Var 3],Comb FuncCall ("Pretty","dot") []],Comb FuncCall ("PrettyFlat","qname.txt.65") [Var 4]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("PrettyFlat","qname.txt.65") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Char","isUpper") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","consname") [],Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Var 2,Var 3]])])])),Func ("PrettyFlat","correctName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]],Var 1])] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Charc  '_')]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]))),Func ("PrettyFlat","<$>>") 2 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Var 1],Comb FuncCall ("Pretty","line") []],Var 2])),Func ("PrettyFlat","progDoc") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("PrettyFlat","<$>>") [Comb FuncCall ("PrettyFlat","<$>>") [Comb FuncCall ("PrettyFlat","<$>>") [Comb FuncCall ("PrettyFlat","<$>>") [Comb FuncCall ("PrettyFlat","moduleHeaderDoc") [Var 2,Comb FuncCall ("PrettyFlat","exportedNames") [Var 2,Var 1]],Comb FuncCall ("PrettyFlat","impsDoc") [Var 3]],Comb FuncCall ("PrettyFlat","opsDoc") [Var 6]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","typesDoc") [Var 2],Var 4]],Comb FuncCall ("PrettyFlat","funcsDoc") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","precs") [],Var 6],Var 2,Var 5]])])),Func ("PrettyFlat","precs") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","precs._#lambda3") []])),Func ("PrettyFlat","precs._#lambda3") 1 Private (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Op") [2,3,4]) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 4])])),Func ("PrettyFlat","exportedNames") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","exportedNames.typeExpDoc.89") [Var 1],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Comb ConsCall ("FlatCurry","Public") []],Comb FuncCall ("FlatCurryGoodies","typeVisibility") []],Var 5]],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("PrettyFlat","qname") [Var 1],Comb FuncCall ("FlatCurryGoodies","funcName") []],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Comb ConsCall ("FlatCurry","Public") []],Comb FuncCall ("FlatCurryGoodies","funcVisibility") []],Var 6]]])])),Func ("PrettyFlat","exportedNames.typeExpDoc.89") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Comb ConsCall ("FlatCurry","Public") []],Comb FuncCall ("FlatCurryGoodies","consVisibility") []],Comb FuncCall ("FlatCurryGoodies","trType") [Comb (FuncPartCall 4) ("PrettyFlat","exportedNames.typeExpDoc.89._#lambda4") [],Comb (FuncPartCall 4) ("PrettyFlat","exportedNames.typeExpDoc.89._#lambda5") [],Var 2]])] (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyFlat","qname") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 2]],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])]]))),Func ("PrettyFlat","exportedNames.typeExpDoc.89._#lambda4") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]))))) (Rule [1,2,3,4] (Var 4)),Func ("PrettyFlat","exportedNames.typeExpDoc.89._#lambda5") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","[]") [])),Func ("PrettyFlat","moduleHeaderDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","consname") [],Var 1]]],Comb FuncCall ("PrettyFlat","exportsDoc") [Var 2]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("PrettyFlat","exportsDoc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","nest") [Lit (Intc  1),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Pretty","lparen") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","fillSep") [],Comb FuncCall ("Pretty","punctuate") [Comb FuncCall ("Pretty","comma") [],Var 1]]]]],Comb FuncCall ("Pretty","rparen") []]]])),Func ("PrettyFlat","impsDoc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vcat") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("PrettyFlat","consname") []],Var 1]])),Func ("PrettyFlat","opsDoc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vcat") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","opDoc") [],Var 1]])),Func ("PrettyFlat","opDoc") 1 Public (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Op") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Case  Rigid (Comb FuncCall ("PrettyFlat","isInfixName") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb FuncCall ("Prelude","++") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]])])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("PrettyFlat","opDoc.fixDoc.114") [Var 3]]],Comb FuncCall ("Pretty","int") [Var 4]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","text") [Var 7]]]))])])),Func ("PrettyFlat","opDoc.fixDoc.114") 1 Private (FuncType (TCons ("FlatCurry","Fixity") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","InfixOp") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("FlatCurry","InfixlOp") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("FlatCurry","InfixrOp") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]])])),Func ("PrettyFlat","typesDoc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("Pretty","Doc") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","vcat") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","typeDoc") [Var 1]]])),Func ("PrettyFlat","typeDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Comb FuncCall ("PrettyFlat","def") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 3]],Var 5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","consDeclsDoc") [Var 1],Var 6]]),Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Comb FuncCall ("PrettyFlat","def") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 7]],Var 9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","equals") []]],Comb FuncCall ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","False") [],Var 10]]])])),Func ("PrettyFlat","varDoc") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","text") [],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude",":") [Lit (Charc  'x')],Comb (FuncPartCall 1) ("Prelude","show") []]])),Func ("PrettyFlat","tvarDoc") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 1,Lit (Intc  25)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","show") [Var 1]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Lit (Intc  97),Var 1]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("PrettyFlat","consDeclsDoc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Pretty","Doc") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","equals") []],Comb FuncCall ("Pretty","space") []],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyFlat","bar") [],Comb FuncCall ("Pretty","space") []]],Comb (FuncPartCall 1) ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Pretty","<>") [],Comb FuncCall ("Pretty","space") []],Comb (FuncPartCall 1) ("PrettyFlat","consDeclDoc") [Var 1]]]])),Func ("PrettyFlat","consDeclDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Comb FuncCall ("PrettyFlat","app") [Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","True") []],Var 6]])])),Func ("PrettyFlat","typeExprDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","TVar") [4]) (Comb FuncCall ("PrettyFlat","tvarDoc") [Var 4]),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyFlat","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","brackets") [],Comb FuncCall ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude","head") [Var 6]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("PrettyFlat","isTupleName") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","tupled") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","False") []],Var 6]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyFlat","par") [Var 2],Comb FuncCall ("PrettyFlat","app") [Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","True") []],Var 6]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]),Branch (Pattern ("FlatCurry","FuncType") [7,8]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyFlat","par") [Var 2],Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("PrettyFlat","arrow") []],Comb FuncCall ("Pretty","space") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","True") []],Comb FuncCall ("FlatCurryGoodies","argTypes") [Var 3]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("FlatCurryGoodies","resultType") [Var 3]],Comb ConsCall ("Prelude","[]") []]]]])])),Func ("PrettyFlat","par") 1 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","parens") []),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","id") [])])),Func ("PrettyFlat","funcsDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vcat") [],Comb FuncCall ("Pretty","punctuate") [Comb FuncCall ("Pretty","line") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","funcDoc") [Var 1,Var 2],Var 3]]])),Func ("PrettyFlat","funcDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Func") [4,5,6,7,8]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("PrettyFlat","funcTypeDeclDoc") [Var 2,Var 4,Var 7]],Comb FuncCall ("PrettyFlat","ruleDoc") [Var 1,Var 2,Var 4,Var 8]])])),Func ("PrettyFlat","funcTypeDeclDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("PrettyFlat","def") [Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("PrettyFlat","funcTypeDoc") [Var 1,Comb FuncCall ("FlatCurryGoodies","argTypes") [Var 3],Comb FuncCall ("FlatCurryGoodies","resultType") [Var 3]]])),Func ("PrettyFlat","funcTypeDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyFlat","dcolon") [],Comb FuncCall ("Pretty","space") []],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyFlat","arrow") [],Comb FuncCall ("Pretty","space") []],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Pretty","<>") [],Comb FuncCall ("Pretty","space") []],Comb (FuncPartCall 1) ("PrettyFlat","typeExprDoc") [Var 1,Comb ConsCall ("Prelude","True") []]],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]])),Func ("PrettyFlat","ruleDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Pretty","Doc") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Rule") [5,6]) (Comb FuncCall ("PrettyFlat","def") [Comb FuncCall ("PrettyFlat","qname") [Var 2,Var 3],Var 5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","equals") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 2,Comb ConsCall ("Prelude","False") [],Var 6]]]]),Branch (Pattern ("FlatCurry","External") [7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyFlat","qname") [Var 2,Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])])),Func ("PrettyFlat","expDoc") 5 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Pretty","Doc") [])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("PrettyFlat","expDoc2") [Var 1,Lit (Intc  0),Var 3,Var 4,Var 5],Comb (FuncPartCall 1) ("PrettyFlat","expDoc._#lambda6") [Var 3,Var 1],Comb FuncCall ("PrettyFlat","toList") [Var 5]],Comb (FuncPartCall 1) ("PrettyFlat","expDoc._#lambda7") [],Comb FuncCall ("PrettyFlat","toString") [Var 5]])),Func ("PrettyFlat","expDoc._#lambda6") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","list") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","expDoc") [Var 2,Lit (Intc  0),Var 1,Comb ConsCall ("Prelude","False") []],Var 3]])),Func ("PrettyFlat","expDoc._#lambda7") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","consname") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","literal") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","dquotes") [],Comb FuncCall ("Pretty","text") [Var 1]]])])),Func ("PrettyFlat","expDoc2") 5 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Pretty","Doc") [])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("FlatCurry","Var") [6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","varDoc") [],Var 6]),Branch (Pattern ("FlatCurry","Lit") [7]) (Comb FuncCall ("PrettyFlat","litDoc") [Var 7]),Branch (Pattern ("FlatCurry","Comb") [8,9,10]) (Let [(11,Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Pretty","lparen") [],Comb FuncCall ("Pretty","rparen") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") []])])] (Let [(12,Comb FuncCall ("PrettyFlat","expDoc2._#selFP3#lbr") [Var 11])] (Let [(13,Comb FuncCall ("PrettyFlat","expDoc2._#selFP4#rbr") [Var 11])] (Let [(14,Case  Rigid (Comb FuncCall ("Prelude","lookup") [Var 9,Var 1]) [Branch (Pattern ("Prelude","Just") [15]) (Var 15),Branch (Pattern ("Prelude","Nothing") []) (Lit (Intc  0))])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("FlatCurry","FuncCall") []],Comb FuncCall ("Prelude","==") [Var 9,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyFlat","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyFlat","par") [Var 4],Comb FuncCall ("PrettyFlat","app") [Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Prelude","!!") [Var 10,Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Prelude","!!") [Var 10,Lit (Intc  1)]],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("FlatCurry","ConsCall") []],Comb FuncCall ("PrettyFlat","isTupleName") [Var 9]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","tupled") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Comb ConsCall ("Prelude","False") []],Var 10]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("PrettyFlat","isInfixName") [Var 9],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 10],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyFlat","precFillEncloseSep") [Var 14,Var 2,Var 12,Var 13,Comb FuncCall ("Pretty","empty") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Var 14,Var 3,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Prelude","!!") [Var 10,Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","snd") [Var 9]]]],Comb FuncCall ("Pretty","space") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Var 14,Var 3,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Prelude","!!") [Var 10,Lit (Intc  1)]],Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyFlat","par") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 10]],Var 4]],Comb FuncCall ("PrettyFlat","app") [Comb FuncCall ("PrettyFlat","qname") [Var 3,Var 9],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Comb ConsCall ("Prelude","True") []],Var 10]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]))))),Branch (Pattern ("FlatCurry","Let") [16,17]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyFlat","par") [Var 4],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","letBindsDoc") [Var 1,Var 3],Var 16]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Comb ConsCall ("Prelude","False") [],Var 17]]]]),Branch (Pattern ("FlatCurry","Free") [18,19]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyFlat","par") [Var 4],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","fillSep") [],Comb FuncCall ("Pretty","punctuate") [Comb FuncCall ("Pretty","comma") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("PrettyFlat","varDoc") [],Var 18]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Comb ConsCall ("Prelude","False") [],Var 19]]]]),Branch (Pattern ("FlatCurry","Or") [20,21]) (Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Var 4,Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyFlat","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 20,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("FlatCurry","Case") [22,23,24]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyFlat","par") [Var 4],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyFlat","caseTypeDoc") [Var 22],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 3,Comb ConsCall ("Prelude","False") [],Var 23]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","keyword") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","layout") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","branchDoc") [Var 1,Var 3],Var 24]]]]])])),Func ("PrettyFlat","expDoc2._#selFP3#lbr") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Pretty","Doc") [],TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("PrettyFlat","expDoc2._#selFP4#rbr") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Pretty","Doc") [],TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("PrettyFlat","branchDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Branch") [4,5]) (Comb FuncCall ("PrettyFlat","def") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyFlat","patternDoc") [Var 2,Var 4]],Comb FuncCall ("PrettyFlat","arrow") []],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 2,Comb ConsCall ("Prelude","False") [],Var 5]]])])),Func ("PrettyFlat","caseTypeDoc") 1 Public (FuncType (TCons ("FlatCurry","CaseType") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rigid") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("FlatCurry","Flex") []) (Comb FuncCall ("Pretty","empty") [])])),Func ("PrettyFlat","patternDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Pattern") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("PrettyFlat","isTupleName") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","tupled") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("PrettyFlat","varDoc") [],Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("PrettyFlat","isInfixName") [Var 3],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 4],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","varDoc") [],Comb FuncCall ("Prelude","!!") [Var 4,Lit (Intc  0)]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","snd") [Var 3]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","varDoc") [],Comb FuncCall ("Prelude","!!") [Var 4,Lit (Intc  1)]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyFlat","qname") [Var 1,Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","hsep") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("PrettyFlat","varDoc") [],Var 4]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]),Branch (Pattern ("FlatCurry","LPattern") [5]) (Comb FuncCall ("PrettyFlat","litDoc") [Var 5])])),Func ("PrettyFlat","letBindsDoc") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (TCons ("Pretty","Doc") [])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("PrettyFlat","layout") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyFlat","letBindDoc") [Var 1,Var 2]]])),Func ("PrettyFlat","letBindDoc") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","varDoc") [],Var 4]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","operator") [],Comb FuncCall ("Pretty","equals") []]]],Comb FuncCall ("PrettyFlat","expDoc") [Var 1,Lit (Intc  0),Var 2,Comb ConsCall ("Prelude","False") [],Var 5]])])),Func ("PrettyFlat","litDoc") 1 Public (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Intc") [2]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","literal") [],Comb FuncCall ("Pretty","int") [Var 2]]),Branch (Pattern ("FlatCurry","Floatc") [3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","literal") [],Comb FuncCall ("Pretty","float") [Var 3]]),Branch (Pattern ("FlatCurry","Charc") [4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyFlat","literal") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","squotes") [],Comb FuncCall ("Pretty","text") [Comb FuncCall ("PrettyFlat","quoteChar") [Var 4]]]])])),Func ("PrettyFlat","quoteChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 1,Comb FuncCall ("PrettyFlat","specialChars") []]])),Func ("PrettyFlat","specialChars") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\t'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]])),Func ("PrettyFlat","toString") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","Comb") [2,3,4]) (Case  Rigid (Var 2) [Branch (Pattern ("FlatCurry","ConsCall") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 15,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 19,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  ']')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [25,26]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [27,28]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Rigid (Var 29) [Branch (Pattern ("FlatCurry","Lit") [31]) (Case  Rigid (Var 31) [Branch (Pattern ("FlatCurry","Charc") [32]) (Case  Rigid (Var 30) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Rigid (Var 34) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("PrettyFlat","toString") [Var 33],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb (FuncPartCall 1) ("Prelude","++") [Comb FuncCall ("PrettyFlat","quoteChar") [Var 32]]]]),Branch (Pattern ("Prelude",":") [35,36]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("FlatCurry","Intc") [37]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Floatc") [38]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("FlatCurry","Var") [39]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Comb") [40,41,42]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Let") [43,44]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Free") [45,46]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Or") [47,48]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Case") [49,50,51]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [52,53]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [54,55]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","FuncPartCall") [56]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","ConsPartCall") [57]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("FlatCurry","Var") [58]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Lit") [59]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Let") [60,61]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Free") [62,63]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Or") [64,65]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Case") [66,67,68]) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("PrettyFlat","toList") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","Comb") [2,3,4]) (Case  Rigid (Var 2) [Branch (Pattern ("FlatCurry","ConsCall") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 15,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 19,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  ']')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [25,26]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [27,28]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Rigid (Var 32) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("PrettyFlat","toList") [Var 31],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb (ConsPartCall 1) ("Prelude",":") [Var 29]]]),Branch (Pattern ("Prelude",":") [33,34]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [35,36]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [37,38]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","FuncPartCall") [39]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","ConsPartCall") [40]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("FlatCurry","Var") [41]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Lit") [42]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Let") [43,44]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Free") [45,46]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Or") [47,48]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("FlatCurry","Case") [49,50,51]) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("PrettyFlat","elimApp") 0 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb FuncCall ("FlatCurryGoodies","updCombs") [Comb (FuncPartCall 3) ("PrettyFlat","elimApp.elim.276") []])),Func ("PrettyFlat","elimApp.extend.276") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Comb") [3,4,5]) (Comb ConsCall ("FlatCurry","Comb") [Var 3,Var 4,Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])])),Func ("PrettyFlat","elimApp.elim.276") 3 Private (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("FlatCurry","FuncCall") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyFlat","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("FlatCurryGoodies","isComb") [Comb FuncCall ("Prelude","head") [Var 3]],Comb FuncCall ("Prelude","/=") [Comb FuncCall ("FlatCurryGoodies","combName") [Comb FuncCall ("Prelude","head") [Var 3]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyFlat","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyFlat","elimApp.extend.276") [Comb FuncCall ("Prelude","head") [Var 3],Comb FuncCall ("Prelude","!!") [Var 3,Lit (Intc  1)]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry","Comb") [Var 1,Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))] []