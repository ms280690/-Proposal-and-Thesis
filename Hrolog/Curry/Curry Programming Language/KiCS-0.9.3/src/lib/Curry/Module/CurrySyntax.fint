Prog "CurrySyntax" ["Directory","Distribution","FileGoodies","Prelude","ReadShowTerm"] [TypeSyn ("CurrySyntax","Pos") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]),TypeSyn ("CurrySyntax","ModuleIdent") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),Type ("CurrySyntax","Position") Public [] [Cons ("CurrySyntax","Position") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]],Type ("CurrySyntax","Ident") Public [] [Cons ("CurrySyntax","Ident") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") []]],Type ("CurrySyntax","QualIdent") Public [] [Cons ("CurrySyntax","UnqualIdent") 1 Public [TCons ("CurrySyntax","Ident") []],Cons ("CurrySyntax","QualIdent") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("CurrySyntax","Ident") []]],Type ("CurrySyntax","Module") Public [0] [Cons ("CurrySyntax","Module") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("CurrySyntax","ExportSpec") [TVar 0]],TCons ("Prelude","[]") [TCons ("CurrySyntax","Decl") [TVar 0]]]],Type ("CurrySyntax","ExportSpec") Public [0] [Cons ("CurrySyntax","Exporting") 2 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Export") []]]],Type ("CurrySyntax","Export") Public [] [Cons ("CurrySyntax","Export") 1 Public [TCons ("CurrySyntax","QualIdent") []],Cons ("CurrySyntax","ExportTypeWith") 2 Public [TCons ("CurrySyntax","QualIdent") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []]],Cons ("CurrySyntax","ExportTypeAll") 1 Public [TCons ("CurrySyntax","QualIdent") []],Cons ("CurrySyntax","ExportModule") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("CurrySyntax","ImportSpec") Public [0] [Cons ("CurrySyntax","Importing") 2 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Import") []]],Cons ("CurrySyntax","Hiding") 2 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Import") []]]],Type ("CurrySyntax","Import") Public [] [Cons ("CurrySyntax","Import") 1 Public [TCons ("CurrySyntax","Ident") []],Cons ("CurrySyntax","ImportTypeWith") 2 Public [TCons ("CurrySyntax","Ident") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []]],Cons ("CurrySyntax","ImportTypeAll") 1 Public [TCons ("CurrySyntax","Ident") []]],Type ("CurrySyntax","Decl") Public [0] [Cons ("CurrySyntax","ImportDecl") 5 Public [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Bool") [],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Maybe") [TCons ("CurrySyntax","ImportSpec") [TVar 0]]],Cons ("CurrySyntax","InfixDecl") 4 Public [TVar 0,TCons ("CurrySyntax","Infix") [],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []]],Cons ("CurrySyntax","DataDecl") 4 Public [TVar 0,TCons ("CurrySyntax","Ident") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrDecl") [TVar 0]]],Cons ("CurrySyntax","NewtypeDecl") 4 Public [TVar 0,TCons ("CurrySyntax","Ident") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","NewConstrDecl") [TVar 0]],Cons ("CurrySyntax","TypeDecl") 4 Public [TVar 0,TCons ("CurrySyntax","Ident") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","TypeExpr") []],Cons ("CurrySyntax","TypeSig") 3 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","TypeExpr") []],Cons ("CurrySyntax","EvalAnnot") 3 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","EvalAnnotation") []],Cons ("CurrySyntax","FunctionDecl") 3 Public [TVar 0,TCons ("CurrySyntax","Ident") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","Equation") [TVar 0]]],Cons ("CurrySyntax","ExternalDecl") 5 Public [TVar 0,TCons ("CurrySyntax","CallConv") [],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("CurrySyntax","Ident") [],TCons ("CurrySyntax","TypeExpr") []],Cons ("CurrySyntax","FlatExternalDecl") 2 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []]],Cons ("CurrySyntax","PatternDecl") 3 Public [TVar 0,TCons ("CurrySyntax","ConstrTerm") [TVar 0],TCons ("CurrySyntax","Rhs") [TVar 0]],Cons ("CurrySyntax","ExtraVariables") 2 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []]]],Type ("CurrySyntax","ConstrDecl") Public [0] [Cons ("CurrySyntax","ConstrDecl") 4 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","Ident") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","TypeExpr") []]],Cons ("CurrySyntax","ConOpDecl") 5 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","TypeExpr") [],TCons ("CurrySyntax","Ident") [],TCons ("CurrySyntax","TypeExpr") []]],Type ("CurrySyntax","NewConstrDecl") Public [0] [Cons ("CurrySyntax","NewConstrDecl") 4 Public [TVar 0,TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","Ident") [],TCons ("CurrySyntax","TypeExpr") []]],Type ("CurrySyntax","Infix") Public [] [Cons ("CurrySyntax","InfixL") 0 Public [],Cons ("CurrySyntax","InfixR") 0 Public [],Cons ("CurrySyntax","Infix") 0 Public []],Type ("CurrySyntax","EvalAnnotation") Public [] [Cons ("CurrySyntax","EvalRigid") 0 Public [],Cons ("CurrySyntax","EvalChoice") 0 Public []],Type ("CurrySyntax","CallConv") Public [] [Cons ("CurrySyntax","CallConvPrimitive") 0 Public [],Cons ("CurrySyntax","CallConvCCall") 0 Public []],Type ("CurrySyntax","TypeExpr") Public [] [Cons ("CurrySyntax","ConstructorType") 2 Public [TCons ("CurrySyntax","QualIdent") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","TypeExpr") []]],Cons ("CurrySyntax","VariableType") 1 Public [TCons ("CurrySyntax","Ident") []],Cons ("CurrySyntax","TupleType") 1 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","TypeExpr") []]],Cons ("CurrySyntax","ListType") 1 Public [TCons ("CurrySyntax","TypeExpr") []],Cons ("CurrySyntax","ArrowType") 2 Public [TCons ("CurrySyntax","TypeExpr") [],TCons ("CurrySyntax","TypeExpr") []],Cons ("CurrySyntax","RecordType") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurrySyntax","Ident") []],TCons ("CurrySyntax","TypeExpr") []]],TCons ("Prelude","Maybe") [TCons ("CurrySyntax","TypeExpr") []]]],Type ("CurrySyntax","Equation") Public [0] [Cons ("CurrySyntax","Equation") 3 Public [TVar 0,TCons ("CurrySyntax","Lhs") [TVar 0],TCons ("CurrySyntax","Rhs") [TVar 0]]],Type ("CurrySyntax","Lhs") Public [0] [Cons ("CurrySyntax","FunLhs") 2 Public [TCons ("CurrySyntax","Ident") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]]],Cons ("CurrySyntax","OpLhs") 3 Public [TCons ("CurrySyntax","ConstrTerm") [TVar 0],TCons ("CurrySyntax","Ident") [],TCons ("CurrySyntax","ConstrTerm") [TVar 0]],Cons ("CurrySyntax","ApLhs") 2 Public [TCons ("CurrySyntax","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]]]],Type ("CurrySyntax","Rhs") Public [0] [Cons ("CurrySyntax","SimpleRhs") 3 Public [TVar 0,TCons ("CurrySyntax","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("CurrySyntax","Decl") [TVar 0]]],Cons ("CurrySyntax","GuardedRhs") 2 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","CondExpr") [TVar 0]],TCons ("Prelude","[]") [TCons ("CurrySyntax","Decl") [TVar 0]]]],Type ("CurrySyntax","CondExpr") Public [0] [Cons ("CurrySyntax","CondExpr") 3 Public [TVar 0,TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0]]],Type ("CurrySyntax","Literal") Public [] [Cons ("CurrySyntax","Char") 1 Public [TCons ("Prelude","Char") []],Cons ("CurrySyntax","Int") 2 Public [TCons ("CurrySyntax","Ident") [],TCons ("Prelude","Int") []],Cons ("CurrySyntax","Float") 1 Public [TCons ("Prelude","Float") []],Cons ("CurrySyntax","String") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("CurrySyntax","ConstrTerm") Public [0] [Cons ("CurrySyntax","LiteralPattern") 1 Public [TCons ("CurrySyntax","Literal") []],Cons ("CurrySyntax","NegativePattern") 2 Public [TCons ("CurrySyntax","Ident") [],TCons ("CurrySyntax","Literal") []],Cons ("CurrySyntax","VariablePattern") 1 Public [TCons ("CurrySyntax","Ident") []],Cons ("CurrySyntax","ConstructorPattern") 2 Public [TCons ("CurrySyntax","QualIdent") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]]],Cons ("CurrySyntax","InfixPattern") 3 Public [TCons ("CurrySyntax","ConstrTerm") [TVar 0],TCons ("CurrySyntax","QualIdent") [],TCons ("CurrySyntax","ConstrTerm") [TVar 0]],Cons ("CurrySyntax","ParenPattern") 1 Public [TCons ("CurrySyntax","ConstrTerm") [TVar 0]],Cons ("CurrySyntax","TuplePattern") 1 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]]],Cons ("CurrySyntax","ListPattern") 1 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]]],Cons ("CurrySyntax","AsPattern") 2 Public [TCons ("CurrySyntax","Ident") [],TCons ("CurrySyntax","ConstrTerm") [TVar 0]],Cons ("CurrySyntax","LazyPattern") 1 Public [TCons ("CurrySyntax","ConstrTerm") [TVar 0]],Cons ("CurrySyntax","FunctionPattern") 2 Public [TCons ("CurrySyntax","QualIdent") [],TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]]],Cons ("CurrySyntax","InfixFuncPattern") 3 Public [TCons ("CurrySyntax","ConstrTerm") [TVar 0],TCons ("CurrySyntax","QualIdent") [],TCons ("CurrySyntax","ConstrTerm") [TVar 0]],Cons ("CurrySyntax","RecordPattern") 2 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Field") [TVar 0,TCons ("CurrySyntax","ConstrTerm") [TVar 0]]],TCons ("Prelude","Maybe") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]]]],Type ("CurrySyntax","Expression") Public [0] [Cons ("CurrySyntax","Literal") 1 Public [TCons ("CurrySyntax","Literal") []],Cons ("CurrySyntax","Variable") 1 Public [TCons ("CurrySyntax","QualIdent") []],Cons ("CurrySyntax","Constructor") 1 Public [TCons ("CurrySyntax","QualIdent") []],Cons ("CurrySyntax","Paren") 1 Public [TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","Typed") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","TypeExpr") []],Cons ("CurrySyntax","Tuple") 1 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Expression") [TVar 0]]],Cons ("CurrySyntax","List") 1 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Expression") [TVar 0]]],Cons ("CurrySyntax","ListCompr") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("CurrySyntax","Statement") [TVar 0]]],Cons ("CurrySyntax","EnumFrom") 1 Public [TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","EnumFromThen") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","EnumFromTo") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","EnumFromThenTo") 3 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","UnaryMinus") 2 Public [TCons ("CurrySyntax","Ident") [],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","Apply") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","InfixApply") 3 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","InfixOp") [],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","LeftSection") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","InfixOp") []],Cons ("CurrySyntax","RightSection") 2 Public [TCons ("CurrySyntax","InfixOp") [],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","Lambda") 2 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","ConstrTerm") [TVar 0]],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","Let") 2 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Decl") [TVar 0]],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","Do") 2 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Statement") [TVar 0]],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","IfThenElse") 3 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","Case") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("CurrySyntax","Alt") [TVar 0]]],Cons ("CurrySyntax","RecordConstr") 1 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Field") [TVar 0,TCons ("CurrySyntax","Expression") [TVar 0]]]],Cons ("CurrySyntax","RecordSelection") 2 Public [TCons ("CurrySyntax","Expression") [TVar 0],TCons ("CurrySyntax","Ident") []],Cons ("CurrySyntax","RecordUpdate") 2 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Field") [TVar 0,TCons ("CurrySyntax","Expression") [TVar 0]]],TCons ("CurrySyntax","Expression") [TVar 0]]],Type ("CurrySyntax","InfixOp") Public [] [Cons ("CurrySyntax","InfixOp") 1 Public [TCons ("CurrySyntax","QualIdent") []],Cons ("CurrySyntax","InfixConstr") 1 Public [TCons ("CurrySyntax","QualIdent") []]],Type ("CurrySyntax","Statement") Public [0] [Cons ("CurrySyntax","StmtExpr") 1 Public [TCons ("CurrySyntax","Expression") [TVar 0]],Cons ("CurrySyntax","StmtDecl") 1 Public [TCons ("Prelude","[]") [TCons ("CurrySyntax","Decl") [TVar 0]]],Cons ("CurrySyntax","StmtBind") 2 Public [TCons ("CurrySyntax","ConstrTerm") [TVar 0],TCons ("CurrySyntax","Expression") [TVar 0]]],Type ("CurrySyntax","Alt") Public [0] [Cons ("CurrySyntax","Alt") 3 Public [TVar 0,TCons ("CurrySyntax","ConstrTerm") [TVar 0],TCons ("CurrySyntax","Rhs") [TVar 0]]],Type ("CurrySyntax","Field") Public [0,1] [Cons ("CurrySyntax","Field") 3 Public [TVar 0,TCons ("CurrySyntax","Ident") [],TVar 1]]] [Func ("CurrySyntax","readCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("CurrySyntax","Module") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]])) (Rule [] (Var 0)),Func ("CurrySyntax","readCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("CurrySyntax","Module") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]))) (Rule [] (Var 0)),Func ("CurrySyntax","readCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("CurrySyntax","Module") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]])) (Rule [] (Var 0)),Func ("CurrySyntax","writeCurryModule") 1 Public (FuncType (TCons ("CurrySyntax","Module") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("CurrySyntax","writeCurryFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurrySyntax","Module") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0))] []