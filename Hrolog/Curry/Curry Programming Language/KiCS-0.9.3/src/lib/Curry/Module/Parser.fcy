Prog "Parser" ["Prelude"] [TypeSyn ("Parser","Parser") Public [0] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])),TypeSyn ("Parser","ParserRep") Public [0,1] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))] [Func ("Parser","<|>") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Or (Comb (FuncPartCall 1) ("Parser","<|>._#lambda2") [Var 1]) (Comb (FuncPartCall 1) ("Parser","<|>._#lambda3") [Var 2]))),Func ("Parser","<|>._#lambda2") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TVar 2]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])),Func ("Parser","<|>._#lambda3") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TVar 2]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])),Func ("Parser","<||>") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [1,2] (Comb (FuncPartCall 1) ("Parser","<||>._#lambda4") [Var 1,Var 2])),Func ("Parser","<||>._#lambda4") 3 Private (FuncType (FuncType (TVar 17) (FuncType (TCons ("Prelude","[]") [TVar 18]) (TCons ("Prelude","[]") [TVar 18]))) (FuncType (FuncType (TVar 17) (FuncType (TCons ("Prelude","[]") [TVar 18]) (TCons ("Prelude","[]") [TVar 18]))) (FuncType (TVar 17) (FuncType (TCons ("Prelude","[]") [TVar 18]) (TCons ("Prelude","[]") [TVar 18]))))) (Rule [1,2,3] (Comb FuncCall ("Parser","<|>") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","apply") [Var 2,Var 3]])),Func ("Parser","<*>") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Parser","<*>.seq.14") [Var 1,Var 2])),Func ("Parser","<*>.seq.14") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TVar 23]) (TCons ("Prelude","[]") [TVar 23])) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 23]) (TCons ("Prelude","[]") [TVar 23])) (FuncType (TCons ("Prelude","[]") [TVar 23]) (TCons ("Prelude","[]") [TVar 23])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$!!") [Var 2,Comb FuncCall ("Prelude","apply") [Var 1,Var 3]])),Func ("Parser",">>>") 4 Public (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (FuncType (TVar 1) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("Parser",">>>.attach.18") [Var 3,Var 2],Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])),Func ("Parser",">>>.attach.18") 3 Private (FuncType (TVar 36) (FuncType (TVar 36) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 2,Var 1],Var 3])),Func ("Parser","empty") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Var 1)),Func ("Parser","terminal") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 1,Var 3],Var 4])])),Func ("Parser","satisfy") 3 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","=:=") [Var 2,Var 4]],Var 5])])),Func ("Parser","star") 1 Public (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1] (Free [2,3] (Comb FuncCall ("Parser","<||>") [Comb (FuncPartCall 2) ("Parser",">>>") [Comb FuncCall ("Parser","<*>") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Parser","star") [Var 1],Var 3]],Comb ConsCall ("Prelude",":") [Var 2,Var 3]],Comb (FuncPartCall 2) ("Parser",">>>") [Comb (FuncPartCall 1) ("Parser","empty") [],Comb ConsCall ("Prelude","[]") []]]))),Func ("Parser","some") 1 Public (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1] (Free [2,3] (Comb (FuncPartCall 2) ("Parser",">>>") [Comb FuncCall ("Parser","<*>") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Parser","star") [Var 1],Var 3]],Comb ConsCall ("Prelude",":") [Var 2,Var 3]])))] [Op ("Parser","<*>") InfixrOp 4,Op ("Parser",">>>") InfixrOp 3,Op ("Parser","<|>") InfixrOp 2,Op ("Parser","<||>") InfixrOp 2]