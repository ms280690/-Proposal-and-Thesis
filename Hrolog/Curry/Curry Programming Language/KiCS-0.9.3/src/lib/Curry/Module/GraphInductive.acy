CurryProg "GraphInductive"
 ["Prelude","FiniteMap","Sort","Maybe"]
 [CType ("GraphInductive","Graph") Public [(0,"nodeLabel"),(1,"edgeLabel")] [CCons ("GraphInductive","Gr") 1 Private [CTCons ("GraphInductive","GraphRep") [CTVar (0,"nodeLabel"),CTVar (1,"edgeLabel")]]],
  CTypeSyn ("GraphInductive","Node") Public [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("GraphInductive","LNode") Public [(0,"a")] (CTCons ("Prelude","(,)") [CTCons ("GraphInductive","Node") [],CTVar (0,"a")]),
  CTypeSyn ("GraphInductive","UNode") Public [] (CTCons ("GraphInductive","LNode") [CTCons ("Prelude","()") []]),
  CTypeSyn ("GraphInductive","Edge") Public [] (CTCons ("Prelude","(,)") [CTCons ("GraphInductive","Node") [],CTCons ("GraphInductive","Node") []]),
  CTypeSyn ("GraphInductive","LEdge") Public [(0,"b")] (CTCons ("Prelude","(,,)") [CTCons ("GraphInductive","Node") [],CTCons ("GraphInductive","Node") [],CTVar (0,"b")]),
  CTypeSyn ("GraphInductive","UEdge") Public [] (CTCons ("GraphInductive","LEdge") [CTCons ("Prelude","()") []]),
  CTypeSyn ("GraphInductive","Context") Public [(0,"a"),(1,"b")] (CTCons ("Prelude","(,,,)") [CTCons ("GraphInductive","Adj") [CTVar (1,"b")],CTCons ("GraphInductive","Node") [],CTVar (0,"a"),CTCons ("GraphInductive","Adj") [CTVar (1,"b")]]),
  CTypeSyn ("GraphInductive","Adj") Private [(0,"b")] (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"b"),CTCons ("GraphInductive","Node") []]]),
  CTypeSyn ("GraphInductive","MContext") Public [(0,"a"),(1,"b")] (CTCons ("Prelude","Maybe") [CTCons ("GraphInductive","Context") [CTVar (0,"a"),CTVar (1,"b")]]),
  CTypeSyn ("GraphInductive","Context'") Public [(0,"a"),(1,"b")] (CTCons ("Prelude","(,,)") [CTCons ("GraphInductive","Adj") [CTVar (1,"b")],CTVar (0,"a"),CTCons ("GraphInductive","Adj") [CTVar (1,"b")]]),
  CTypeSyn ("GraphInductive","UContext") Public [] (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("GraphInductive","Node") []],CTCons ("GraphInductive","Node") [],CTCons ("Prelude","[]") [CTCons ("GraphInductive","Node") []]]),
  CTypeSyn ("GraphInductive","GDecomp") Public [(0,"a"),(1,"b")] (CTCons ("Prelude","(,)") [CTCons ("GraphInductive","Context") [CTVar (0,"a"),CTVar (1,"b")],CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]]),
  CTypeSyn ("GraphInductive","Decomp") Public [(0,"a"),(1,"b")] (CTCons ("Prelude","(,)") [CTCons ("GraphInductive","MContext") [CTVar (0,"a"),CTVar (1,"b")],CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]]),
  CTypeSyn ("GraphInductive","UDecomp") Public [(0,"g")] (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("GraphInductive","UContext") []],CTVar (0,"g")]),
  CTypeSyn ("GraphInductive","Path") Public [] (CTCons ("Prelude","[]") [CTCons ("GraphInductive","Node") []]),
  CTypeSyn ("GraphInductive","LPath") Public [(0,"a")] (CTCons ("Prelude","[]") [CTCons ("GraphInductive","LNode") [CTVar (0,"a")]]),
  CTypeSyn ("GraphInductive","UPath") Public [] (CTCons ("Prelude","[]") [CTCons ("GraphInductive","UNode") []]),
  CTypeSyn ("GraphInductive","GraphRep") Private [(0,"a"),(1,"b")] (CTCons ("FiniteMap","FM") [CTCons ("GraphInductive","Node") [],CTCons ("GraphInductive","Context'") [CTVar (0,"a"),CTVar (1,"b")]]),
  CTypeSyn ("GraphInductive","UGr") Public [] (CTCons ("GraphInductive","Graph") [CTCons ("Prelude","()") [],CTCons ("Prelude","()") []])]
 [CFunc ("GraphInductive",".:") 0 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (0,"a")))) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (1,"b")))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","."))) (CSymbol ("Prelude",".")))] []]),
  CFunc ("GraphInductive",":&") 2 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]) (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"v"),CPVar (2,"l"),CPVar (3,"s")],CPComb ("GraphInductive","Gr") [CPVar (4,"g")]] [(CApply (CApply (CSymbol ("FiniteMap","elemFM")) (CVar (1,"v"))) (CVar (4,"g")),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"v")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Prelude","show")) (CVar (2,"l"))))))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("GraphInductive","Gr")) (CVar (7,"g3")))] [CLocalPat (CPVar (5,"g1")) (CApply (CApply (CApply (CSymbol ("FiniteMap","addToFM")) (CVar (4,"g"))) (CVar (1,"v"))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (0,"p"))) (CVar (2,"l"))) (CVar (3,"s")))) [],CLocalPat (CPVar (6,"g2")) (CApply (CApply (CApply (CSymbol ("GraphInductive","updAdj")) (CVar (5,"g1"))) (CVar (0,"p"))) (CApply (CSymbol ("GraphInductive","addSucc")) (CVar (1,"v")))) [],CLocalPat (CPVar (7,"g3")) (CApply (CApply (CApply (CSymbol ("GraphInductive","updAdj")) (CVar (6,"g2"))) (CVar (3,"s"))) (CApply (CSymbol ("GraphInductive","addPred")) (CVar (1,"v")))) []]]),
  CFunc ("GraphInductive","addPred") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (0,"a")]],CTVar (2,"c"),CTVar (3,"d")]) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (0,"a")]],CTVar (2,"c"),CTVar (3,"d")])))) (CRules CFlex [CRule [CPVar (0,"v"),CPVar (1,"l"),CPComb ("Prelude","(,,)") [CPVar (2,"p"),CPVar (3,"l'"),CPVar (4,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"l"))) (CVar (0,"v")))) (CVar (2,"p")))) (CVar (3,"l'"))) (CVar (4,"s")))] []]),
  CFunc ("GraphInductive","addSucc") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("Prelude","(,,)") [CTVar (2,"c"),CTVar (3,"d"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (0,"a")]]]) (CTCons ("Prelude","(,,)") [CTVar (2,"c"),CTVar (3,"d"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (0,"a")]]])))) (CRules CFlex [CRule [CPVar (0,"v"),CPVar (1,"l"),CPComb ("Prelude","(,,)") [CPVar (2,"p"),CPVar (3,"l'"),CPVar (4,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (2,"p"))) (CVar (3,"l'"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"l"))) (CVar (0,"v")))) (CVar (4,"s"))))] []]),
  CFunc ("GraphInductive","buildGr") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]]) (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("GraphInductive",":&"))) (CSymbol ("GraphInductive","empty")))] []]),
  CFunc ("GraphInductive","clearPred") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (2,"c"),CTVar (0,"a")]],CTVar (3,"d"),CTVar (4,"e")]) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (2,"c"),CTVar (0,"a")]],CTVar (3,"d"),CTVar (4,"e")])))) (CRules CFlex [CRule [CPVar (0,"v"),CPVar (1,"_"),CPComb ("Prelude","(,,)") [CPVar (2,"p"),CPVar (3,"l"),CPVar (4,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (5,"x0"))) (CVar (0,"v"))))) (CSymbol ("Prelude","snd")))) (CVar (2,"p")))) (CVar (3,"l"))) (CVar (4,"s")))] []]),
  CFunc ("GraphInductive","clearSucc") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("Prelude","(,,)") [CTVar (2,"c"),CTVar (3,"d"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (4,"e"),CTVar (0,"a")]]]) (CTCons ("Prelude","(,,)") [CTVar (2,"c"),CTVar (3,"d"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (4,"e"),CTVar (0,"a")]]])))) (CRules CFlex [CRule [CPVar (0,"v"),CPVar (1,"_"),CPComb ("Prelude","(,,)") [CPVar (2,"p"),CPVar (3,"l"),CPVar (4,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (2,"p"))) (CVar (3,"l"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (5,"x0"))) (CVar (0,"v"))))) (CSymbol ("Prelude","snd")))) (CVar (4,"s"))))] []]),
  CFunc ("GraphInductive","context") 2 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]]]))) (CRules CFlex [CRule [CPVar (0,"g"),CPVar (1,"v")] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("GraphInductive","match")) (CVar (1,"v"))) (CVar (0,"g"))) [CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","Nothing") [],CPVar (2,"_")]) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"v"))))),CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","Just") [CPVar (3,"c")],CPVar (4,"_")]) (CVar (3,"c"))])] []]),
  CFunc ("GraphInductive","context1") 0 Private (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CSymbol ("GraphInductive","fst4"))) (CSymbol ("GraphInductive","context")))] []]),
  CFunc ("GraphInductive","context4") 0 Private (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CSymbol ("GraphInductive","fth4"))) (CSymbol ("GraphInductive","context")))] []]),
  CFunc ("GraphInductive","deg") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"s")]] (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CSymbol ("Prelude","length")) (CVar (0,"p")))) (CApply (CSymbol ("Prelude","length")) (CVar (3,"s")))))) (CSymbol ("GraphInductive","context")))] []]),
  CFunc ("GraphInductive","deg'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","+")) (CApply (CSymbol ("Prelude","length")) (CVar (0,"p")))) (CApply (CSymbol ("Prelude","length")) (CVar (3,"s"))))] []]),
  CFunc ("GraphInductive","delEdge") 2 Public (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"v"),CPVar (1,"w")],CPVar (2,"g")] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("GraphInductive","match")) (CVar (0,"v"))) (CVar (2,"g"))) [CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","Nothing") [],CPVar (3,"_")]) (CVar (2,"g")),CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","Just") [CPComb ("Prelude","(,,,)") [CPVar (4,"p"),CPVar (5,"v'"),CPVar (6,"l"),CPVar (7,"s")]],CPVar (8,"g'")]) (CApply (CApply (CSymbol ("GraphInductive",":&")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (4,"p"))) (CVar (5,"v'"))) (CVar (6,"l"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (9,"x0"))) (CVar (1,"w"))))) (CSymbol ("Prelude","snd")))) (CVar (7,"s"))))) (CVar (8,"g'")))])] []]),
  CFunc ("GraphInductive","delEdges") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"es"),CPVar (1,"g")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("GraphInductive","delEdge"))) (CVar (1,"g"))) (CVar (0,"es")))] []]),
  CFunc ("GraphInductive","delNode") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"v")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("GraphInductive","delNodes")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"v"))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("GraphInductive","delNodes") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"g")] [(CSymbol ("Prelude","success"),CVar (0,"g"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"v"),CPVar (2,"vs")],CPVar (3,"g")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive","delNodes")) (CVar (2,"vs"))) (CApply (CSymbol ("Prelude","snd")) (CApply (CApply (CSymbol ("GraphInductive","match")) (CVar (1,"v"))) (CVar (3,"g")))))] []]),
  CFunc ("GraphInductive","edgeComp") 2 Private (CFuncType (CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (0,"a")]) (CTCons ("Prelude","Ordering") []))) (CRules CFlex [CRule [CPVar (0,"e"),CPVar (1,"e'")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"e"))) (CVar (1,"e'")),CSymbol ("Prelude","EQ")),(CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (2,"v"))) (CVar (5,"x")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"v"))) (CVar (5,"x")))) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (3,"w"))) (CVar (6,"y")))),CSymbol ("Prelude","LT")),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","GT"))] [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (2,"v"),CPVar (3,"w"),CPVar (4,"_")]) (CVar (0,"e")) [],CLocalPat (CPComb ("Prelude","(,,)") [CPVar (5,"x"),CPVar (6,"y"),CPVar (7,"_")]) (CVar (1,"e'")) []]]),
  CFunc ("GraphInductive","edges") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,,)") [CPVar (0,"v"),CPVar (1,"w"),CPVar (2,"_")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"v"))) (CVar (1,"w")))))) (CSymbol ("GraphInductive","labEdges")))] []]),
  CFunc ("GraphInductive","emap") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (2,"c"),CTVar (0,"a")]) (CTCons ("GraphInductive","Graph") [CTVar (2,"c"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("GraphInductive","gmap")) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (1,"p"),CPVar (2,"v"),CPVar (3,"l"),CPVar (4,"s")]] (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CApply (CApply (CSymbol ("GraphInductive","map1")) (CVar (0,"f"))) (CVar (1,"p")))) (CVar (2,"v"))) (CVar (3,"l"))) (CApply (CApply (CSymbol ("GraphInductive","map1")) (CVar (0,"f"))) (CVar (4,"s"))))))] [CLocalFunc (CFunc ("GraphInductive","map1") 1 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (2,"c")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (2,"c")]]))) (CRules CFlex [CRule [CPVar (1,"g")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"l"),CPVar (3,"v")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (1,"g")) (CVar (2,"l")))) (CVar (3,"v")))))] []]))]]),
  CFunc ("GraphInductive","empty") 0 Public (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("GraphInductive","Gr")) (CApply (CSymbol ("FiniteMap","emptyFM")) (CSymbol ("Prelude","<"))))] []]),
  CFunc ("GraphInductive","equal") 2 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"g"),CPVar (1,"g'")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("GraphInductive","slabNodes")) (CVar (0,"g")))) (CApply (CSymbol ("GraphInductive","slabNodes")) (CVar (1,"g'"))))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("GraphInductive","slabEdges")) (CVar (0,"g")))) (CApply (CSymbol ("GraphInductive","slabEdges")) (CVar (1,"g'")))))] []]),
  CFunc ("GraphInductive","flip2") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"x"),CPVar (1,"y")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"y"))) (CVar (0,"x")))] []]),
  CFunc ("GraphInductive","fst4") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"x"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"x"))] []]),
  CFunc ("GraphInductive","fth4") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]) (CTVar (3,"d"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"x")]] [(CSymbol ("Prelude","success"),CVar (3,"x"))] []]),
  CFunc ("GraphInductive","gelem") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"v"),CPVar (1,"g")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Maybe","isJust")) (CApply (CSymbol ("Prelude","fst")) (CApply (CApply (CSymbol ("GraphInductive","match")) (CVar (0,"v"))) (CVar (1,"g")))))] []]),
  CFunc ("GraphInductive","gmap") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (2,"c"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (3,"d"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (2,"c"),CTCons ("Prelude","Int") []]]])) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]) (CTCons ("GraphInductive","Graph") [CTVar (3,"d"),CTVar (2,"c")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive","ufold")) (CLambda [CPVar (1,"c")] (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("GraphInductive",":&")) (CApply (CVar (0,"f")) (CVar (1,"c")))) (CVar (2,"x0")))))) (CSymbol ("GraphInductive","empty")))] []]),
  CFunc ("GraphInductive","indeg") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CSymbol ("Prelude","length"))) (CSymbol ("GraphInductive","context1")))] []]),
  CFunc ("GraphInductive","indeg'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","length")) (CVar (0,"p")))] []]),
  CFunc ("GraphInductive","inn") 2 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"g"),CPVar (1,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"l"),CPVar (3,"w")]] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (3,"w"))) (CVar (1,"v"))) (CVar (2,"l"))))) (CApply (CApply (CSymbol ("GraphInductive","context1")) (CVar (0,"g"))) (CVar (1,"v"))))] []]),
  CFunc ("GraphInductive","inn'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"v"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (4,"l"),CPVar (5,"w")]] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (5,"w"))) (CVar (1,"v"))) (CVar (4,"l"))))) (CVar (0,"p")))] []]),
  CFunc ("GraphInductive","insEdge") 2 Public (CFuncType (CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (0,"a")]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]) (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (0,"v"),CPVar (1,"w"),CPVar (2,"l")],CPVar (3,"g")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",":&")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (4,"pr"))) (CVar (0,"v"))) (CVar (6,"la"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"l"))) (CVar (1,"w")))) (CVar (7,"su"))))) (CVar (8,"g'")))] [CLocalPat (CPComb ("Prelude","(,)") [CPComb ("Prelude","Just") [CPComb ("Prelude","(,,,)") [CPVar (4,"pr"),CPVar (5,"_"),CPVar (6,"la"),CPVar (7,"su")]],CPVar (8,"g'")]) (CApply (CApply (CSymbol ("GraphInductive","match")) (CVar (0,"v"))) (CVar (3,"g"))) []]]),
  CFunc ("GraphInductive","insEdges") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]) (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"es"),CPVar (1,"g")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("GraphInductive","insEdge"))) (CVar (1,"g"))) (CVar (0,"es")))] []]),
  CFunc ("GraphInductive","insNode") 1 Public (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"v"),CPVar (1,"l")]] [(CSymbol ("Prelude","success"),CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("GraphInductive",":&")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","[]"))) (CVar (0,"v"))) (CVar (1,"l"))) (CSymbol ("Prelude","[]")))) (CVar (2,"x0"))))] []]),
  CFunc ("GraphInductive","insNodes") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"vs"),CPVar (1,"g")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("GraphInductive","insNode"))) (CVar (1,"g"))) (CVar (0,"vs")))] []]),
  CFunc ("GraphInductive","isEmpty") 1 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("GraphInductive","Gr") [CPVar (0,"g")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FiniteMap","isEmptyFM")) (CVar (0,"g")))] []]),
  CFunc ("GraphInductive","lab") 2 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Maybe") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"g"),CPVar (1,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Maybe",">>-")) (CApply (CSymbol ("Prelude","fst")) (CApply (CApply (CSymbol ("GraphInductive","match")) (CVar (1,"v"))) (CVar (0,"g"))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CSymbol ("GraphInductive","lab'"))))] []]),
  CFunc ("GraphInductive","lab'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTVar (1,"b"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"l"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (2,"l"))] []]),
  CFunc ("GraphInductive","labEdges") 1 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (1,"b")]])) (CRules CFlex [CRule [CPComb ("GraphInductive","Gr") [CPVar (0,"g")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPComb ("Prelude","(,)") [CPVar (1,"v"),CPComb ("Prelude","(,,)") [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"s")]]] (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (5,"l"),CPVar (6,"w")]] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (1,"v"))) (CVar (6,"w"))) (CVar (5,"l"))))) (CVar (4,"s"))))) (CApply (CSymbol ("FiniteMap","fmToList")) (CVar (0,"g"))))] []]),
  CFunc ("GraphInductive","labNode'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"b")])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"v"),CPVar (2,"l"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"v"))) (CVar (2,"l")))] []]),
  CFunc ("GraphInductive","labNodes") 1 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("GraphInductive","Gr") [CPVar (0,"g")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (1,"v"),CPComb ("Prelude","(,,)") [CPVar (2,"_"),CPVar (3,"l"),CPVar (4,"_")]]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"v"))) (CVar (3,"l"))))) (CApply (CSymbol ("FiniteMap","fmToList")) (CVar (0,"g"))))] []]),
  CFunc ("GraphInductive","labUEdges") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTCons ("Prelude","()") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (0,"v"),CPVar (1,"w")]] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (0,"v"))) (CVar (1,"w"))) (CSymbol ("Prelude","()")))))] []]),
  CFunc ("GraphInductive","labUNodes") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","()") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (0,"v")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"v"))) (CSymbol ("Prelude","()")))))] []]),
  CFunc ("GraphInductive","lpre") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"b")]]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("GraphInductive","flip2")))) (CSymbol ("GraphInductive","context1")))] []]),
  CFunc ("GraphInductive","lpre'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("GraphInductive","flip2"))) (CVar (0,"p")))] []]),
  CFunc ("GraphInductive","lsuc") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"b")]]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("GraphInductive","flip2")))) (CSymbol ("GraphInductive","context4")))] []]),
  CFunc ("GraphInductive","lsuc'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("GraphInductive","flip2"))) (CVar (3,"s")))] []]),
  CFunc ("GraphInductive","match") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]]]],CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"v"),CPComb ("GraphInductive","Gr") [CPVar (1,"g")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("GraphInductive","Gr")) (CVar (1,"g"))))) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"g'"),CPComb ("Prelude","(,)") [CPVar (3,"_"),CPComb ("Prelude","(,,)") [CPVar (4,"p"),CPVar (5,"l"),CPVar (6,"s")]]]] (CLetDecl [CLocalPat (CPVar (7,"s'")) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (11,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (11,"x0"))) (CVar (0,"v"))))) (CSymbol ("Prelude","snd")))) (CVar (6,"s"))) [],CLocalPat (CPVar (8,"p'")) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (12,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (12,"x0"))) (CVar (0,"v"))))) (CSymbol ("Prelude","snd")))) (CVar (4,"p"))) [],CLocalPat (CPVar (9,"g1")) (CApply (CApply (CApply (CSymbol ("GraphInductive","updAdj")) (CVar (2,"g'"))) (CVar (7,"s'"))) (CApply (CSymbol ("GraphInductive","clearPred")) (CVar (0,"v")))) [],CLocalPat (CPVar (10,"g2")) (CApply (CApply (CApply (CSymbol ("GraphInductive","updAdj")) (CVar (9,"g1"))) (CVar (8,"p'"))) (CApply (CSymbol ("GraphInductive","clearSucc")) (CVar (0,"v")))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (8,"p'"))) (CVar (0,"v"))) (CVar (5,"l"))) (CVar (6,"s"))))) (CApply (CSymbol ("GraphInductive","Gr")) (CVar (10,"g2"))))))) (CApply (CApply (CSymbol ("FiniteMap","splitFM")) (CVar (1,"g"))) (CVar (0,"v"))))] []]),
  CFunc ("GraphInductive","matchAny") 1 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","Int") []]]],CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]])) (CRules CFlex [CRule [CPComb ("GraphInductive","Gr") [CPVar (0,"g")]] [(CApply (CSymbol ("FiniteMap","isEmptyFM")) (CVar (0,"g")),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'G'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))),(CSymbol ("Prelude","otherwise"),CCase (CApply (CSymbol ("Prelude","head")) (CApply (CSymbol ("FiniteMap","fmToListPreOrder")) (CVar (0,"g")))) [CBranch (CPComb ("Prelude","(,)") [CPVar (1,"v"),CPVar (2,"_")]) (CCase (CApply (CApply (CSymbol ("GraphInductive","match")) (CVar (1,"v"))) (CApply (CSymbol ("GraphInductive","Gr")) (CVar (0,"g")))) [CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","Just") [CPVar (3,"c")],CPVar (4,"g'")]) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"c"))) (CVar (4,"g'")))])])] []]),
  CFunc ("GraphInductive","mkGraph") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (1,"b")]]) (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"vs"),CPVar (1,"es")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("GraphInductive","insEdges")) (CVar (1,"es")))) (CApply (CSymbol ("GraphInductive","insNodes")) (CVar (0,"vs")))) (CSymbol ("GraphInductive","empty")))] []]),
  CFunc ("GraphInductive","mkUGraph") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]]) (CTCons ("GraphInductive","Graph") [CTCons ("Prelude","()") [],CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"vs"),CPVar (1,"es")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive","mkGraph")) (CApply (CSymbol ("GraphInductive","labUNodes")) (CVar (0,"vs")))) (CApply (CSymbol ("GraphInductive","labUEdges")) (CVar (1,"es"))))] []]),
  CFunc ("GraphInductive","neighbors") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"s")]] (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"p"))) (CVar (3,"s")))))) (CSymbol ("GraphInductive","context")))] []]),
  CFunc ("GraphInductive","neighbors'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (0,"p")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (3,"s"))))] []]),
  CFunc ("GraphInductive","newNodes") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"i"),CPVar (1,"g")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","enumFromTo")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"n"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"n"))) (CVar (0,"i"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"_"),CPVar (3,"n")]) (CApply (CSymbol ("GraphInductive","nodeRange")) (CVar (1,"g"))) []]]),
  CFunc ("GraphInductive","nmap") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (2,"c")]) (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (2,"c")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("GraphInductive","gmap")) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (1,"p"),CPVar (2,"v"),CPVar (3,"l"),CPVar (4,"s")]] (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (1,"p"))) (CVar (2,"v"))) (CApply (CVar (0,"f")) (CVar (3,"l")))) (CVar (4,"s")))))] []]),
  CFunc ("GraphInductive","noNodes") 1 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("GraphInductive","Gr") [CPVar (0,"g")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FiniteMap","sizeFM")) (CVar (0,"g")))] []]),
  CFunc ("GraphInductive","node'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"v"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"v"))] []]),
  CFunc ("GraphInductive","nodeComp") 2 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]) (CTCons ("Prelude","Ordering") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"n'")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"n"))) (CVar (1,"n'")),CSymbol ("Prelude","EQ")),(CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","fst")) (CVar (0,"n")))) (CApply (CSymbol ("Prelude","fst")) (CVar (1,"n'"))),CSymbol ("Prelude","LT")),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","GT"))] []]),
  CFunc ("GraphInductive","nodeRange") 1 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("GraphInductive","Gr") [CPVar (0,"g")]] [(CApply (CSymbol ("FiniteMap","isEmptyFM")) (CVar (0,"g")),CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 0))) (CLit (CIntc 0))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (1,"ix")) (CApply (CSymbol ("FiniteMap","minFM")) (CVar (0,"g"))))) (CApply (CVar (1,"ix")) (CApply (CSymbol ("FiniteMap","maxFM")) (CVar (0,"g")))))] [CLocalPat (CPVar (1,"ix")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CSymbol ("Maybe","fromJust"))) []]]),
  CFunc ("GraphInductive","nodes") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst")))) (CSymbol ("GraphInductive","labNodes")))] []]),
  CFunc ("GraphInductive","out") 2 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"g"),CPVar (1,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"l"),CPVar (3,"w")]] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (1,"v"))) (CVar (3,"w"))) (CVar (2,"l"))))) (CApply (CApply (CSymbol ("GraphInductive","context4")) (CVar (0,"g"))) (CVar (1,"v"))))] []]),
  CFunc ("GraphInductive","out'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"v"),CPVar (2,"_"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (4,"l"),CPVar (5,"w")]] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (1,"v"))) (CVar (5,"w"))) (CVar (4,"l"))))) (CVar (3,"s")))] []]),
  CFunc ("GraphInductive","outdeg") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CSymbol ("Prelude","length"))) (CSymbol ("GraphInductive","context4")))] []]),
  CFunc ("GraphInductive","outdeg'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","length")) (CVar (3,"s")))] []]),
  CFunc ("GraphInductive","pre") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd")))) (CSymbol ("GraphInductive","context1")))] []]),
  CFunc ("GraphInductive","pre'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"p"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (0,"p")))] []]),
  CFunc ("GraphInductive","showGraph") 1 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("GraphInductive","Gr") [CPVar (0,"g")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","unlines")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("GraphInductive","showNode"))) (CApply (CSymbol ("FiniteMap","fmToList")) (CVar (0,"g")))))] []]),
  CFunc ("GraphInductive","showNode") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","(,,)") [CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"v"),CPComb ("Prelude","(,,)") [CPVar (1,"_"),CPVar (2,"l'"),CPVar (3,"s")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"v")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (2,"l'")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Prelude","show")) (CVar (3,"s")))))))] []]),
  CFunc ("GraphInductive","slabEdges") 0 Private (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (1,"b")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("GraphInductive","sortBy")) (CSymbol ("GraphInductive","edgeComp")))) (CSymbol ("GraphInductive","labEdges")))] []]),
  CFunc ("GraphInductive","slabNodes") 0 Private (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("GraphInductive","sortBy")) (CSymbol ("GraphInductive","nodeComp")))) (CSymbol ("GraphInductive","labNodes")))] []]),
  CFunc ("GraphInductive","sortBy") 1 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Ordering") []))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"p")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Sort","mergeSort")) (CLambda [CPVar (1,"x"),CPVar (2,"y")] (CLetDecl [CLocalPat (CPVar (3,"pxy")) (CApply (CApply (CVar (0,"p")) (CVar (1,"x"))) (CVar (2,"y"))) []] (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"pxy"))) (CSymbol ("Prelude","EQ")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"pxy"))) (CSymbol ("Prelude","LT")))))))] []]),
  CFunc ("GraphInductive","suc") 0 Public (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GraphInductive",".:")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd")))) (CSymbol ("GraphInductive","context4")))] []]),
  CFunc ("GraphInductive","suc'") 1 Public (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (3,"s")))] []]),
  CFunc ("GraphInductive","ufold") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTCons ("Prelude","Int") [],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CFuncType (CTVar (2,"c")) (CTVar (2,"c")))) (CFuncType (CTVar (2,"c")) (CFuncType (CTCons ("GraphInductive","Graph") [CTVar (1,"b"),CTVar (0,"a")]) (CTVar (2,"c"))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"u"),CPVar (2,"g")] [(CApply (CSymbol ("GraphInductive","isEmpty")) (CVar (2,"g")),CVar (1,"u")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CVar (0,"f")) (CVar (3,"c"))) (CApply (CApply (CApply (CSymbol ("GraphInductive","ufold")) (CVar (0,"f"))) (CVar (1,"u"))) (CVar (4,"g'"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"c"),CPVar (4,"g'")]) (CApply (CSymbol ("GraphInductive","matchAny")) (CVar (2,"g"))) []]]),
  CFunc ("GraphInductive","updAdj") 3 Private (CFuncType (CTCons ("FiniteMap","FM") [CTCons ("Prelude","Int") [],CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]))) (CTCons ("FiniteMap","FM") [CTCons ("Prelude","Int") [],CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]],CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]]])))) (CRules CFlex [CRule [CPVar (0,"g"),CPComb ("Prelude","[]") [],CPVar (1,"_")] [(CSymbol ("Prelude","success"),CVar (0,"g"))] [],CRule [CPVar (2,"g"),CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPVar (3,"l"),CPVar (4,"v")],CPVar (5,"vs")],CPVar (6,"f")] [(CApply (CApply (CSymbol ("FiniteMap","elemFM")) (CVar (4,"v"))) (CVar (2,"g")),CApply (CApply (CApply (CSymbol ("GraphInductive","updAdj")) (CApply (CApply (CApply (CSymbol ("FiniteMap","updFM")) (CVar (2,"g"))) (CVar (4,"v"))) (CApply (CVar (6,"f")) (CVar (3,"l"))))) (CVar (5,"vs"))) (CVar (6,"f"))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (4,"v")))))] []])]
 [COp ("GraphInductive",".:") CInfixrOp 5,COp ("GraphInductive",":&") CInfixrOp 5]
