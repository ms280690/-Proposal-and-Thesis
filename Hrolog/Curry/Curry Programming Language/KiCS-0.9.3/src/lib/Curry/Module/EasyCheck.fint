Prog "EasyCheck" ["Integer","List","Meta","Prelude","RandomExternal","Sort","Read"] [TypeSyn ("EasyCheck","Prop") Public [] (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]),Type ("EasyCheck","Result") Public [] [Cons ("EasyCheck","Undef") 0 Public [],Cons ("EasyCheck","Ok") 0 Public [],Cons ("EasyCheck","Falsified") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("EasyCheck","Ambigious") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]] [Func ("EasyCheck","result") 1 Public (FuncType (TCons ("EasyCheck","Test") []) (TCons ("EasyCheck","Result") [])) (Rule [] (Var 0)),Func ("EasyCheck","test") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","is") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","isAlways") 1 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","isEventually") 1 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","prop") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Var 0)),Func ("EasyCheck","uniquely") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Var 0)),Func ("EasyCheck","always") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Var 0)),Func ("EasyCheck","eventually") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Var 0)),Func ("EasyCheck","failing") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Var 0)),Func ("EasyCheck","successful") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Var 0)),Func ("EasyCheck","deterministic") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Var 0)),Func ("EasyCheck","#") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","-=-") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","<~>") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","~>") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","<~") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","isSameSet") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("EasyCheck","isSubsetOf") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("EasyCheck","==>") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","for") 0 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","forValues") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","label") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","classify") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (Rule [] (Var 0)),Func ("EasyCheck","trivial") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","collect") 0 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Var 0)),Func ("EasyCheck","collectAs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (Rule [] (Var 0)),Func ("EasyCheck","easyCheck") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","verboseCheck") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","easyCheck1") 0 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","easyCheck2") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","easyCheck3") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","easyCheck4") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","easyCheck5") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","verboseCheck1") 0 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","verboseCheck2") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","verboseCheck3") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","verboseCheck4") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","verboseCheck5") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("EasyCheck","valuesOf") 0 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("EasyCheck","diagonal") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0))] [Op ("EasyCheck","isSameSet") InfixOp 4,Op ("EasyCheck","isSubsetOf") InfixOp 4,Op ("EasyCheck","is") InfixOp 1,Op ("EasyCheck","isAlways") InfixOp 1,Op ("EasyCheck","isEventually") InfixOp 1,Op ("EasyCheck","-=-") InfixOp 1,Op ("EasyCheck","#") InfixOp 1,Op ("EasyCheck","<~>") InfixOp 1,Op ("EasyCheck","~>") InfixOp 1,Op ("EasyCheck","<~") InfixOp 1,Op ("EasyCheck","trivial") InfixOp 1,Op ("EasyCheck","==>") InfixrOp 0]