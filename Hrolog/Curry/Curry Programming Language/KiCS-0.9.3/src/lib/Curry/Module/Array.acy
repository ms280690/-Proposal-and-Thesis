CurryProg "Array"
 ["Prelude","Integer"]
 [CType ("Array","Array") Public [(0,"b")] [CCons ("Array","Array") 2 Public [CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"b")),CTCons ("Array","Entry") [CTVar (0,"b")]]],
  CType ("Array","Entry") Private [(0,"b")] [CCons ("Array","Entry") 3 Private [CTVar (0,"b"),CTCons ("Array","Entry") [CTVar (0,"b")],CTCons ("Array","Entry") [CTVar (0,"b")]],CCons ("Array","Empty") 0 Private []]]
 [CFunc ("Array","!") 2 Public (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a")))) (CRules CFlex [CRule [CPComb ("Array","Array") [CPVar (0,"default"),CPVar (1,"array")],CPVar (2,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Array","from")) (CApply (CVar (0,"default")) (CVar (2,"i")))) (CVar (1,"array"))) (CVar (2,"i")))] []]),
  CFunc ("Array","//") 2 Public (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Array","Array") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("Array","Array") [CPVar (0,"default"),CPVar (1,"array")],CPVar (2,"modifications")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Array","Array")) (CVar (0,"default"))) (CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CLambda [CPComb ("Prelude","(,)") [CPVar (3,"n"),CPVar (4,"v")],CPVar (5,"a")] (CApply (CApply (CApply (CApply (CSymbol ("Array","at")) (CApply (CVar (0,"default")) (CVar (3,"n")))) (CVar (5,"a"))) (CVar (3,"n"))) (CApply (CSymbol ("Prelude","const")) (CVar (4,"v")))))) (CVar (1,"array"))) (CVar (2,"modifications"))))] []]),
  CFunc ("Array","applyAt") 3 Public (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))) (CTCons ("Array","Array") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPComb ("Array","Array") [CPVar (0,"default"),CPVar (1,"a")],CPVar (2,"n"),CPVar (3,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Array","Array")) (CVar (0,"default"))) (CApply (CApply (CApply (CApply (CSymbol ("Array","at")) (CApply (CVar (0,"default")) (CVar (2,"n")))) (CVar (1,"a"))) (CVar (2,"n"))) (CVar (3,"f"))))] []]),
  CFunc ("Array","arrayToList") 0 Public (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Array","foldArray")) (CSymbol ("Prelude","[]"))) (CLambda [CPVar (0,"x"),CPVar (1,"ys"),CPVar (2,"zs")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"ys"))) (CVar (2,"zs"))))))] []]),
  CFunc ("Array","at") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Array","Entry") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))) (CTCons ("Array","Entry") [CTVar (0,"a")]))))) (CRules CFlex [CRule [CPVar (0,"default"),CPComb ("Array","Empty") [],CPVar (1,"n"),CPVar (2,"f")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"n"))) (CLit (CIntc 0)),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CApply (CVar (2,"f")) (CVar (0,"default")))) (CSymbol ("Array","Empty"))) (CSymbol ("Array","Empty"))),(CApply (CSymbol ("Integer","odd")) (CVar (1,"n")),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CVar (0,"default"))) (CApply (CApply (CApply (CApply (CSymbol ("Array","at")) (CVar (0,"default"))) (CSymbol ("Array","Empty"))) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (1,"n"))) (CLit (CIntc 2)))) (CVar (2,"f")))) (CSymbol ("Array","Empty"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CVar (0,"default"))) (CSymbol ("Array","Empty"))) (CApply (CApply (CApply (CApply (CSymbol ("Array","at")) (CVar (0,"default"))) (CSymbol ("Array","Empty"))) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (1,"n"))) (CLit (CIntc 2)))) (CLit (CIntc 1)))) (CVar (2,"f"))))] [],CRule [CPVar (3,"default"),CPComb ("Array","Entry") [CPVar (4,"v"),CPVar (5,"al"),CPVar (6,"ar")],CPVar (7,"n"),CPVar (8,"f")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"n"))) (CLit (CIntc 0)),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CApply (CVar (8,"f")) (CVar (4,"v")))) (CVar (5,"al"))) (CVar (6,"ar"))),(CApply (CSymbol ("Integer","odd")) (CVar (7,"n")),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CVar (4,"v"))) (CApply (CApply (CApply (CApply (CSymbol ("Array","at")) (CVar (3,"default"))) (CVar (5,"al"))) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (7,"n"))) (CLit (CIntc 2)))) (CVar (8,"f")))) (CVar (6,"ar"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CVar (4,"v"))) (CVar (5,"al"))) (CApply (CApply (CApply (CApply (CSymbol ("Array","at")) (CVar (3,"default"))) (CVar (6,"ar"))) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (7,"n"))) (CLit (CIntc 2)))) (CLit (CIntc 1)))) (CVar (8,"f"))))] []]),
  CFunc ("Array","comb") 7 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTVar (1,"b"))) (CFuncType (CTCons ("Array","Entry") [CTVar (0,"a")]) (CFuncType (CTCons ("Array","Entry") [CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Array","Entry") [CTVar (2,"c")])))))))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPComb ("Array","Empty") [],CPComb ("Array","Empty") [],CPVar (3,"_"),CPVar (4,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Array","Empty"))] [],CRule [CPVar (5,"f"),CPVar (6,"def1"),CPVar (7,"def2"),CPComb ("Array","Entry") [CPVar (8,"x"),CPVar (9,"xl"),CPVar (10,"xr")],CPComb ("Array","Empty") [],CPVar (11,"b"),CPVar (12,"o")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CApply (CApply (CVar (5,"f")) (CVar (8,"x"))) (CApply (CVar (7,"def2")) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (11,"b"))) (CVar (12,"o")))) (CLit (CIntc 1)))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Array","comb")) (CVar (5,"f"))) (CVar (6,"def1"))) (CVar (7,"def2"))) (CVar (9,"xl"))) (CSymbol ("Array","Empty"))) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 2))) (CVar (11,"b")))) (CVar (12,"o")))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Array","comb")) (CVar (5,"f"))) (CVar (6,"def1"))) (CVar (7,"def2"))) (CVar (10,"xr"))) (CSymbol ("Array","Empty"))) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 2))) (CVar (11,"b")))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (12,"o"))) (CVar (11,"b")))))] [],CRule [CPVar (13,"f"),CPVar (14,"def1"),CPVar (15,"def2"),CPComb ("Array","Empty") [],CPComb ("Array","Entry") [CPVar (16,"y"),CPVar (17,"yl"),CPVar (18,"yr")],CPVar (19,"b"),CPVar (20,"o")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CApply (CApply (CVar (13,"f")) (CApply (CVar (14,"def1")) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (19,"b"))) (CVar (20,"o")))) (CLit (CIntc 1))))) (CVar (16,"y")))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Array","comb")) (CVar (13,"f"))) (CVar (14,"def1"))) (CVar (15,"def2"))) (CSymbol ("Array","Empty"))) (CVar (17,"yl"))) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 2))) (CVar (19,"b")))) (CVar (20,"o")))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Array","comb")) (CVar (13,"f"))) (CVar (14,"def1"))) (CVar (15,"def2"))) (CSymbol ("Array","Empty"))) (CVar (18,"yr"))) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 2))) (CVar (19,"b")))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (20,"o"))) (CVar (19,"b")))))] [],CRule [CPVar (21,"f"),CPVar (22,"def1"),CPVar (23,"def2"),CPComb ("Array","Entry") [CPVar (24,"x"),CPVar (25,"xl"),CPVar (26,"xr")],CPComb ("Array","Entry") [CPVar (27,"y"),CPVar (28,"yl"),CPVar (29,"yr")],CPVar (30,"b"),CPVar (31,"o")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CApply (CApply (CVar (21,"f")) (CVar (24,"x"))) (CVar (27,"y")))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Array","comb")) (CVar (21,"f"))) (CVar (22,"def1"))) (CVar (23,"def2"))) (CVar (25,"xl"))) (CVar (28,"yl"))) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 2))) (CVar (30,"b")))) (CVar (31,"o")))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Array","comb")) (CVar (21,"f"))) (CVar (22,"def1"))) (CVar (23,"def2"))) (CVar (26,"xr"))) (CVar (29,"yr"))) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 2))) (CVar (30,"b")))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (31,"o"))) (CVar (30,"b")))))] []]),
  CFunc ("Array","combSim") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CFuncType (CTCons ("Array","Entry") [CTVar (0,"a")]) (CFuncType (CTCons ("Array","Entry") [CTVar (0,"a")]) (CTCons ("Array","Entry") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Array","Empty") [],CPVar (1,"a2")] [(CSymbol ("Prelude","success"),CVar (1,"a2"))] [],CRule [CPVar (2,"_"),CPAs (6,"a1") (CPComb ("Array","Entry") [CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_")]),CPComb ("Array","Empty") []] [(CSymbol ("Prelude","success"),CVar (6,"a1"))] [],CRule [CPVar (7,"f"),CPComb ("Array","Entry") [CPVar (8,"x"),CPVar (9,"xl"),CPVar (10,"xr")],CPComb ("Array","Entry") [CPVar (11,"y"),CPVar (12,"yl"),CPVar (13,"yr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Array","Entry")) (CApply (CApply (CVar (7,"f")) (CVar (8,"x"))) (CVar (11,"y")))) (CApply (CApply (CApply (CSymbol ("Array","combSim")) (CVar (7,"f"))) (CVar (9,"xl"))) (CVar (12,"yl")))) (CApply (CApply (CApply (CSymbol ("Array","combSim")) (CVar (7,"f"))) (CVar (10,"xr"))) (CVar (13,"yr"))))] []]),
  CFunc ("Array","combine") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CFuncType (CTCons ("Array","Array") [CTVar (1,"b")]) (CTCons ("Array","Array") [CTVar (2,"c")])))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("Array","Array") [CPVar (1,"def1"),CPVar (2,"a1")],CPComb ("Array","Array") [CPVar (3,"def2"),CPVar (4,"a2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Array","Array")) (CLambda [CPVar (5,"i")] (CApply (CApply (CVar (0,"f")) (CApply (CVar (1,"def1")) (CVar (5,"i")))) (CApply (CVar (3,"def2")) (CVar (5,"i")))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Array","comb")) (CVar (0,"f"))) (CVar (1,"def1"))) (CVar (3,"def2"))) (CVar (2,"a1"))) (CVar (4,"a2"))) (CLit (CIntc 0))) (CLit (CIntc 1))))] []]),
  CFunc ("Array","combineSimilar") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CTCons ("Array","Array") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("Array","Array") [CPVar (1,"def"),CPVar (2,"a1")],CPComb ("Array","Array") [CPVar (3,"_"),CPVar (4,"a2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Array","Array")) (CVar (1,"def"))) (CApply (CApply (CApply (CSymbol ("Array","combSim")) (CVar (0,"f"))) (CVar (2,"a1"))) (CVar (4,"a2"))))] []]),
  CFunc ("Array","emptyDefaultArray") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))) (CTCons ("Array","Array") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"default")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Array","Array")) (CVar (0,"default"))) (CSymbol ("Array","Empty")))] []]),
  CFunc ("Array","emptyErrorArray") 0 Public (CTCons ("Array","Array") [CTVar (0,"a")]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Array","emptyDefaultArray")) (CSymbol ("Array","errorArray")))] []]),
  CFunc ("Array","errorArray") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"idx")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"idx")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))))))))))))))))] []]),
  CFunc ("Array","foldArray") 3 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))))) (CFuncType (CTCons ("Array","Array") [CTVar (1,"b")]) (CTVar (0,"a"))))) (CRules CFlex [CRule [CPVar (0,"emp"),CPVar (1,"ent"),CPComb ("Array","Array") [CPVar (2,"_"),CPVar (3,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Array","foldEntries")) (CVar (0,"emp"))) (CVar (1,"ent"))) (CVar (3,"es")))] []]),
  CFunc ("Array","foldEntries") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))))) (CFuncType (CTCons ("Array","Entry") [CTVar (1,"b")]) (CTVar (0,"a"))))) (CRules CFlex [CRule [CPVar (0,"emp"),CPVar (1,"_"),CPComb ("Array","Empty") []] [(CSymbol ("Prelude","success"),CVar (0,"emp"))] [],CRule [CPVar (2,"emp"),CPVar (3,"ent"),CPComb ("Array","Entry") [CPVar (4,"x"),CPVar (5,"a1"),CPVar (6,"a2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (3,"ent")) (CVar (4,"x"))) (CApply (CApply (CApply (CSymbol ("Array","foldEntries")) (CVar (2,"emp"))) (CVar (3,"ent"))) (CVar (5,"a1")))) (CApply (CApply (CApply (CSymbol ("Array","foldEntries")) (CVar (2,"emp"))) (CVar (3,"ent"))) (CVar (6,"a2"))))] []]),
  CFunc ("Array","from") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Array","Entry") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))))) (CRules CFlex [CRule [CPVar (0,"default"),CPComb ("Array","Empty") [],CPVar (1,"_")] [(CSymbol ("Prelude","success"),CVar (0,"default"))] [],CRule [CPVar (2,"default"),CPComb ("Array","Entry") [CPVar (3,"v"),CPVar (4,"al"),CPVar (5,"ar")],CPVar (6,"n")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"n"))) (CLit (CIntc 0)),CVar (3,"v")),(CApply (CSymbol ("Integer","odd")) (CVar (6,"n")),CApply (CApply (CApply (CSymbol ("Array","from")) (CVar (2,"default"))) (CVar (4,"al"))) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (6,"n"))) (CLit (CIntc 2)))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("Array","from")) (CVar (2,"default"))) (CVar (5,"ar"))) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (6,"n"))) (CLit (CIntc 2)))) (CLit (CIntc 1))))] []]),
  CFunc ("Array","listToArray") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Array","Entry") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Array","Empty"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"ys"),CPVar (3,"zs")]) (CApply (CSymbol ("Array","split")) (CVar (1,"xs"))) []] (CApply (CApply (CApply (CSymbol ("Array","Entry")) (CVar (0,"x"))) (CApply (CSymbol ("Array","listToArray")) (CVar (2,"ys")))) (CApply (CSymbol ("Array","listToArray")) (CVar (3,"zs")))))] []]),
  CFunc ("Array","listToDefaultArray") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Array","Array") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"def")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Array","Array")) (CVar (0,"def")))) (CSymbol ("Array","listToArray")))] []]),
  CFunc ("Array","listToErrorArray") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Array","Array") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Array","listToDefaultArray")) (CSymbol ("Array","errorArray")))] []]),
  CFunc ("Array","split") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"x"),CPComb ("Prelude",":") [CPVar (2,"y"),CPVar (3,"xys")]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"xs"),CPVar (5,"ys")]) (CApply (CSymbol ("Array","split")) (CVar (3,"xys"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CVar (4,"xs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"y"))) (CVar (5,"ys")))))] []]),
  CFunc ("Array","update") 3 Public (CFuncType (CTCons ("Array","Array") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Array","Array") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPComb ("Array","Array") [CPVar (0,"default"),CPVar (1,"a")],CPVar (2,"i"),CPVar (3,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Array","Array")) (CVar (0,"default"))) (CApply (CApply (CApply (CApply (CSymbol ("Array","at")) (CApply (CVar (0,"default")) (CVar (2,"i")))) (CVar (1,"a"))) (CVar (2,"i"))) (CApply (CSymbol ("Prelude","const")) (CVar (3,"v")))))] []])]
 [COp ("Array","//") CInfixlOp 9,COp ("Array","!") CInfixlOp 9]
