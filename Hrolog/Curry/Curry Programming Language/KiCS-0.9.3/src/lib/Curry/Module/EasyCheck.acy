CurryProg "EasyCheck"
 ["Prelude","List","Sort","Meta","Integer","Read","RandomExternal"]
 [CType ("EasyCheck","Test") Private [] [CCons ("EasyCheck","Test") 3 Private [CTCons ("EasyCheck","Result") [],CTCons ("Prelude","[]") [CTCons ("Prelude","String") []],CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]]],
  CType ("EasyCheck","Result") Public [] [CCons ("EasyCheck","Undef") 0 Public [],CCons ("EasyCheck","Ok") 0 Public [],CCons ("EasyCheck","Falsified") 1 Public [CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]],CCons ("EasyCheck","Ambigious") 2 Public [CTCons ("Prelude","[]") [CTCons ("Prelude","Bool") []],CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]]],
  CTypeSyn ("EasyCheck","Prop") Public [] (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]),
  CType ("EasyCheck","Config") Private [] [CCons ("EasyCheck","Config") 3 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CTCons ("Prelude","String") []))]]]
 [CFunc ("EasyCheck","#") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x"))) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"n"))) (CVar (2,"x0"))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","length"))) (CSymbol ("List","nub")))))] []]),
  CFunc ("EasyCheck","-=-") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","is")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"x"))) (CVar (1,"y")))) (CApply (CSymbol ("Prelude","uncurry")) (CSymbol ("Prelude","=="))))] []]),
  CFunc ("EasyCheck","<~") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x"))) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("EasyCheck","isSubsetOf")) (CVar (2,"x0"))) (CApply (CSymbol ("EasyCheck","valuesOf")) (CVar (1,"y"))))))] []]),
  CFunc ("EasyCheck","<~>") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x"))) (CApply (CSymbol ("EasyCheck","isSameSet")) (CApply (CSymbol ("EasyCheck","valuesOf")) (CVar (1,"y")))))] []]),
  CFunc ("EasyCheck","==>") 2 Public (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPComb ("Prelude","True") [],CPVar (0,"p")] [(CSymbol ("Prelude","success"),CVar (0,"p"))] [],CRule [CPComb ("Prelude","False") [],CPVar (1,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("EasyCheck","notest"))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("EasyCheck","always") 0 Public (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("EasyCheck","isAlways")) (CVar (0,"x0"))) (CSymbol ("Prelude","id"))))] []]),
  CFunc ("EasyCheck","args") 1 Private (CFuncType (CTCons ("EasyCheck","Test") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPComb ("EasyCheck","Test") [CPVar (0,"_"),CPVar (1,"a"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"a"))] []]),
  CFunc ("EasyCheck","check") 2 Private (CFuncType (CTCons ("EasyCheck","Config") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"config"),CPVar (1,"p")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"isOrBased")) (CSymbol ("EasyCheck","evalModeIsOrBased")),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"isOrBased"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("EasyCheck","tests")) (CVar (0,"config"))) (CVar (1,"p"))) (CLit (CIntc 0))) (CLit (CIntc 0))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","putStrLn"))) (CApply (CSymbol ("Prelude","unlines")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (CSymbol ("Prelude","[]"))))))))))))))])] []]),
  CFunc ("EasyCheck","classify") 2 Public (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))) (CRules CFlex [CRule [CPComb ("Prelude","True") [],CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("EasyCheck","label")) (CVar (0,"name")))] [],CRule [CPComb ("Prelude","False") [],CPVar (1,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","id"))] []]),
  CFunc ("EasyCheck","collect") 0 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","label"))) (CSymbol ("Prelude","show")))] []]),
  CFunc ("EasyCheck","collectAs") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","label"))) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CVar (1,"x0"))))) (CSymbol ("Prelude","show"))))] []]),
  CFunc ("EasyCheck","deterministic") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","is")) (CVar (0,"x"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))] []]),
  CFunc ("EasyCheck","diagonal") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","concat"))) (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("EasyCheck","diags"))) (CSymbol ("Prelude","[]"))))] [CLocalFunc (CFunc ("EasyCheck","diags") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"ys")] [(CSymbol ("Prelude","success"),CVar (0,"ys"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"x"),CPVar (2,"xs")],CPVar (3,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("EasyCheck","merge")) (CVar (2,"xs"))) (CVar (3,"ys"))))] []])),CLocalFunc (CFunc ("EasyCheck","merge") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"ys")] [(CSymbol ("Prelude","success"),CVar (0,"ys"))] [],CRule [CPAs (3,"xs") (CPComb ("Prelude",":") [CPVar (1,"_"),CPVar (2,"_")]),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"x0"))) (CSymbol ("Prelude","[]"))))) (CVar (3,"xs")))] [],CRule [CPComb ("Prelude",":") [CPVar (5,"x"),CPVar (6,"xs")],CPComb ("Prelude",":") [CPVar (7,"y"),CPVar (8,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"x"))) (CVar (7,"y")))) (CApply (CApply (CSymbol ("EasyCheck","merge")) (CVar (6,"xs"))) (CVar (8,"ys"))))] []]))]]),
  CFunc ("EasyCheck","done") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"mesg"),CPVar (1,"ntest"),CPVar (2,"stamps")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","putStr"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"mesg"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"ntest")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude",">=")) (CVar (1,"ntest"))) (CLit (CIntc 2)))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))) (CVar (3,"table"))))))))])] [CLocalPat (CPVar (3,"table")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","display"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("EasyCheck","entry")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","reverse"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Sort","mergeSort")) (CApply (CApply (CSymbol ("EasyCheck","leqPair")) (CSymbol ("Prelude","<="))) (CApply (CSymbol ("Sort","leqList")) (CSymbol ("Sort","leqString")))))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("EasyCheck","pairLength")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("List","group"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Sort","mergeSort")) (CApply (CSymbol ("Sort","leqList")) (CSymbol ("Sort","leqString"))))) (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("Prelude","null")))))))))))) (CVar (2,"stamps"))) [],CLocalFunc (CFunc ("EasyCheck","display") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Prelude",":") [CPVar (4,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (4,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPAs (8,"xs") (CPComb ("Prelude",":") [CPVar (5,"_"),CPComb ("Prelude",":") [CPVar (6,"_"),CPVar (7,"_")]])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Prelude","unlines")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (9,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]")))))) (CVar (8,"xs")))))] []])),CLocalFunc (CFunc ("EasyCheck","pairLength") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")])) (CRules CFlex [CRule [CPAs (6,"xss") (CPComb ("Prelude",":") [CPVar (4,"xs"),CPVar (5,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","length")) (CVar (6,"xss")))) (CVar (4,"xs")))] []])),CLocalFunc (CFunc ("EasyCheck","entry") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (4,"n"),CPVar (5,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("EasyCheck","percentage")) (CVar (4,"n"))) (CVar (1,"ntest")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CVar (5,"xs"))))))] []])),CLocalFunc (CFunc ("EasyCheck","percentage") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (4,"n"),CPVar (5,"m")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (6,"s")) (CApply (CSymbol ("Prelude","show")) (CApply (CApply (CSymbol ("Prelude","div")) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 100))) (CVar (4,"n")))) (CVar (5,"m")))) []] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","replicate")) (CApply (CApply (CSymbol ("Prelude","-")) (CLit (CIntc 3))) (CApply (CSymbol ("Prelude","length")) (CVar (6,"s"))))) (CLit (CCharc ' ')))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '%'))) (CSymbol ("Prelude","[]"))))))] []]))]]),
  CFunc ("EasyCheck","easy") 0 Private (CTCons ("EasyCheck","Config") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","Config")) (CLit (CIntc 100))) (CLit (CIntc 1000))) (CLambda [CPVar (0,"n"),CPVar (1,"_")] (CLetDecl [CLocalPat (CPVar (2,"s")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CSymbol ("Prelude","show")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (0,"n"))) (CLit (CIntc 1))))) []] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"s"))) (CListComp (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 8))) [CSPat (CPVar (3,"_")) (CVar (2,"s"))])))))] []]),
  CFunc ("EasyCheck","easyCheck") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("EasyCheck","check")) (CSymbol ("EasyCheck","easy")))] []]),
  CFunc ("EasyCheck","easyCheck1") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","easyCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id"))))] []]),
  CFunc ("EasyCheck","easyCheck2") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","easyCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id")))))] []]),
  CFunc ("EasyCheck","easyCheck3") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","easyCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id"))))))] []]),
  CFunc ("EasyCheck","easyCheck4") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","easyCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id")))))))] []]),
  CFunc ("EasyCheck","easyCheck5") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","easyCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id"))))))))] []]),
  CFunc ("EasyCheck","evalModeIsOrBased") 0 Private (CTCons ("Prelude","IO") [CTCons ("Prelude","Bool") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Prelude","getSearchTree")) (CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","unknown"))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x0"))) (CApply (CSymbol ("Prelude","Value")) (CSymbol ("Prelude","()")))))))] []]),
  CFunc ("EasyCheck","eventually") 0 Public (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("EasyCheck","isEventually")) (CVar (0,"x0"))) (CSymbol ("Prelude","id"))))] []]),
  CFunc ("EasyCheck","every") 1 Private (CFuncType (CTCons ("EasyCheck","Config") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))) (CRules CFlex [CRule [CPComb ("EasyCheck","Config") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"f")]] [(CSymbol ("Prelude","success"),CVar (2,"f"))] []]),
  CFunc ("EasyCheck","failing") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x"))) (CSymbol ("Prelude","null")))] []]),
  CFunc ("EasyCheck","flat") 1 Private (CFuncType (CTCons ("Prelude","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","SearchTree") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"t")) [CBranch (CPComb ("Prelude","Value") [CPVar (1,"_")]) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"t"))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude","Choice") [CPVar (2,"ts")]) (CVar (2,"ts")),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","[]"))])] []]),
  CFunc ("EasyCheck","flatRep") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","SearchTree") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","SearchTree") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"ts")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"n"))) (CLit (CIntc 0)),CVar (1,"ts")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("EasyCheck","flatRep")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (0,"n"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("EasyCheck","flat"))) (CVar (1,"ts"))))] []]),
  CFunc ("EasyCheck","for") 0 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("EasyCheck","forAll")) (CSymbol ("Prelude","id")))] []]),
  CFunc ("EasyCheck","forAll") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CFuncType (CTVar (1,"b")) (CFuncType (CFuncType (CTVar (1,"b")) (CTVar (0,"a"))) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))) (CRules CFlex [CRule [CPVar (0,"c"),CPVar (1,"x"),CPVar (2,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","forAllValues")) (CVar (0,"c"))) (CApply (CSymbol ("EasyCheck","valuesOf")) (CVar (1,"x")))) (CVar (2,"f")))] []]),
  CFunc ("EasyCheck","forAllValues") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CFuncType (CFuncType (CTVar (1,"b")) (CTVar (0,"a"))) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))) (CRules CFlex [CRule [CPVar (0,"c"),CPVar (1,"xs"),CPVar (2,"f")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("EasyCheck","diagonal")) (CListComp (CListComp (CApply (CApply (CSymbol ("EasyCheck","updArgs")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","show")) (CVar (3,"y")))) (CVar (5,"x0"))))) (CVar (4,"t"))) [CSPat (CPVar (4,"t")) (CApply (CVar (0,"c")) (CApply (CVar (2,"f")) (CVar (3,"y"))))]) [CSPat (CPVar (3,"y")) (CVar (1,"xs"))]))] []]),
  CFunc ("EasyCheck","forValues") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("EasyCheck","forAllValues")) (CSymbol ("Prelude","id")))] []]),
  CFunc ("EasyCheck","is") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x"))) (CLambda [CPVar (2,"xs")] (CCase (CVar (2,"xs")) [CBranch (CPComb ("Prelude",":") [CPVar (3,"y"),CPComb ("Prelude","[]") []]) (CApply (CVar (1,"f")) (CVar (3,"y"))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])))] []]),
  CFunc ("EasyCheck","isAlways") 1 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x")))) (CSymbol ("Prelude","all")))] []]),
  CFunc ("EasyCheck","isEventually") 1 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x")))) (CSymbol ("Prelude","any")))] []]),
  CFunc ("EasyCheck","isSameSet") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"xs"),CPVar (1,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("EasyCheck","subset")) (CVar (2,"xs'"))) (CVar (3,"ys'")))) (CApply (CApply (CSymbol ("EasyCheck","subset")) (CVar (3,"ys'"))) (CVar (2,"xs'"))))] [CLocalPat (CPVar (2,"xs'")) (CApply (CSymbol ("List","nub")) (CVar (0,"xs"))) [],CLocalPat (CPVar (3,"ys'")) (CApply (CSymbol ("List","nub")) (CVar (1,"ys"))) []]]),
  CFunc ("EasyCheck","isSubsetOf") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"xs"),CPVar (1,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","subset")) (CApply (CSymbol ("List","nub")) (CVar (0,"xs")))) (CVar (1,"ys")))] []]),
  CFunc ("EasyCheck","label") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","map"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","updStamp"))) (CSymbol ("Prelude",":"))))] []]),
  CFunc ("EasyCheck","leList") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPVar (1,"_"),CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPVar (4,"_"),CPComb ("Prelude",":") [CPVar (5,"_"),CPVar (6,"_")],CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPVar (7,"le"),CPComb ("Prelude",":") [CPVar (8,"x"),CPVar (9,"xs")],CPComb ("Prelude",":") [CPVar (10,"y"),CPVar (11,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CVar (7,"le")) (CVar (8,"x"))) (CVar (10,"y")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"x"))) (CVar (10,"y")))) (CApply (CApply (CApply (CSymbol ("EasyCheck","leList")) (CVar (7,"le"))) (CVar (9,"xs"))) (CVar (11,"ys")))))] []]),
  CFunc ("EasyCheck","leqPair") 4 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("Prelude","Bool") []))))) (CRules CFlex [CRule [CPVar (0,"leqa"),CPVar (1,"leqb"),CPComb ("Prelude","(,)") [CPVar (2,"x1"),CPVar (3,"y1")],CPComb ("Prelude","(,)") [CPVar (4,"x2"),CPVar (5,"y2")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"x1"))) (CVar (4,"x2")),CApply (CApply (CVar (1,"leqb")) (CVar (3,"y1"))) (CVar (5,"y2"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CVar (0,"leqa")) (CVar (2,"x1"))) (CVar (4,"x2")))] []]),
  CFunc ("EasyCheck","maxFail") 1 Private (CFuncType (CTCons ("EasyCheck","Config") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("EasyCheck","Config") [CPVar (0,"_"),CPVar (1,"n"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"n"))] []]),
  CFunc ("EasyCheck","maxTest") 1 Private (CFuncType (CTCons ("EasyCheck","Config") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("EasyCheck","Config") [CPVar (0,"n"),CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"n"))] []]),
  CFunc ("EasyCheck","notest") 0 Private (CTCons ("EasyCheck","Test") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","Test")) (CSymbol ("EasyCheck","Undef"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("EasyCheck","nth") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"n")) [CBranch (CPLit (CIntc 1)) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))),CBranch (CPLit (CIntc 2)) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))),CBranch (CPLit (CIntc 3)) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))))),CBranch (CPVar (1,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"n")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]")))))])] []]),
  CFunc ("EasyCheck","prop") 0 Public (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("EasyCheck","uniquely"))] []]),
  CFunc ("EasyCheck","result") 1 Public (CFuncType (CTCons ("EasyCheck","Test") []) (CTCons ("EasyCheck","Result") [])) (CRules CFlex [CRule [CPComb ("EasyCheck","Test") [CPVar (0,"r"),CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"r"))] []]),
  CFunc ("EasyCheck","rndLevelDiag") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"rnd"),CPVar (1,"t")] [(CSymbol ("Prelude","success"),CListComp (CVar (2,"x")) [CSPat (CPComb ("Prelude","Value") [CPVar (2,"x")]) (CApply (CSymbol ("EasyCheck","diagonal")) (CApply (CApply (CSymbol ("EasyCheck","rndLevels")) (CVar (0,"rnd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"t"))) (CSymbol ("Prelude","[]")))))])] []]),
  CFunc ("EasyCheck","rndLevelDiagFlat") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"d"),CPVar (1,"rnd"),CPVar (2,"t")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","concat"))) (CApply (CSymbol ("EasyCheck","transpose")) (CApply (CApply (CApply (CSymbol ("Prelude","zipWith")) (CSymbol ("EasyCheck","rndLevelDiag"))) (CVar (3,"rs"))) (CApply (CApply (CSymbol ("EasyCheck","flatRep")) (CVar (0,"d"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"t"))) (CSymbol ("Prelude","[]")))))))] [CLocalPat (CPVar (3,"rs")) (CApply (CSymbol ("RandomExternal","split")) (CVar (1,"rnd"))) []]]),
  CFunc ("EasyCheck","rndLevels") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","SearchTree") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","SearchTree") [CTVar (0,"a")]]]))) (CRules CFlex [CRule [CPVar (0,"rnd"),CPVar (1,"ts")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"ts")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"ts"))) (CApply (CApply (CSymbol ("EasyCheck","rndLevels")) (CVar (2,"r"))) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CApply (CSymbol ("Prelude","zipWith")) (CSymbol ("EasyCheck","shuffle"))) (CVar (3,"rs"))) (CListComp (CVar (4,"us")) [CSPat (CPComb ("Prelude","Choice") [CPVar (4,"us")]) (CVar (1,"ts"))]))))))] [CLocalPat (CPComb ("Prelude",":") [CPVar (2,"r"),CPVar (3,"rs")]) (CApply (CSymbol ("RandomExternal","split")) (CVar (0,"rnd"))) []]]),
  CFunc ("EasyCheck","setEvery") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("EasyCheck","Config") []) (CTCons ("EasyCheck","Config") []))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("EasyCheck","Config") [CPVar (1,"n"),CPVar (2,"m"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","Config")) (CVar (1,"n"))) (CVar (2,"m"))) (CVar (0,"f")))] []]),
  CFunc ("EasyCheck","setResult") 2 Private (CFuncType (CTCons ("EasyCheck","Result") []) (CFuncType (CTCons ("EasyCheck","Test") []) (CTCons ("EasyCheck","Test") []))) (CRules CFlex [CRule [CPVar (0,"res"),CPComb ("EasyCheck","Test") [CPVar (1,"_"),CPVar (2,"s"),CPVar (3,"a")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","Test")) (CVar (0,"res"))) (CVar (3,"a"))) (CVar (2,"s")))] []]),
  CFunc ("EasyCheck","shuffle") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"rnd"),CPVar (1,"l")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","shuffleWithLen")) (CApply (CSymbol ("RandomExternal","nextInt")) (CVar (0,"rnd")))) (CApply (CSymbol ("Prelude","length")) (CVar (1,"l")))) (CVar (1,"l")))] []]),
  CFunc ("EasyCheck","shuffleWithLen") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (0,"r"),CPVar (1,"rs")],CPVar (2,"len"),CPVar (3,"xs")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"len"))) (CLit (CIntc 0)),CSymbol ("Prelude","[]")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"z"))) (CApply (CApply (CApply (CSymbol ("EasyCheck","shuffleWithLen")) (CVar (1,"rs"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (2,"len"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (4,"ys"))) (CVar (6,"zs")))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"ys"),CPComb ("Prelude",":") [CPVar (5,"z"),CPVar (6,"zs")]]) (CApply (CApply (CSymbol ("Prelude","splitAt")) (CApply (CApply (CSymbol ("Prelude","mod")) (CApply (CSymbol ("Integer","abs")) (CVar (0,"r")))) (CVar (2,"len")))) (CVar (3,"xs"))) []]]),
  CFunc ("EasyCheck","stamp") 1 Private (CFuncType (CTCons ("EasyCheck","Test") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPComb ("EasyCheck","Test") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CVar (2,"s"))] []]),
  CFunc ("EasyCheck","subset") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"xs"),CPVar (1,"ys")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","null")) (CApply (CApply (CSymbol ("List","\\\\")) (CVar (0,"xs"))) (CVar (1,"ys"))))] []]),
  CFunc ("EasyCheck","suc") 1 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CFuncType (CFuncType (CTVar (1,"b")) (CTVar (0,"a"))) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","forAll")) (CVar (0,"n"))) (CSymbol ("Prelude","unknown")))] []]),
  CFunc ("EasyCheck","successful") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("Prelude","null"))))] []]),
  CFunc ("EasyCheck","test") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("EasyCheck","setResult")) (CVar (3,"res"))) (CSymbol ("EasyCheck","notest")))) (CSymbol ("Prelude","[]")))] [CLocalPat (CPVar (2,"xs")) (CApply (CSymbol ("EasyCheck","valuesOf")) (CVar (0,"x"))) [],CLocalPat (CPVar (3,"res")) (CCase (CApply (CSymbol ("EasyCheck","valuesOf")) (CApply (CVar (1,"f")) (CVar (2,"xs")))) [CBranch (CPComb ("Prelude",":") [CPComb ("Prelude","True") [],CPComb ("Prelude","[]") []]) (CSymbol ("EasyCheck","Ok")),CBranch (CPComb ("Prelude",":") [CPComb ("Prelude","False") [],CPComb ("Prelude","[]") []]) (CApply (CSymbol ("EasyCheck","Falsified")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","show"))) (CVar (2,"xs")))),CBranch (CPVar (4,"bs")) (CApply (CApply (CSymbol ("EasyCheck","Ambigious")) (CVar (4,"bs"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","show"))) (CVar (2,"xs"))))]) []]]),
  CFunc ("EasyCheck","tests") 5 Private (CFuncType (CTCons ("EasyCheck","Config") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])))))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") [],CPVar (1,"ntest"),CPVar (2,"_"),CPVar (3,"stamps")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","done")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))))))) (CVar (1,"ntest"))) (CVar (3,"stamps")))] [],CRule [CPVar (4,"config"),CPComb ("Prelude",":") [CPVar (5,"t"),CPVar (6,"ts")],CPVar (7,"ntest"),CPVar (8,"nfail"),CPVar (9,"stamps")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"ntest"))) (CApply (CSymbol ("EasyCheck","maxTest")) (CVar (4,"config"))),CApply (CApply (CApply (CSymbol ("EasyCheck","done")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'K'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))))))))))) (CVar (7,"ntest"))) (CVar (9,"stamps"))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"nfail"))) (CApply (CSymbol ("EasyCheck","maxFail")) (CVar (4,"config"))),CApply (CApply (CApply (CSymbol ("EasyCheck","done")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))) (CVar (7,"ntest"))) (CVar (9,"stamps"))),(CSymbol ("Prelude","otherwise"),CDoExpr [CSExpr (CApply (CSymbol ("Prelude","putStr")) (CApply (CApply (CApply (CSymbol ("EasyCheck","every")) (CVar (4,"config"))) (CVar (7,"ntest"))) (CApply (CSymbol ("EasyCheck","args")) (CVar (5,"t"))))),CSExpr (CCase (CApply (CSymbol ("EasyCheck","result")) (CVar (5,"t"))) [CBranch (CPComb ("EasyCheck","Undef") []) (CApply (CApply (CApply (CApply (CApply (CSymbol ("EasyCheck","tests")) (CVar (4,"config"))) (CVar (6,"ts"))) (CVar (7,"ntest"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (8,"nfail"))) (CLit (CIntc 1)))) (CVar (9,"stamps"))),CBranch (CPComb ("EasyCheck","Ok") []) (CApply (CApply (CApply (CApply (CApply (CSymbol ("EasyCheck","tests")) (CVar (4,"config"))) (CVar (6,"ts"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (7,"ntest"))) (CLit (CIntc 1)))) (CVar (8,"nfail"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("EasyCheck","stamp")) (CVar (5,"t")))) (CVar (9,"stamps")))),CBranch (CPComb ("EasyCheck","Falsified") [CPVar (10,"results")]) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","putStr"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("EasyCheck","nth")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (7,"ntest"))) (CLit (CIntc 1))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CApply (CSymbol ("EasyCheck","args")) (CVar (5,"t"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","unlines")) (CApply (CSymbol ("EasyCheck","args")) (CVar (5,"t"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (10,"results")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CSymbol ("Prelude","unlines")) (CVar (10,"results")))))))))))),CBranch (CPComb ("EasyCheck","Ambigious") [CPVar (11,"bs"),CPVar (12,"results")]) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","putStr"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (11,"bs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("EasyCheck","nth")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (7,"ntest"))) (CLit (CIntc 1))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CApply (CSymbol ("EasyCheck","args")) (CVar (5,"t"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","unlines")) (CApply (CSymbol ("EasyCheck","args")) (CVar (5,"t"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (12,"results")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CSymbol ("Prelude","unlines")) (CVar (12,"results"))))))))))))))])])] []]),
  CFunc ("EasyCheck","transpose") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPComb ("Prelude","[]") [],CPVar (0,"xss")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("EasyCheck","transpose")) (CVar (0,"xss")))] [],CRule [CPComb ("Prelude",":") [CPComb ("Prelude",":") [CPVar (1,"x"),CPVar (2,"xs")],CPVar (3,"xss")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CListComp (CVar (4,"h")) [CSPat (CPComb ("Prelude",":") [CPVar (4,"h"),CPVar (5,"_")]) (CVar (3,"xss"))]))) (CApply (CSymbol ("EasyCheck","transpose")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"xs"))) (CListComp (CVar (7,"t")) [CSPat (CPComb ("Prelude",":") [CPVar (6,"_"),CPVar (7,"t")]) (CVar (3,"xss"))]))))] []]),
  CFunc ("EasyCheck","trivial") 0 Public (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("EasyCheck","classify")) (CVar (0,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))))))))] []]),
  CFunc ("EasyCheck","uniquely") 0 Public (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("EasyCheck","is")) (CVar (0,"x0"))) (CSymbol ("Prelude","id"))))] []]),
  CFunc ("EasyCheck","updArgs") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("EasyCheck","Test") []) (CTCons ("EasyCheck","Test") []))) (CRules CFlex [CRule [CPVar (0,"upd"),CPComb ("EasyCheck","Test") [CPVar (1,"r"),CPVar (2,"a"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","Test")) (CVar (1,"r"))) (CApply (CVar (0,"upd")) (CVar (2,"a")))) (CVar (3,"s")))] []]),
  CFunc ("EasyCheck","updStamp") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("EasyCheck","Test") []) (CTCons ("EasyCheck","Test") []))) (CRules CFlex [CRule [CPVar (0,"upd"),CPComb ("EasyCheck","Test") [CPVar (1,"r"),CPVar (2,"a"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("EasyCheck","Test")) (CVar (1,"r"))) (CVar (2,"a"))) (CApply (CVar (0,"upd")) (CVar (3,"s"))))] []]),
  CFunc ("EasyCheck","valuesOf") 0 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("EasyCheck","rndLevelDiagFlat")) (CLit (CIntc 3))) (CLit (CIntc 2008)))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Meta","searchTree"))) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("Prelude","id"))) (CVar (0,"x0"))))))] []]),
  CFunc ("EasyCheck","verbose") 0 Private (CTCons ("EasyCheck","Config") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","setEvery")) (CLambda [CPVar (0,"n"),CPVar (1,"xs")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"n")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Prelude","unlines")) (CVar (1,"xs"))))))) (CSymbol ("EasyCheck","easy")))] []]),
  CFunc ("EasyCheck","verboseCheck") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("EasyCheck","check")) (CSymbol ("EasyCheck","verbose")))] []]),
  CFunc ("EasyCheck","verboseCheck1") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","verboseCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id"))))] []]),
  CFunc ("EasyCheck","verboseCheck2") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","verboseCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id")))))] []]),
  CFunc ("EasyCheck","verboseCheck3") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","verboseCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id"))))))] []]),
  CFunc ("EasyCheck","verboseCheck4") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","verboseCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id")))))))] []]),
  CFunc ("EasyCheck","verboseCheck5") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []])))))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("EasyCheck","verboseCheck"))) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CApply (CSymbol ("EasyCheck","suc")) (CSymbol ("Prelude","id"))))))))] []]),
  CFunc ("EasyCheck","~>") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("EasyCheck","Test") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("EasyCheck","test")) (CVar (0,"x"))) (CApply (CSymbol ("EasyCheck","isSubsetOf")) (CApply (CSymbol ("EasyCheck","valuesOf")) (CVar (1,"y")))))] []])]
 [COp ("EasyCheck","isSubsetOf") CInfixOp 4,COp ("EasyCheck","isSameSet") CInfixOp 4,COp ("EasyCheck","trivial") CInfixOp 1,COp ("EasyCheck","<~") CInfixOp 1,COp ("EasyCheck","~>") CInfixOp 1,COp ("EasyCheck","<~>") CInfixOp 1,COp ("EasyCheck","#") CInfixOp 1,COp ("EasyCheck","-=-") CInfixOp 1,COp ("EasyCheck","isEventually") CInfixOp 1,COp ("EasyCheck","isAlways") CInfixOp 1,COp ("EasyCheck","is") CInfixOp 1,COp ("EasyCheck","==>") CInfixrOp 0]
