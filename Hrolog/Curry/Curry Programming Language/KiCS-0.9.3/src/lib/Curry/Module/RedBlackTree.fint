Prog "RedBlackTree" ["Prelude"] [Type ("RedBlackTree","RedBlackTree") Public [0] []] [Func ("RedBlackTree","empty") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (TCons ("RedBlackTree","RedBlackTree") [TVar 0])))) (Rule [] (Var 0)),Func ("RedBlackTree","isEmpty") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("RedBlackTree","newTreeLike") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0])) (Rule [] (Var 0)),Func ("RedBlackTree","lookup") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("RedBlackTree","update") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [] (Var 0)),Func ("RedBlackTree","delete") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [] (Var 0)),Func ("RedBlackTree","tree2list") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("RedBlackTree","sort") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("RedBlackTree","setInsertEquivalence") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [] (Var 0))] []