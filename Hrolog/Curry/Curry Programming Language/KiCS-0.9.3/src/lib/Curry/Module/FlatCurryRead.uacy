CurryProg "FlatCurryRead"
 ["Prelude","FlatCurry","Directory","FileGoodies","System","Distribution","List","Time"]
 []
 [CFunc ("FlatCurryRead","importsOf") 1 Private (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Prog") [CPVar (0,"_"),CPVar (1,"imps"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"imps"))] []]),
  CFunc ("FlatCurryRead","parseFlatCurryFileWithImports") 3 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"loadpath"),CPVar (1,"modname"),CPVar (2,"suffixes")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","putStrLn"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"modname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))))))))),CSExpr (CApply (CApply (CApply (CSymbol ("Distribution","callFrontendWithParams")) (CSymbol ("Distribution","FCY"))) (CApply (CApply (CSymbol ("Distribution","setQuiet")) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Distribution","setFullPath")) (CVar (0,"loadpath"))) (CSymbol ("Distribution","defaultParams"))))) (CVar (1,"modname"))),CSExpr (CApply (CSymbol ("Prelude","putStr")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))),CSExpr (CApply (CApply (CSymbol ("FlatCurryRead","collectMods")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"modname"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))])] [CLocalFunc (CFunc ("FlatCurryRead","collectMods") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (3,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CSymbol ("Prelude","putStrLn")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Prelude",":") [CPVar (4,"mod"),CPVar (5,"mods")],CPVar (6,"implist")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (4,"mod"))) (CVar (6,"implist")))) (CApply (CApply (CSymbol ("FlatCurryRead","collectMods")) (CVar (5,"mods"))) (CVar (6,"implist")))) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CApply (CSymbol ("FileGoodies","lookupFileInPath")) (CVar (4,"mod"))) (CVar (2,"suffixes"))) (CVar (0,"loadpath")))) (CLambda [CPVar (7,"mbfname")] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","error"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (4,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CLambda [CPVar (8,"filename")] (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CSymbol ("Prelude","putStr")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"filename"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("FlatCurry","readFlatCurryFile")) (CVar (8,"filename"))))) (CLambda [CPVar (9,"prog")] (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CSymbol ("FlatCurryRead","collectMods")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"mods"))) (CApply (CSymbol ("FlatCurryRead","importsOf")) (CVar (9,"prog"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"mod"))) (CVar (6,"implist"))))) (CLambda [CPVar (10,"results")] (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"prog"))) (CVar (10,"results")))))))))) (CVar (7,"mbfname"))))))] []]))]]),
  CFunc ("FlatCurryRead","readFlatCurryFileWithImports") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("FlatCurry","Prog") []]])))) (CRules CFlex [CRule [CPVar (0,"loadpath"),CPVar (1,"mod"),CPVar (2,"suffixes")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CSymbol ("Prelude","putStr")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))),CSPat (CPVar (3,"mbaimps")) (CApply (CApply (CApply (CSymbol ("FlatCurryRead","tryReadFlatCurryFileWithImports")) (CVar (0,"loadpath"))) (CVar (1,"mod"))) (CVar (2,"suffixes"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CApply (CSymbol ("FlatCurryRead","parseFlatCurryFileWithImports")) (CVar (0,"loadpath"))) (CVar (1,"mod"))) (CVar (2,"suffixes")))) (CSymbol ("Prelude","return"))) (CVar (3,"mbaimps")))])] []]),
  CFunc ("FlatCurryRead","readFlatCurryIfPossible") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("FlatCurry","Prog") []]])))) (CRules CFlex [CRule [CPVar (0,"loadpath"),CPVar (1,"modname"),CPVar (2,"suffixes")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"mbfname")) (CApply (CApply (CApply (CSymbol ("FileGoodies","lookupFileInPath")) (CVar (1,"modname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("Prelude","[]"))))) (CVar (0,"loadpath"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CApply (CSymbol ("FileGoodies","lookupFileInPath")) (CVar (1,"modname"))) (CVar (2,"suffixes"))) (CVar (0,"loadpath")))) (CLambda [CPVar (4,"fname")] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))) (CLambda [CPVar (5,"progname")] (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("FlatCurry","readFlatCurryFile")) (CVar (5,"progname")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Just")))))) (CVar (4,"fname")))))) (CLambda [CPVar (6,"sname")] (CDoExpr [CSLet [CLocalPat (CPVar (7,"moddir")) (CApply (CSymbol ("FileGoodies","dirName")) (CVar (6,"sname"))) [],CLocalPat (CPVar (8,"pathofmod")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"moddir"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Distribution","addCurrySubdir")) (CVar (7,"moddir")))) (CSymbol ("Prelude","[]")))) []],CSPat (CPVar (9,"mbflatfile")) (CApply (CApply (CApply (CSymbol ("FileGoodies","lookupFileInPath")) (CVar (1,"modname"))) (CVar (2,"suffixes"))) (CVar (8,"pathofmod"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))) (CLambda [CPVar (10,"flatfile")] (CDoExpr [CSPat (CPVar (11,"ctime")) (CApply (CSymbol ("Directory","getModificationTime")) (CVar (6,"sname"))),CSPat (CPVar (12,"ftime")) (CApply (CSymbol ("Directory","getModificationTime")) (CVar (10,"flatfile"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude",">")) (CApply (CSymbol ("Time","clockTimeToInt")) (CVar (11,"ctime")))) (CApply (CSymbol ("Time","clockTimeToInt")) (CVar (12,"ftime"))))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CSymbol ("Prelude","putStr")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (10,"flatfile"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("FlatCurry","readFlatCurryFile")) (CVar (10,"flatfile"))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Just")))))]))) (CVar (9,"mbflatfile")))]))) (CVar (3,"mbfname")))])] []]),
  CFunc ("FlatCurryRead","readFlatCurryIntWithImports") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("FlatCurry","Prog") []]])) (CRules CFlex [CRule [CPVar (0,"modname")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"loadpath")) (CApply (CSymbol ("Distribution","getLoadPathForFile")) (CApply (CSymbol ("FlatCurry","flatCurryIntName")) (CVar (0,"modname")))),CSExpr (CApply (CApply (CApply (CSymbol ("FlatCurryRead","readFlatCurryFileWithImports")) (CVar (1,"loadpath"))) (CApply (CSymbol ("FileGoodies","baseName")) (CVar (0,"modname")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]")))))])] []]),
  CFunc ("FlatCurryRead","readFlatCurryIntWithImportsInPath") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("FlatCurry","Prog") []]]))) (CRules CFlex [CRule [CPVar (0,"loadpath"),CPVar (1,"modname")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurryRead","readFlatCurryFileWithImports")) (CVar (0,"loadpath"))) (CVar (1,"modname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryRead","readFlatCurryWithImports") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("FlatCurry","Prog") []]])) (CRules CFlex [CRule [CPVar (0,"modname")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"loadpath")) (CApply (CSymbol ("Distribution","getLoadPathForFile")) (CApply (CSymbol ("FlatCurry","flatCurryFileName")) (CVar (0,"modname")))),CSExpr (CApply (CApply (CApply (CSymbol ("FlatCurryRead","readFlatCurryFileWithImports")) (CVar (1,"loadpath"))) (CApply (CSymbol ("FileGoodies","baseName")) (CVar (0,"modname")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]"))))])] []]),
  CFunc ("FlatCurryRead","readFlatCurryWithImportsInPath") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("FlatCurry","Prog") []]]))) (CRules CFlex [CRule [CPVar (0,"loadpath"),CPVar (1,"modname")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurryRead","readFlatCurryFileWithImports")) (CVar (0,"loadpath"))) (CVar (1,"modname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatCurryRead","tryReadFlatCurryFileWithImports") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("FlatCurry","Prog") []]]])))) (CRules CFlex [CRule [CPVar (0,"loadpath"),CPVar (1,"modname"),CPVar (2,"suffixes")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurryRead","collectMods")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"modname"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))] [CLocalFunc (CFunc ("FlatCurryRead","collectMods") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (3,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CSymbol ("Prelude","putStrLn")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Prelude",":") [CPVar (4,"mod"),CPVar (5,"mods")],CPVar (6,"implist")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (4,"mod"))) (CVar (6,"implist")))) (CApply (CApply (CSymbol ("FlatCurryRead","collectMods")) (CVar (5,"mods"))) (CVar (6,"implist")))) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CApply (CSymbol ("FlatCurryRead","readFlatCurryIfPossible")) (CVar (0,"loadpath"))) (CVar (4,"mod"))) (CVar (2,"suffixes")))) (CLambda [CPVar (7,"mbprog")] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))) (CLambda [CPVar (8,"prog")] (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CSymbol ("FlatCurryRead","collectMods")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"mods"))) (CApply (CSymbol ("FlatCurryRead","importsOf")) (CVar (8,"prog"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"mod"))) (CVar (6,"implist"))))) (CLambda [CPVar (9,"mbresults")] (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","Nothing"))) (CLambda [CPVar (10,"results")] (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"prog"))) (CVar (10,"results")))))) (CVar (9,"mbresults")))))))) (CVar (7,"mbprog"))))))] []]))]])]
 []
