Prog "Meta" ["Prelude"] [Type ("Meta","RichSearchTree") Public [0] [Cons ("Meta","RichFail") 1 Public [TCons ("Meta","Exception") []],Cons ("Meta","RichValue") 1 Public [TVar 0],Cons ("Meta","RichChoice") 2 Public [TCons ("Meta","OrRef") [],TCons ("Prelude","[]") [TCons ("Meta","RichSearchTree") [TVar 0]]],Cons ("Meta","RichSuspend") 0 Public []],Type ("Meta","Exception") Public [] [Cons ("Meta","ErrorCall") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Meta","PatternMatchFail") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Meta","AssertionFailed") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Meta","IOException") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Meta","PreludeFailed") 0 Public []],Type ("Meta","OrRef") Public [] [],Type ("Meta","Seq") Private [0] [Cons ("Meta","Nil") 0 Private [],Cons ("Meta","Cons") 2 Private [TVar 0,TCons ("Meta","Seq") [TVar 0]],Cons ("Meta","Continued") 1 Private [TCons ("Meta","Seq") [TVar 0]]]] [Func ("Meta","isFree") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 0,TVar 0]])) (Rule [1] (Comb FuncCall ("Meta","headNormalFormIO") [Comb (FuncPartCall 1) ("Meta","prim_isFree") [],Var 1])),Func ("Meta","prim_isFree") 1 Private (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 0,TVar 0]])) (External "Meta.prim_isFree"),Func ("Meta","headNormalFormIO") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1]))) (External "Meta.headNormalFormIO"),Func ("Meta","searchTree") 1 Public (FuncType (TVar 0) (TCons ("Prelude","SearchTree") [TVar 0])) (External "Meta.searchTree"),Func ("Meta","gnfIO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (External "Meta.gnfIO"),Func ("Meta","ghnfIO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (External "Meta.ghnfIO"),Func ("Meta","nfIO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (External "Meta.nfIO"),Func ("Meta","hnfIO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (External "Meta.hnfIO"),Func ("Meta","getRichSearchTree") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Meta","RichSearchTree") [TVar 0]])) (External "Meta.getRichSearchTree"),Func ("Meta","richSearchTree") 1 Public (FuncType (TVar 0) (TCons ("Meta","RichSearchTree") [TVar 0])) (External "Meta.richSearchTree"),Func ("Meta","parallelSearch") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (External "Meta.parallelSearch"),Func ("Meta","cover") 1 Public (FuncType (TVar 0) (TVar 0)) (External "Meta.cover"),Func ("Meta","st") 1 Public (FuncType (TVar 0) (TCons ("Prelude","SearchTree") [TVar 0])) (External "Meta.st"),Func ("Meta","richST") 1 Public (FuncType (TVar 0) (TCons ("Meta","RichSearchTree") [TVar 0])) (External "Meta.richST"),Func ("Meta","ors") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (External "Meta.ors"),Func ("Meta","throw") 1 Public (FuncType (TCons ("Meta","Exception") []) (TVar 0)) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Meta","prim_throw") [],Var 1])),Func ("Meta","prim_throw") 1 Private (FuncType (TCons ("Meta","Exception") []) (TVar 0)) (External "Meta.prim_throw"),Func ("Meta","list") 1 Private (FuncType (TCons ("Meta","Seq") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Meta","Nil") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Meta","Cons") [2,3]) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("Meta","list") [Var 3]]),Branch (Pattern ("Meta","Continued") [4]) (Comb FuncCall ("Meta","list") [Var 4])])),Func ("Meta","interleave") 2 Private (FuncType (TCons ("Meta","Seq") [TVar 0]) (FuncType (TCons ("Meta","Seq") [TVar 0]) (TCons ("Meta","Seq") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Meta","Nil") []) (Comb ConsCall ("Meta","Continued") [Var 2]),Branch (Pattern ("Meta","Cons") [3,4]) (Comb ConsCall ("Meta","Cons") [Var 3,Comb FuncCall ("Meta","interleave") [Var 2,Var 4]]),Branch (Pattern ("Meta","Continued") [5]) (Case  Flex (Var 2) [Branch (Pattern ("Meta","Nil") []) (Var 1),Branch (Pattern ("Meta","Cons") [6,7]) (Comb ConsCall ("Meta","Cons") [Var 6,Comb FuncCall ("Meta","interleave") [Var 5,Var 7]]),Branch (Pattern ("Meta","Continued") [8]) (Comb ConsCall ("Meta","Continued") [Comb FuncCall ("Meta","interleave") [Var 5,Var 8]])])])),Func ("Meta","seq") 1 Private (FuncType (TCons ("Prelude","SearchTree") [TVar 0]) (TCons ("Meta","Seq") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","Fail") []) (Comb ConsCall ("Meta","Nil") []),Branch (Pattern ("Prelude","Value") [2]) (Comb ConsCall ("Meta","Cons") [Var 2,Comb ConsCall ("Meta","Nil") []]),Branch (Pattern ("Prelude","Choice") [3]) (Comb FuncCall ("Prelude","foldr1") [Comb (FuncPartCall 2) ("Meta","interleave") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Meta","Nil") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Meta","seq") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Meta","isValOrChoice") [],Var 3]]]]),Branch (Pattern ("Prelude","Suspend") []) (Comb ConsCall ("Meta","Nil") [])])),Func ("Meta","isValOrChoice") 1 Private (FuncType (TCons ("Prelude","SearchTree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","Fail") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Value") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Choice") [3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Suspend") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Meta","allValuesI") 0 Public (FuncType (TCons ("Prelude","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Meta","list") [],Comb (FuncPartCall 1) ("Meta","seq") []]))] []