Prog "FlatCurry" ["Directory","Distribution","FileGoodies","Prelude","ReadShowTerm"] [TypeSyn ("FlatCurry","QName") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),TypeSyn ("FlatCurry","TVarIndex") Public [] (TCons ("Prelude","Int") []),TypeSyn ("FlatCurry","VarIndex") Public [] (TCons ("Prelude","Int") []),Type ("FlatCurry","Prog") Public [] [Cons ("FlatCurry","Prog") 5 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]],Type ("FlatCurry","Visibility") Public [] [Cons ("FlatCurry","Public") 0 Public [],Cons ("FlatCurry","Private") 0 Public []],Type ("FlatCurry","TypeDecl") Public [] [Cons ("FlatCurry","Type") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","Visibility") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]],Cons ("FlatCurry","TypeSyn") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","Visibility") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","TypeExpr") []]],Type ("FlatCurry","ConsDecl") Public [] [Cons ("FlatCurry","Cons") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") [],TCons ("FlatCurry","Visibility") [],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]]],Type ("FlatCurry","TypeExpr") Public [] [Cons ("FlatCurry","TVar") 1 Public [TCons ("Prelude","Int") []],Cons ("FlatCurry","FuncType") 2 Public [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []],Cons ("FlatCurry","TCons") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]]],Type ("FlatCurry","OpDecl") Public [] [Cons ("FlatCurry","Op") 3 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","Fixity") [],TCons ("Prelude","Int") []]],Type ("FlatCurry","Fixity") Public [] [Cons ("FlatCurry","InfixOp") 0 Public [],Cons ("FlatCurry","InfixlOp") 0 Public [],Cons ("FlatCurry","InfixrOp") 0 Public []],Type ("FlatCurry","FuncDecl") Public [] [Cons ("FlatCurry","Func") 5 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") [],TCons ("FlatCurry","Visibility") [],TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","Rule") []]],Type ("FlatCurry","Rule") Public [] [Cons ("FlatCurry","Rule") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []],Cons ("FlatCurry","External") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("FlatCurry","CaseType") Public [] [Cons ("FlatCurry","Rigid") 0 Public [],Cons ("FlatCurry","Flex") 0 Public []],Type ("FlatCurry","CombType") Public [] [Cons ("FlatCurry","FuncCall") 0 Public [],Cons ("FlatCurry","ConsCall") 0 Public [],Cons ("FlatCurry","FuncPartCall") 1 Public [TCons ("Prelude","Int") []],Cons ("FlatCurry","ConsPartCall") 1 Public [TCons ("Prelude","Int") []]],Type ("FlatCurry","Expr") Public [] [Cons ("FlatCurry","Var") 1 Public [TCons ("Prelude","Int") []],Cons ("FlatCurry","Lit") 1 Public [TCons ("FlatCurry","Literal") []],Cons ("FlatCurry","Comb") 3 Public [TCons ("FlatCurry","CombType") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]],Cons ("FlatCurry","Let") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []],Cons ("FlatCurry","Free") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []],Cons ("FlatCurry","Or") 2 Public [TCons ("FlatCurry","Expr") [],TCons ("FlatCurry","Expr") []],Cons ("FlatCurry","Case") 3 Public [TCons ("FlatCurry","CaseType") [],TCons ("FlatCurry","Expr") [],TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]]],Type ("FlatCurry","BranchExpr") Public [] [Cons ("FlatCurry","Branch") 2 Public [TCons ("FlatCurry","Pattern") [],TCons ("FlatCurry","Expr") []]],Type ("FlatCurry","Pattern") Public [] [Cons ("FlatCurry","Pattern") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]],Cons ("FlatCurry","LPattern") 1 Public [TCons ("FlatCurry","Literal") []]],Type ("FlatCurry","Literal") Public [] [Cons ("FlatCurry","Intc") 1 Public [TCons ("Prelude","Int") []],Cons ("FlatCurry","Floatc") 1 Public [TCons ("Prelude","Float") []],Cons ("FlatCurry","Charc") 1 Public [TCons ("Prelude","Char") []]]] [Func ("FlatCurry","readFlatCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [] (Var 0)),Func ("FlatCurry","readFlatCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [] (Var 0)),Func ("FlatCurry","flatCurryFileName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("FlatCurry","flatCurryIntName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("FlatCurry","readFlatCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [] (Var 0)),Func ("FlatCurry","readFlatCurryInt") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [] (Var 0)),Func ("FlatCurry","writeFCY") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("FlatCurry","showQNameInModule") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0))] []