CurryProg "CurrySyntax"
 ["Prelude","Directory","ReadShowTerm","Distribution","FileGoodies"]
 [CTypeSyn ("CurrySyntax","Pos") Public [] (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]),
  CType ("CurrySyntax","Position") Public [] [CCons ("CurrySyntax","Position") 3 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]],
  CType ("CurrySyntax","Ident") Public [] [CCons ("CurrySyntax","Ident") 2 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","Int") []]],
  CType ("CurrySyntax","QualIdent") Public [] [CCons ("CurrySyntax","UnqualIdent") 1 Public [CTCons ("CurrySyntax","Ident") []],CCons ("CurrySyntax","QualIdent") 2 Public [CTCons ("CurrySyntax","ModuleIdent") [],CTCons ("CurrySyntax","Ident") []]],
  CTypeSyn ("CurrySyntax","ModuleIdent") Public [] (CTCons ("Prelude","String") []),
  CType ("CurrySyntax","Module") Public [(0,"a")] [CCons ("CurrySyntax","Module") 3 Public [CTCons ("CurrySyntax","ModuleIdent") [],CTCons ("Prelude","Maybe") [CTCons ("CurrySyntax","ExportSpec") [CTVar (0,"a")]],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Decl") [CTVar (0,"a")]]]],
  CType ("CurrySyntax","ExportSpec") Public [(0,"a")] [CCons ("CurrySyntax","Exporting") 2 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Export") []]]],
  CType ("CurrySyntax","Export") Public [] [CCons ("CurrySyntax","Export") 1 Public [CTCons ("CurrySyntax","QualIdent") []],CCons ("CurrySyntax","ExportTypeWith") 2 Public [CTCons ("CurrySyntax","QualIdent") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []]],CCons ("CurrySyntax","ExportTypeAll") 1 Public [CTCons ("CurrySyntax","QualIdent") []],CCons ("CurrySyntax","ExportModule") 1 Public [CTCons ("CurrySyntax","ModuleIdent") []]],
  CType ("CurrySyntax","ImportSpec") Public [(0,"a")] [CCons ("CurrySyntax","Importing") 2 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Import") []]],CCons ("CurrySyntax","Hiding") 2 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Import") []]]],
  CType ("CurrySyntax","Import") Public [] [CCons ("CurrySyntax","Import") 1 Public [CTCons ("CurrySyntax","Ident") []],CCons ("CurrySyntax","ImportTypeWith") 2 Public [CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []]],CCons ("CurrySyntax","ImportTypeAll") 1 Public [CTCons ("CurrySyntax","Ident") []]],
  CType ("CurrySyntax","Decl") Public [(0,"a")] [CCons ("CurrySyntax","ImportDecl") 5 Public [CTVar (0,"a"),CTCons ("CurrySyntax","ModuleIdent") [],CTCons ("Prelude","Bool") [],CTCons ("Prelude","Maybe") [CTCons ("CurrySyntax","ModuleIdent") []],CTCons ("Prelude","Maybe") [CTCons ("CurrySyntax","ImportSpec") [CTVar (0,"a")]]],CCons ("CurrySyntax","InfixDecl") 4 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Infix") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []]],CCons ("CurrySyntax","DataDecl") 4 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrDecl") [CTVar (0,"a")]]],CCons ("CurrySyntax","NewtypeDecl") 4 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","NewConstrDecl") [CTVar (0,"a")]],CCons ("CurrySyntax","TypeDecl") 4 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","TypeExpr") []],CCons ("CurrySyntax","TypeSig") 3 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","TypeExpr") []],CCons ("CurrySyntax","EvalAnnot") 3 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","EvalAnnotation") []],CCons ("CurrySyntax","FunctionDecl") 3 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Equation") [CTVar (0,"a")]]],CCons ("CurrySyntax","ExternalDecl") 5 Public [CTVar (0,"a"),CTCons ("CurrySyntax","CallConv") [],CTCons ("Prelude","Maybe") [CTCons ("Prelude","String") []],CTCons ("CurrySyntax","Ident") [],CTCons ("CurrySyntax","TypeExpr") []],CCons ("CurrySyntax","FlatExternalDecl") 2 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []]],CCons ("CurrySyntax","PatternDecl") 3 Public [CTVar (0,"a"),CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")],CTCons ("CurrySyntax","Rhs") [CTVar (0,"a")]],CCons ("CurrySyntax","ExtraVariables") 2 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []]]],
  CType ("CurrySyntax","ConstrDecl") Public [(0,"a")] [CCons ("CurrySyntax","ConstrDecl") 4 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","TypeExpr") []]],CCons ("CurrySyntax","ConOpDecl") 5 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","TypeExpr") [],CTCons ("CurrySyntax","Ident") [],CTCons ("CurrySyntax","TypeExpr") []]],
  CType ("CurrySyntax","NewConstrDecl") Public [(0,"a")] [CCons ("CurrySyntax","NewConstrDecl") 4 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","Ident") [],CTCons ("CurrySyntax","TypeExpr") []]],
  CType ("CurrySyntax","Infix") Public [] [CCons ("CurrySyntax","InfixL") 0 Public [],CCons ("CurrySyntax","InfixR") 0 Public [],CCons ("CurrySyntax","Infix") 0 Public []],
  CType ("CurrySyntax","EvalAnnotation") Public [] [CCons ("CurrySyntax","EvalRigid") 0 Public [],CCons ("CurrySyntax","EvalChoice") 0 Public []],
  CType ("CurrySyntax","CallConv") Public [] [CCons ("CurrySyntax","CallConvPrimitive") 0 Public [],CCons ("CurrySyntax","CallConvCCall") 0 Public []],
  CType ("CurrySyntax","TypeExpr") Public [] [CCons ("CurrySyntax","ConstructorType") 2 Public [CTCons ("CurrySyntax","QualIdent") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","TypeExpr") []]],CCons ("CurrySyntax","VariableType") 1 Public [CTCons ("CurrySyntax","Ident") []],CCons ("CurrySyntax","TupleType") 1 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","TypeExpr") []]],CCons ("CurrySyntax","ListType") 1 Public [CTCons ("CurrySyntax","TypeExpr") []],CCons ("CurrySyntax","ArrowType") 2 Public [CTCons ("CurrySyntax","TypeExpr") [],CTCons ("CurrySyntax","TypeExpr") []],CCons ("CurrySyntax","RecordType") 2 Public [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Ident") []],CTCons ("CurrySyntax","TypeExpr") []]],CTCons ("Prelude","Maybe") [CTCons ("CurrySyntax","TypeExpr") []]]],
  CType ("CurrySyntax","Equation") Public [(0,"a")] [CCons ("CurrySyntax","Equation") 3 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Lhs") [CTVar (0,"a")],CTCons ("CurrySyntax","Rhs") [CTVar (0,"a")]]],
  CType ("CurrySyntax","Lhs") Public [(0,"a")] [CCons ("CurrySyntax","FunLhs") 2 Public [CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]],CCons ("CurrySyntax","OpLhs") 3 Public [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")],CTCons ("CurrySyntax","Ident") [],CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]],CCons ("CurrySyntax","ApLhs") 2 Public [CTCons ("CurrySyntax","Lhs") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]]],
  CType ("CurrySyntax","Rhs") Public [(0,"a")] [CCons ("CurrySyntax","SimpleRhs") 3 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Decl") [CTVar (0,"a")]]],CCons ("CurrySyntax","GuardedRhs") 2 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","CondExpr") [CTVar (0,"a")]],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Decl") [CTVar (0,"a")]]]],
  CType ("CurrySyntax","CondExpr") Public [(0,"a")] [CCons ("CurrySyntax","CondExpr") 3 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]]],
  CType ("CurrySyntax","Literal") Public [] [CCons ("CurrySyntax","Char") 1 Public [CTCons ("Prelude","Char") []],CCons ("CurrySyntax","Int") 2 Public [CTCons ("CurrySyntax","Ident") [],CTCons ("Prelude","Int") []],CCons ("CurrySyntax","Float") 1 Public [CTCons ("Prelude","Float") []],CCons ("CurrySyntax","String") 1 Public [CTCons ("Prelude","String") []]],
  CType ("CurrySyntax","ConstrTerm") Public [(0,"a")] [CCons ("CurrySyntax","LiteralPattern") 1 Public [CTCons ("CurrySyntax","Literal") []],CCons ("CurrySyntax","NegativePattern") 2 Public [CTCons ("CurrySyntax","Ident") [],CTCons ("CurrySyntax","Literal") []],CCons ("CurrySyntax","VariablePattern") 1 Public [CTCons ("CurrySyntax","Ident") []],CCons ("CurrySyntax","ConstructorPattern") 2 Public [CTCons ("CurrySyntax","QualIdent") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]],CCons ("CurrySyntax","InfixPattern") 3 Public [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")],CTCons ("CurrySyntax","QualIdent") [],CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]],CCons ("CurrySyntax","ParenPattern") 1 Public [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]],CCons ("CurrySyntax","TuplePattern") 1 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]],CCons ("CurrySyntax","ListPattern") 1 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]],CCons ("CurrySyntax","AsPattern") 2 Public [CTCons ("CurrySyntax","Ident") [],CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]],CCons ("CurrySyntax","LazyPattern") 1 Public [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]],CCons ("CurrySyntax","FunctionPattern") 2 Public [CTCons ("CurrySyntax","QualIdent") [],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]],CCons ("CurrySyntax","InfixFuncPattern") 3 Public [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")],CTCons ("CurrySyntax","QualIdent") [],CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]],CCons ("CurrySyntax","RecordPattern") 2 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Field") [CTVar (0,"a"),CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]],CTCons ("Prelude","Maybe") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]]]],
  CType ("CurrySyntax","Expression") Public [(0,"a")] [CCons ("CurrySyntax","Literal") 1 Public [CTCons ("CurrySyntax","Literal") []],CCons ("CurrySyntax","Variable") 1 Public [CTCons ("CurrySyntax","QualIdent") []],CCons ("CurrySyntax","Constructor") 1 Public [CTCons ("CurrySyntax","QualIdent") []],CCons ("CurrySyntax","Paren") 1 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","Typed") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","TypeExpr") []],CCons ("CurrySyntax","Tuple") 1 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]]],CCons ("CurrySyntax","List") 1 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]]],CCons ("CurrySyntax","ListCompr") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Statement") [CTVar (0,"a")]]],CCons ("CurrySyntax","EnumFrom") 1 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","EnumFromThen") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","EnumFromTo") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","EnumFromThenTo") 3 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","UnaryMinus") 2 Public [CTCons ("CurrySyntax","Ident") [],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","Apply") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","InfixApply") 3 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","InfixOp") [],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","LeftSection") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","InfixOp") []],CCons ("CurrySyntax","RightSection") 2 Public [CTCons ("CurrySyntax","InfixOp") [],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","Lambda") 2 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")]],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","Let") 2 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Decl") [CTVar (0,"a")]],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","Do") 2 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Statement") [CTVar (0,"a")]],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","IfThenElse") 3 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","Case") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Alt") [CTVar (0,"a")]]],CCons ("CurrySyntax","RecordConstr") 1 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Field") [CTVar (0,"a"),CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]]]],CCons ("CurrySyntax","RecordSelection") 2 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")],CTCons ("CurrySyntax","Ident") []],CCons ("CurrySyntax","RecordUpdate") 2 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Field") [CTVar (0,"a"),CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]]],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]]],
  CType ("CurrySyntax","InfixOp") Public [] [CCons ("CurrySyntax","InfixOp") 1 Public [CTCons ("CurrySyntax","QualIdent") []],CCons ("CurrySyntax","InfixConstr") 1 Public [CTCons ("CurrySyntax","QualIdent") []]],
  CType ("CurrySyntax","Statement") Public [(0,"a")] [CCons ("CurrySyntax","StmtExpr") 1 Public [CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]],CCons ("CurrySyntax","StmtDecl") 1 Public [CTCons ("Prelude","[]") [CTCons ("CurrySyntax","Decl") [CTVar (0,"a")]]],CCons ("CurrySyntax","StmtBind") 2 Public [CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")],CTCons ("CurrySyntax","Expression") [CTVar (0,"a")]]],
  CType ("CurrySyntax","Alt") Public [(0,"a")] [CCons ("CurrySyntax","Alt") 3 Public [CTVar (0,"a"),CTCons ("CurrySyntax","ConstrTerm") [CTVar (0,"a")],CTCons ("CurrySyntax","Rhs") [CTVar (0,"a")]]],
  CType ("CurrySyntax","Field") Public [(0,"a"),(1,"b")] [CCons ("CurrySyntax","Field") 3 Public [CTVar (0,"a"),CTCons ("CurrySyntax","Ident") [],CTVar (1,"b")]]]
 [CFunc ("CurrySyntax","absoluteFileName") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","String") []]])) (CRules CFlex [CRule [CPVar (0,"name")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"name"))) (CApply (CSymbol ("FileGoodies","baseName")) (CVar (0,"name"))),CApply (CSymbol ("Distribution","lookupFileInLoadPath")) (CVar (0,"name"))),(CSymbol ("Prelude","otherwise"),CDoExpr [CSPat (CPVar (1,"exists")) (CApply (CSymbol ("Directory","doesFileExist")) (CVar (0,"name"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (1,"exists"))) (CApply (CSymbol ("Prelude","Just")) (CVar (0,"name")))) (CSymbol ("Prelude","Nothing"))))])] []]),
  CFunc ("CurrySyntax","orElseDo") 2 Private (CFuncType (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]]) (CFuncType (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"ioma"),CPVar (1,"ioa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CVar (0,"ioma"))) (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (1,"ioa"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Just")))))] []]),
  CFunc ("CurrySyntax","readCurry") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("CurrySyntax","Module") [CTCons ("CurrySyntax","Pos") []]])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurrySyntax","readCurryWithParseOptions")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("Distribution","setQuiet")) (CSymbol ("Prelude","True"))) (CSymbol ("Distribution","defaultParams"))))] []]),
  CFunc ("CurrySyntax","readCurryFile") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("CurrySyntax","Module") [CTCons ("CurrySyntax","Pos") []]])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"filename")) (CApply (CSymbol ("CurrySyntax","absoluteFileName")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","error"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CSymbol ("CurrySyntax","read"))) (CVar (2,"filename")))])] [CLocalPat (CPVar (1,"progname")) (CApply (CSymbol ("CurrySyntax","stripSuffix")) (CVar (0,"name"))) [],CLocalFunc (CFunc ("CurrySyntax","read") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (2,"filename")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"filecontents")) (CApply (CSymbol ("Prelude","readFile")) (CVar (2,"filename"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("ReadShowTerm","readUnqualifiedTerm")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]"))))) (CVar (3,"filecontents"))))])] []]))]]),
  CFunc ("CurrySyntax","readCurryWithParseOptions") 2 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Distribution","FrontendParams") []) (CTCons ("Prelude","IO") [CTCons ("CurrySyntax","Module") [CTCons ("CurrySyntax","Pos") []]]))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"options")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("CurrySyntax","orElseDo")) (CApply (CSymbol ("CurrySyntax","parseCurry")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("CurrySyntax","parseCurry")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))),CSExpr (CApply (CSymbol ("CurrySyntax","readCurryFile")) (CVar (2,"progname")))])] [CLocalPat (CPVar (2,"progname")) (CApply (CSymbol ("CurrySyntax","stripSuffix")) (CVar (0,"name"))) [],CLocalFunc (CFunc ("CurrySyntax","parseCurry") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (3,"suffix")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("CurrySyntax","absoluteFileName")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"progname"))) (CVar (3,"suffix"))))) (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))) (CSymbol ("CurrySyntax","parse"))))] []])),CLocalFunc (CFunc ("CurrySyntax","parse") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (3,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CApply (CApply (CSymbol ("Distribution","callFrontendWithParams")) (CSymbol ("Distribution","CY"))) (CVar (1,"options"))) (CVar (2,"progname")))) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","()")))))] []]))]]),
  CFunc ("CurrySyntax","stripSuffix") 0 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","takeWhile")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (0,"x0"))) (CLit (CCharc '.')))))] []]),
  CFunc ("CurrySyntax","writeCurryFile") 2 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("CurrySyntax","Module") [CTCons ("CurrySyntax","Pos") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"file"),CPVar (1,"m")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","writeFile")) (CVar (0,"file"))) (CApply (CSymbol ("ReadShowTerm","showTerm")) (CVar (1,"m"))))] []]),
  CFunc ("CurrySyntax","writeCurryModule") 1 Public (CFuncType (CTCons ("CurrySyntax","Module") [CTCons ("CurrySyntax","Pos") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPAs (3,"m") (CPComb ("CurrySyntax","Module") [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurrySyntax","writeCurryFile")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))) (CVar (3,"m")))] []])]
 []
