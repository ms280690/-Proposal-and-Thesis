CurryProg "AbstractCurry"
 ["Prelude","Directory","ReadShowTerm","Distribution","FileGoodies"]
 [CType ("AbstractCurry","CurryProg") Public [] [CCons ("AbstractCurry","CurryProg") 5 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("Prelude","String") []],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeDecl") []],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CFuncDecl") []],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","COpDecl") []]]],
  CTypeSyn ("AbstractCurry","QName") Public [] (CTCons ("Prelude","(,)") [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []]),
  CType ("AbstractCurry","CVisibility") Public [] [CCons ("AbstractCurry","Public") 0 Public [],CCons ("AbstractCurry","Private") 0 Public []],
  CTypeSyn ("AbstractCurry","CTVarIName") Public [] (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","String") []]),
  CType ("AbstractCurry","CTypeDecl") Public [] [CCons ("AbstractCurry","CType") 4 Public [CTCons ("AbstractCurry","QName") [],CTCons ("AbstractCurry","CVisibility") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTVarIName") []],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CConsDecl") []]],CCons ("AbstractCurry","CTypeSyn") 4 Public [CTCons ("AbstractCurry","QName") [],CTCons ("AbstractCurry","CVisibility") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTVarIName") []],CTCons ("AbstractCurry","CTypeExpr") []]],
  CType ("AbstractCurry","CConsDecl") Public [] [CCons ("AbstractCurry","CCons") 4 Public [CTCons ("AbstractCurry","QName") [],CTCons ("Prelude","Int") [],CTCons ("AbstractCurry","CVisibility") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeExpr") []]]],
  CType ("AbstractCurry","CTypeExpr") Public [] [CCons ("AbstractCurry","CTVar") 1 Public [CTCons ("AbstractCurry","CTVarIName") []],CCons ("AbstractCurry","CFuncType") 2 Public [CTCons ("AbstractCurry","CTypeExpr") [],CTCons ("AbstractCurry","CTypeExpr") []],CCons ("AbstractCurry","CTCons") 2 Public [CTCons ("AbstractCurry","QName") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeExpr") []]]],
  CType ("AbstractCurry","COpDecl") Public [] [CCons ("AbstractCurry","COp") 3 Public [CTCons ("AbstractCurry","QName") [],CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]],
  CType ("AbstractCurry","CFixity") Public [] [CCons ("AbstractCurry","CInfixOp") 0 Public [],CCons ("AbstractCurry","CInfixlOp") 0 Public [],CCons ("AbstractCurry","CInfixrOp") 0 Public []],
  CTypeSyn ("AbstractCurry","CVarIName") Public [] (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","String") []]),
  CType ("AbstractCurry","CFuncDecl") Public [] [CCons ("AbstractCurry","CFunc") 5 Public [CTCons ("AbstractCurry","QName") [],CTCons ("Prelude","Int") [],CTCons ("AbstractCurry","CVisibility") [],CTCons ("AbstractCurry","CTypeExpr") [],CTCons ("AbstractCurry","CRules") []],CCons ("AbstractCurry","CmtFunc") 6 Public [CTCons ("Prelude","String") [],CTCons ("AbstractCurry","QName") [],CTCons ("Prelude","Int") [],CTCons ("AbstractCurry","CVisibility") [],CTCons ("AbstractCurry","CTypeExpr") [],CTCons ("AbstractCurry","CRules") []]],
  CType ("AbstractCurry","CRules") Public [] [CCons ("AbstractCurry","CRules") 2 Public [CTCons ("AbstractCurry","CEvalAnnot") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CRule") []]],CCons ("AbstractCurry","CExternal") 1 Public [CTCons ("Prelude","String") []]],
  CType ("AbstractCurry","CEvalAnnot") Public [] [CCons ("AbstractCurry","CFlex") 0 Public [],CCons ("AbstractCurry","CRigid") 0 Public [],CCons ("AbstractCurry","CChoice") 0 Public []],
  CType ("AbstractCurry","CRule") Public [] [CCons ("AbstractCurry","CRule") 3 Public [CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CPattern") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CExpr") [],CTCons ("AbstractCurry","CExpr") []]],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CLocalDecl") []]]],
  CType ("AbstractCurry","CLocalDecl") Public [] [CCons ("AbstractCurry","CLocalFunc") 1 Public [CTCons ("AbstractCurry","CFuncDecl") []],CCons ("AbstractCurry","CLocalPat") 3 Public [CTCons ("AbstractCurry","CPattern") [],CTCons ("AbstractCurry","CExpr") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CLocalDecl") []]],CCons ("AbstractCurry","CLocalVar") 1 Public [CTCons ("AbstractCurry","CVarIName") []]],
  CType ("AbstractCurry","CExpr") Public [] [CCons ("AbstractCurry","CVar") 1 Public [CTCons ("AbstractCurry","CVarIName") []],CCons ("AbstractCurry","CLit") 1 Public [CTCons ("AbstractCurry","CLiteral") []],CCons ("AbstractCurry","CSymbol") 1 Public [CTCons ("AbstractCurry","QName") []],CCons ("AbstractCurry","CApply") 2 Public [CTCons ("AbstractCurry","CExpr") [],CTCons ("AbstractCurry","CExpr") []],CCons ("AbstractCurry","CLambda") 2 Public [CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CPattern") []],CTCons ("AbstractCurry","CExpr") []],CCons ("AbstractCurry","CLetDecl") 2 Public [CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CLocalDecl") []],CTCons ("AbstractCurry","CExpr") []],CCons ("AbstractCurry","CDoExpr") 1 Public [CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CStatement") []]],CCons ("AbstractCurry","CListComp") 2 Public [CTCons ("AbstractCurry","CExpr") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CStatement") []]],CCons ("AbstractCurry","CCase") 2 Public [CTCons ("AbstractCurry","CExpr") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CBranchExpr") []]]],
  CType ("AbstractCurry","CStatement") Public [] [CCons ("AbstractCurry","CSExpr") 1 Public [CTCons ("AbstractCurry","CExpr") []],CCons ("AbstractCurry","CSPat") 2 Public [CTCons ("AbstractCurry","CPattern") [],CTCons ("AbstractCurry","CExpr") []],CCons ("AbstractCurry","CSLet") 1 Public [CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CLocalDecl") []]]],
  CType ("AbstractCurry","CPattern") Public [] [CCons ("AbstractCurry","CPVar") 1 Public [CTCons ("AbstractCurry","CVarIName") []],CCons ("AbstractCurry","CPLit") 1 Public [CTCons ("AbstractCurry","CLiteral") []],CCons ("AbstractCurry","CPComb") 2 Public [CTCons ("AbstractCurry","QName") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CPattern") []]],CCons ("AbstractCurry","CPAs") 2 Public [CTCons ("AbstractCurry","CVarIName") [],CTCons ("AbstractCurry","CPattern") []],CCons ("AbstractCurry","CPFuncComb") 2 Public [CTCons ("AbstractCurry","QName") [],CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CPattern") []]]],
  CType ("AbstractCurry","CBranchExpr") Public [] [CCons ("AbstractCurry","CBranch") 2 Public [CTCons ("AbstractCurry","CPattern") [],CTCons ("AbstractCurry","CExpr") []]],
  CType ("AbstractCurry","CLiteral") Public [] [CCons ("AbstractCurry","CIntc") 1 Public [CTCons ("Prelude","Int") []],CCons ("AbstractCurry","CFloatc") 1 Public [CTCons ("Prelude","Float") []],CCons ("AbstractCurry","CCharc") 1 Public [CTCons ("Prelude","Char") []]]]
 [CFunc ("AbstractCurry","abstractCurryFileName") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"prog")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Distribution","inCurrySubdir")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FileGoodies","stripSuffix")) (CVar (0,"prog")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("AbstractCurry","readAbstractCurryFile") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("AbstractCurry","CurryProg") []])) (CRules CFlex [CRule [CPVar (0,"filename")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"exacy")) (CApply (CSymbol ("Directory","doesFileExist")) (CVar (0,"filename"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (1,"exacy"))) (CApply (CSymbol ("AbstractCurry","readExistingACY")) (CVar (0,"filename")))) (CDoExpr [CSLet [CLocalPat (CPVar (2,"subdirfilename")) (CApply (CSymbol ("Distribution","inCurrySubdir")) (CVar (0,"filename"))) []],CSPat (CPVar (3,"exdiracy")) (CApply (CSymbol ("Directory","doesFileExist")) (CVar (2,"subdirfilename"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (3,"exdiracy"))) (CApply (CSymbol ("AbstractCurry","readExistingACY")) (CVar (2,"subdirfilename")))) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'X'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"filename"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))]))])] [CLocalFunc (CFunc ("AbstractCurry","readExistingACY") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (1,"fname")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"filecontents")) (CApply (CSymbol ("Prelude","readFile")) (CVar (1,"fname"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("ReadShowTerm","readUnqualifiedTerm")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]"))))) (CVar (2,"filecontents"))))])] []]))]]),
  CFunc ("AbstractCurry","readCurry") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("AbstractCurry","CurryProg") []])) (CRules CFlex [CRule [CPVar (0,"prog")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurry","readCurryWithParseOptions")) (CVar (0,"prog"))) (CApply (CApply (CSymbol ("Distribution","setQuiet")) (CSymbol ("Prelude","True"))) (CSymbol ("Distribution","defaultParams"))))] []]),
  CFunc ("AbstractCurry","readCurryWithParseOptions") 2 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Distribution","FrontendParams") []) (CTCons ("Prelude","IO") [CTCons ("AbstractCurry","CurryProg") []]))) (CRules CFlex [CRule [CPVar (0,"progname"),CPVar (1,"options")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"existsCurry")) (CApply (CSymbol ("Directory","doesFileExist")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))),CSPat (CPVar (3,"existsLCurry")) (CApply (CSymbol ("Directory","doesFileExist")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CVar (2,"existsCurry"))) (CVar (3,"existsLCurry")))) (CApply (CApply (CApply (CSymbol ("Distribution","callFrontendWithParams")) (CSymbol ("Distribution","ACY"))) (CVar (1,"options"))) (CVar (0,"progname")))) (CSymbol ("Prelude","done"))),CSPat (CPVar (4,"filename")) (CApply (CSymbol ("Distribution","findFileInLoadPath")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))),CSExpr (CApply (CSymbol ("AbstractCurry","readAbstractCurryFile")) (CVar (4,"filename")))])] []]),
  CFunc ("AbstractCurry","readUntypedCurry") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("AbstractCurry","CurryProg") []])) (CRules CFlex [CRule [CPVar (0,"prog")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurry","readUntypedCurryWithParseOptions")) (CVar (0,"prog"))) (CApply (CApply (CSymbol ("Distribution","setQuiet")) (CSymbol ("Prelude","True"))) (CSymbol ("Distribution","defaultParams"))))] []]),
  CFunc ("AbstractCurry","readUntypedCurryWithParseOptions") 2 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Distribution","FrontendParams") []) (CTCons ("Prelude","IO") [CTCons ("AbstractCurry","CurryProg") []]))) (CRules CFlex [CRule [CPVar (0,"progname"),CPVar (1,"options")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"existsCurry")) (CApply (CSymbol ("Directory","doesFileExist")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))),CSPat (CPVar (3,"existsLCurry")) (CApply (CSymbol ("Directory","doesFileExist")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CVar (2,"existsCurry"))) (CVar (3,"existsLCurry")))) (CApply (CApply (CApply (CSymbol ("Distribution","callFrontendWithParams")) (CSymbol ("Distribution","UACY"))) (CVar (1,"options"))) (CVar (0,"progname")))) (CSymbol ("Prelude","done"))),CSPat (CPVar (4,"filename")) (CApply (CSymbol ("Distribution","findFileInLoadPath")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"progname"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))),CSExpr (CApply (CSymbol ("AbstractCurry","readAbstractCurryFile")) (CVar (4,"filename")))])] []]),
  CFunc ("AbstractCurry","untypedAbstractCurryFileName") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"prog")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Distribution","inCurrySubdir")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FileGoodies","stripSuffix")) (CVar (0,"prog")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("AbstractCurry","writeAbstractCurryFile") 2 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"file"),CPVar (1,"prog")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","writeFile")) (CVar (0,"file"))) (CApply (CSymbol ("ReadShowTerm","showTerm")) (CVar (1,"prog"))))] []])]
 []
