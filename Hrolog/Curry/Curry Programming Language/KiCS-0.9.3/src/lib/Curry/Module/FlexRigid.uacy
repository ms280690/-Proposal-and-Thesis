CurryProg "FlexRigid"
 ["Prelude","FlatCurry"]
 [CType ("FlexRigid","FlexRigidResult") Public [] [CCons ("FlexRigid","UnknownFR") 0 Public [],CCons ("FlexRigid","ConflictFR") 0 Public [],CCons ("FlexRigid","KnownFlex") 0 Public [],CCons ("FlexRigid","KnownRigid") 0 Public []]]
 [CFunc ("FlexRigid","getFlexRigid") 1 Public (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("FlexRigid","FlexRigidResult") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Var") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","UnknownFR"))] [],CRule [CPComb ("FlatCurry","Lit") [CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","UnknownFR"))] [],CRule [CPComb ("FlatCurry","Comb") [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("FlexRigid","joinCaseTypes"))) (CSymbol ("FlexRigid","UnknownFR"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlexRigid","getFlexRigid"))) (CVar (4,"args"))))] [],CRule [CPComb ("FlatCurry","Let") [CPVar (5,"_"),CPVar (6,"e")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlexRigid","getFlexRigid")) (CVar (6,"e")))] [],CRule [CPComb ("FlatCurry","Free") [CPVar (7,"_"),CPVar (8,"e")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlexRigid","getFlexRigid")) (CVar (8,"e")))] [],CRule [CPComb ("FlatCurry","Or") [CPVar (9,"e1"),CPVar (10,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlexRigid","joinCaseTypes")) (CApply (CSymbol ("FlexRigid","getFlexRigid")) (CVar (9,"e1")))) (CApply (CSymbol ("FlexRigid","getFlexRigid")) (CVar (10,"e2"))))] [],CRule [CPComb ("FlatCurry","Case") [CPVar (11,"ctype"),CPVar (12,"e"),CPVar (13,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("FlexRigid","joinCaseTypes"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (11,"ctype"))) (CSymbol ("FlatCurry","Flex")))) (CSymbol ("FlexRigid","KnownFlex"))) (CSymbol ("FlexRigid","KnownRigid")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlexRigid","getFlexRigid"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"e"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("FlatCurry","Branch") [CPVar (14,"_"),CPVar (15,"be")]] (CVar (15,"be")))) (CVar (13,"bs"))))))] []]),
  CFunc ("FlexRigid","joinCaseTypes") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("FlexRigid","ConflictFR") [],CPComb ("FlexRigid","ConflictFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","ConflictFR") [],CPComb ("FlexRigid","UnknownFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","ConflictFR") [],CPComb ("FlexRigid","KnownFlex") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","ConflictFR") [],CPComb ("FlexRigid","KnownRigid") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","UnknownFR") [],CPComb ("FlexRigid","ConflictFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","KnownFlex") [],CPComb ("FlexRigid","ConflictFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","KnownRigid") [],CPComb ("FlexRigid","ConflictFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","UnknownFR") [],CPComb ("FlexRigid","UnknownFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","UnknownFR"))] [],CRule [CPComb ("FlexRigid","UnknownFR") [],CPComb ("FlexRigid","KnownFlex") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","KnownFlex"))] [],CRule [CPComb ("FlexRigid","UnknownFR") [],CPComb ("FlexRigid","KnownRigid") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","KnownRigid"))] [],CRule [CPComb ("FlexRigid","KnownFlex") [],CPComb ("FlexRigid","UnknownFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","KnownFlex"))] [],CRule [CPComb ("FlexRigid","KnownFlex") [],CPComb ("FlexRigid","KnownFlex") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","KnownFlex"))] [],CRule [CPComb ("FlexRigid","KnownFlex") [],CPComb ("FlexRigid","KnownRigid") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","KnownRigid") [],CPComb ("FlexRigid","UnknownFR") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","KnownRigid"))] [],CRule [CPComb ("FlexRigid","KnownRigid") [],CPComb ("FlexRigid","KnownFlex") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","ConflictFR"))] [],CRule [CPComb ("FlexRigid","KnownRigid") [],CPComb ("FlexRigid","KnownRigid") []] [(CSymbol ("Prelude","success"),CSymbol ("FlexRigid","KnownRigid"))] []])]
 []
