CurryProg "AbstractCurryPrinter"
 ["Prelude","AbstractCurry","List","Read","Char","FiniteMap","Sort","Maybe"]
 [CTypeSyn ("AbstractCurryPrinter","NameFM") Private [] (CTCons ("FiniteMap","FM") [CTCons ("Prelude","String") [],CTCons ("Prelude","()") []]),
  CTypeSyn ("AbstractCurryPrinter","Options") Private [] (CTCons ("Prelude","(,)") [CTCons ("AbstractCurryPrinter","NameFM") [],CTCons ("Prelude","String") []])]
 [CFunc ("AbstractCurryPrinter","addName") 2 Private (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CFuncType (CTCons ("AbstractCurryPrinter","NameFM") []) (CTCons ("AbstractCurryPrinter","NameFM") []))) (CRules CFlex [CRule [CPComb ("AbstractCurry","CFunc") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"n")],CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_")],CPVar (6,"fm")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FiniteMap","addToFM")) (CVar (6,"fm"))) (CVar (1,"n"))) (CSymbol ("Prelude","()")))] [],CRule [CPComb ("AbstractCurry","CmtFunc") [CPVar (7,"_"),CPComb ("Prelude","(,)") [CPVar (8,"_"),CPVar (9,"n")],CPVar (10,"_"),CPVar (11,"_"),CPVar (12,"_"),CPVar (13,"_")],CPVar (14,"fm")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FiniteMap","addToFM")) (CVar (14,"fm"))) (CVar (9,"n"))) (CSymbol ("Prelude","()")))] []]),
  CFunc ("AbstractCurryPrinter","applicationHead") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("AbstractCurry","CExpr") [])) (CRules CFlex [CRule [CPVar (0,"expr")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"expr")) [CBranch (CPComb ("AbstractCurry","CApply") [CPVar (1,"func"),CPVar (2,"_")]) (CApply (CSymbol ("AbstractCurryPrinter","applicationHead")) (CVar (1,"func"))),CBranch (CPVar (3,"_")) (CVar (0,"expr"))])] []]),
  CFunc ("AbstractCurryPrinter","combineMap") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","String") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") [],CPVar (1,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (2,"f"),CPComb ("Prelude",":") [CPVar (3,"x"),CPVar (4,"xs")],CPVar (5,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (2,"f")) (CVar (3,"x")))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CVar (2,"f"))) (CVar (4,"xs"))) (CVar (5,"s"))))] []]),
  CFunc ("AbstractCurryPrinter","defaultOptions") 0 Private (CTCons ("AbstractCurryPrinter","Options") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("FiniteMap","emptyFM")) (CSymbol ("AbstractCurryPrinter","lessString")))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("AbstractCurryPrinter","dropTags") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPLit (CCharc '"')) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("AbstractCurryPrinter","dropTags"))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","tail"))) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (2,"x0"))) (CLit (CCharc '"'))))) (CVar (1,"xs"))))),CBranch (CPLit (CCharc '>')) (CVar (1,"xs")),CBranch (CPVar (3,"_")) (CApply (CSymbol ("AbstractCurryPrinter","dropTags")) (CVar (1,"xs")))])] []]),
  CFunc ("AbstractCurryPrinter","funcComment") 0 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","unlines"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"x0")))))) (CSymbol ("Prelude","lines"))))] []]),
  CFunc ("AbstractCurryPrinter","infixIDs") 0 Private (CTCons ("Prelude","String") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '%'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '^'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))] []]),
  CFunc ("AbstractCurryPrinter","isAsPattern") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"p")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"p")) [CBranch (CPComb ("AbstractCurry","CPAs") [CPVar (1,"_"),CPVar (2,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","isAtom") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"expr")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"expr")) [CBranch (CPComb ("AbstractCurry","CVar") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPComb ("AbstractCurry","CLit") [CPVar (2,"_")]) (CSymbol ("Prelude","True")),CBranch (CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (3,"_"),CPVar (4,"name")]]) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","not"))) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CVar (4,"name")))),CBranch (CPVar (5,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","isCFuncType") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"t")) [CBranch (CPComb ("AbstractCurry","CFuncType") [CPVar (1,"_"),CPVar (2,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","isCharPattern") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"p")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"p")) [CBranch (CPComb ("AbstractCurry","CPLit") [CPComb ("AbstractCurry","CCharc") [CPVar (1,"_")]]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","isClosedList") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"expr")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"expr")) [CBranch (CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (1,"mod"),CPVar (2,"name")]],CPVar (3,"_")],CPVar (4,"tail")]) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("AbstractCurryPrinter","isClosedList")) (CVar (4,"tail"))))),CBranch (CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (5,"mod"),CPVar (6,"name")]]) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))),CBranch (CPVar (7,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","isClosedPatternList") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (0,"_"),CPComb ("Prelude",":") [CPVar (1,"xs"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","isClosedPatternList")) (CVar (1,"xs")))] [],CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPComb ("AbstractCurry","CPVar") [CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("AbstractCurry","CPAs") [CPVar (3,"_"),CPVar (4,"p")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","isClosedPatternList")) (CVar (4,"p")))] []]),
  CFunc ("AbstractCurryPrinter","isClosedStringPattern") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (0,"x"),CPComb ("Prelude",":") [CPVar (1,"xs"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AbstractCurryPrinter","isCharPattern")) (CVar (0,"x")))) (CApply (CSymbol ("AbstractCurryPrinter","isClosedStringPattern")) (CVar (1,"xs"))))] [],CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPComb ("AbstractCurry","CPVar") [CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] []]),
  CFunc ("AbstractCurryPrinter","isInfixOpName") 0 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"x0"))) (CSymbol ("AbstractCurryPrinter","infixIDs")))))] []]),
  CFunc ("AbstractCurryPrinter","isSimpleExpr") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"expr")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"expr")) [CBranch (CPComb ("AbstractCurry","CVar") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPComb ("AbstractCurry","CLit") [CPVar (2,"_")]) (CSymbol ("Prelude","True")),CBranch (CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (3,"_"),CPVar (4,"name")]]) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","not"))) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CVar (4,"name")))),CBranch (CPComb ("AbstractCurry","CApply") [CPVar (5,"f"),CPVar (6,"_")]) (CCase (CApply (CSymbol ("AbstractCurryPrinter","applicationHead")) (CVar (5,"f"))) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPVar (7,"name")]]) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("AbstractCurryPrinter","isTuple")) (CVar (7,"name")))))),CBranch (CPVar (8,"_")) (CSymbol ("Prelude","False"))]),CBranch (CPVar (9,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","isStringList") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (0,"mod"),CPVar (1,"name")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("AbstractCurry","CVar") [CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("AbstractCurry","CApply") [CPVar (3,"head"),CPVar (4,"tail")]] [(CSymbol ("Prelude","success"),CCase (CVar (3,"head")) [CBranch (CPComb ("AbstractCurry","CApply") [CPVar (5,"_"),CPComb ("AbstractCurry","CLit") [CPComb ("AbstractCurry","CCharc") [CPVar (6,"_")]]]) (CApply (CSymbol ("AbstractCurryPrinter","isStringList")) (CVar (4,"tail"))),CBranch (CPVar (7,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","isTuple") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x"))) (CLit (CCharc '(')))) (CApply (CSymbol ("AbstractCurryPrinter","p1_isTuple")) (CVar (1,"xs"))))] [CLocalFunc (CFunc ("AbstractCurryPrinter","p1_isTuple") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("Prelude",":") [CPVar (2,"z"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"z"))) (CLit (CCharc ')')))] [],CRule [CPComb ("Prelude",":") [CPVar (3,"z1"),CPComb ("Prelude",":") [CPVar (4,"z2"),CPVar (5,"zs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"z1"))) (CLit (CCharc ',')))) (CApply (CSymbol ("AbstractCurryPrinter","p1_isTuple")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"z2"))) (CVar (5,"zs")))))] []]))]]),
  CFunc ("AbstractCurryPrinter","isUntyped") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"typeexpr")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"typeexpr")) [CBranch (CPComb ("AbstractCurry","CTCons") [CPComb ("Prelude","(,)") [CPVar (1,"mod"),CPVar (2,"name")],CPComb ("Prelude","[]") []]) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))))))))),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AbstractCurryPrinter","lessString") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"s1"),CPVar (1,"s2")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("Prelude","LT"))) (CApply (CApply (CSymbol ("Sort","cmpString")) (CVar (0,"s1"))) (CVar (1,"s2"))))] []]),
  CFunc ("AbstractCurryPrinter","maybeShowBrackets") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"nested"),CPVar (1,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (0,"nested"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"s"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (0,"nested"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","nameFM") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CFuncDecl") []]) (CTCons ("AbstractCurryPrinter","NameFM") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("AbstractCurryPrinter","addName"))) (CApply (CSymbol ("FiniteMap","emptyFM")) (CSymbol ("AbstractCurryPrinter","lessString"))))] []]),
  CFunc ("AbstractCurryPrinter","prefixInter") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","String") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"xs"),CPVar (2,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","concat"))) (CApply (CApply (CSymbol ("List","intersperse")) (CVar (2,"s"))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))) (CVar (1,"xs")))))] []]),
  CFunc ("AbstractCurryPrinter","prefixMap") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","String") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"xs"),CPVar (2,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CSymbol ("Prelude","++")) (CVar (2,"s")))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))) (CVar (1,"xs"))))] []]),
  CFunc ("AbstractCurryPrinter","showApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"appl")] [(CSymbol ("Prelude","success"),CCase (CApply (CSymbol ("AbstractCurryPrinter","applicationHead")) (CVar (1,"appl"))) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPVar (2,"name")]) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSymbolApplication")) (CVar (0,"opts"))) (CVar (2,"name"))) (CVar (1,"appl"))),CBranch (CPVar (3,"_")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSimpleApplication")) (CVar (0,"opts"))) (CVar (1,"appl")))])] []]),
  CFunc ("AbstractCurryPrinter","showAsPatternList") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("AbstractCurry","CPAs") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"p")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("AbstractCurryPrinter","showPatListElems")) (CVar (2,"p")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("AbstractCurryPrinter","showBlock") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"text")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CSymbol ("Prelude","id"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CSymbol ("Prelude","/=")) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","lines")) (CVar (0,"text")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AbstractCurryPrinter","showBoxedExpr") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"expr")] [(CApply (CSymbol ("AbstractCurryPrinter","isSimpleExpr")) (CVar (1,"expr")),CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (1,"expr"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (1,"expr")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","showBranchExpr") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CBranchExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CBranch") [CPVar (1,"pattern"),CPVar (2,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CVar (1,"pattern")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (2,"expr")))))] []]),
  CFunc ("AbstractCurryPrinter","showCCharc") 1 Private (CFuncType (CTCons ("AbstractCurry","CLiteral") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CCharc") [CPVar (0,"c")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\n')),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\r')),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\\')),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CSymbol ("Prelude","[]")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '"')),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("AbstractCurryPrinter","showCharListApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPVar (1,"_"),CPComb ("AbstractCurry","CLit") [CPVar (2,"c")]],CPVar (3,"tail")]] [(CSymbol ("Prelude","success"),CCase (CVar (3,"tail")) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPVar (4,"_")]) (CApply (CSymbol ("AbstractCurryPrinter","showCCharc")) (CVar (2,"c"))),CBranch (CPVar (5,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showCCharc")) (CVar (2,"c")))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showCharListApplication")) (CVar (0,"opts"))) (CVar (3,"tail"))))])] []]),
  CFunc ("AbstractCurryPrinter","showCmtFunc") 3 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"cmt"),CPComb ("AbstractCurry","CFunc") [CPComb ("Prelude","(,)") [CPVar (2,"_"),CPVar (3,"name")],CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"typeexpr"),CPComb ("AbstractCurry","CRules") [CPVar (7,"evalannot"),CPVar (8,"rules")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","funcComment")) (CVar (1,"cmt")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"evalannot"))) (CSymbol ("AbstractCurry","CFlex")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (10,"bolName"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showEvalAnnot")) (CVar (7,"evalannot")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("AbstractCurryPrinter","isUntyped")) (CVar (6,"typeexpr")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (10,"bolName"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False"))) (CVar (6,"typeexpr")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (9,"funcIsInfixOp"))) (CVar (11,"rulePrints"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"name"))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixInter")) (CApply (CSymbol ("AbstractCurryPrinter","showRule")) (CVar (0,"opts")))) (CVar (8,"rules"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CVar (3,"name")))))))))] [CLocalPat (CPVar (9,"funcIsInfixOp")) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CVar (3,"name"))) [],CLocalPat (CPVar (10,"bolName")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (9,"funcIsInfixOp"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))) (CVar (3,"name"))) [],CLocalPat (CPVar (11,"rulePrints")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","concat"))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AbstractCurryPrinter","insertName"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","span")) (CLambda [CPVar (12,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (12,"x0"))) (CLit (CCharc ' ')))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","tail"))) (CApply (CSymbol ("AbstractCurryPrinter","showRule")) (CVar (0,"opts"))))))) (CVar (8,"rules"))))) [],CLocalFunc (CFunc ("AbstractCurryPrinter","insertName") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (13,"fstArg"),CPVar (14,"rest")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (13,"fstArg"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"name"))) (CVar (14,"rest")))))] []]))],CRule [CPVar (13,"_"),CPVar (14,"cmt"),CPComb ("AbstractCurry","CFunc") [CPComb ("Prelude","(,)") [CPVar (15,"_"),CPVar (16,"name")],CPVar (17,"_"),CPVar (18,"_"),CPVar (19,"typeexpr"),CPComb ("AbstractCurry","CExternal") [CPVar (20,"_")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","funcComment")) (CVar (14,"cmt")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (21,"bolName"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False"))) (CVar (19,"typeexpr")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (21,"bolName"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))))))))))))))] [CLocalPat (CPVar (21,"bolName")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CVar (16,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (16,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))) (CVar (16,"name"))) []]]),
  CFunc ("AbstractCurryPrinter","showConsDecl") 1 Private (CFuncType (CTCons ("AbstractCurry","CConsDecl") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CCons") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"typelist")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","True")))) (CVar (4,"typelist"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","showConsListApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPVar (1,"_"),CPVar (2,"head")],CPVar (3,"tail")]] [(CSymbol ("Prelude","success"),CCase (CVar (3,"tail")) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPVar (4,"_")]) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (2,"head"))),CBranch (CPVar (5,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (2,"head")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showConsListApplication")) (CVar (0,"opts"))) (CVar (3,"tail")))))])] []]),
  CFunc ("AbstractCurryPrinter","showCrhs") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CExpr") [],CTCons ("AbstractCurry","CExpr") []]) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("Prelude","(,)") [CPVar (1,"cond"),CPVar (2,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (1,"cond")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (2,"expr"))))))] []]),
  CFunc ("AbstractCurryPrinter","showCrhsList") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CExpr") [],CTCons ("AbstractCurry","CExpr") []]]) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"opts"),CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPVar (2,"g"),CPVar (3,"r")],CPVar (4,"cs")]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"cs"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"g"))) (CApply (CSymbol ("AbstractCurry","CSymbol")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (1,"opts"))) (CVar (3,"r")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CApply (CSymbol ("AbstractCurryPrinter","showCrhs")) (CVar (1,"opts")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"g"))) (CVar (3,"r")))) (CVar (4,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("AbstractCurryPrinter","showEvalAnnot") 1 Private (CFuncType (CTCons ("AbstractCurry","CEvalAnnot") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CFlex") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("AbstractCurry","CRigid") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPComb ("AbstractCurry","CChoice") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("AbstractCurryPrinter","showExports") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeDecl") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CFuncDecl") []]) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"types"),CPVar (1,"funcs")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (2,"publicTypes")) (CApply (CApply (CSymbol ("Prelude","filter")) (CSymbol ("AbstractCurryPrinter","isPublicType"))) (CVar (0,"types"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"withCons"),CPVar (4,"withoutCons")]) (CApply (CApply (CSymbol ("List","partition")) (CSymbol ("AbstractCurryPrinter","allPublicCons"))) (CVar (2,"publicTypes"))) []] (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("AbstractCurryPrinter","getTypeName")))) (CVar (3,"withCons")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbstractCurryPrinter","getTypeName"))) (CVar (4,"withoutCons")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbstractCurryPrinter","getFuncName"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CSymbol ("AbstractCurryPrinter","isPublicFunc"))) (CVar (1,"funcs")))))))))] [CLocalFunc (CFunc ("AbstractCurryPrinter","isPublicType") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CType") [CPVar (2,"_"),CPVar (3,"visibility"),CPVar (4,"_"),CPVar (5,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"visibility"))) (CSymbol ("AbstractCurry","Public")))] [],CRule [CPComb ("AbstractCurry","CTypeSyn") [CPVar (6,"_"),CPVar (7,"visibility"),CPVar (8,"_"),CPVar (9,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"visibility"))) (CSymbol ("AbstractCurry","Public")))] []])),CLocalFunc (CFunc ("AbstractCurryPrinter","isPublicFunc") 1 Private (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CFunc") [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"visibility"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"visibility"))) (CSymbol ("AbstractCurry","Public")))] [],CRule [CPComb ("AbstractCurry","CmtFunc") [CPVar (7,"_"),CPVar (8,"_"),CPVar (9,"_"),CPVar (10,"visibility"),CPVar (11,"_"),CPVar (12,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"visibility"))) (CSymbol ("AbstractCurry","Public")))] []])),CLocalFunc (CFunc ("AbstractCurryPrinter","getTypeName") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CType") [CPComb ("Prelude","(,)") [CPVar (2,"_"),CPVar (3,"name")],CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CVar (3,"name"))] [],CRule [CPComb ("AbstractCurry","CTypeSyn") [CPComb ("Prelude","(,)") [CPVar (7,"_"),CPVar (8,"name")],CPVar (9,"_"),CPVar (10,"_"),CPVar (11,"_")]] [(CSymbol ("Prelude","success"),CVar (8,"name"))] []])),CLocalFunc (CFunc ("AbstractCurryPrinter","allPublicCons") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CType") [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"c")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CApply (CApply (CSymbol ("Prelude","filter")) (CSymbol ("AbstractCurryPrinter","isPublicCons"))) (CVar (5,"c"))))) (CApply (CSymbol ("Prelude","length")) (CVar (5,"c"))))] [CLocalFunc (CFunc ("AbstractCurryPrinter","isPublicCons") 1 Private (CFuncType (CTCons ("AbstractCurry","CConsDecl") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CCons") [CPVar (6,"_"),CPVar (7,"_"),CPVar (8,"visibility"),CPVar (9,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"visibility"))) (CSymbol ("AbstractCurry","Public")))] []]))]])),CLocalFunc (CFunc ("AbstractCurryPrinter","getFuncName") 1 Private (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CFunc") [CPComb ("Prelude","(,)") [CPVar (2,"_"),CPVar (3,"name")],CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"_")]] [(CSymbol ("Prelude","success"),CVar (3,"name"))] [],CRule [CPComb ("AbstractCurry","CmtFunc") [CPVar (8,"_"),CPComb ("Prelude","(,)") [CPVar (9,"_"),CPVar (10,"name")],CPVar (11,"_"),CPVar (12,"_"),CPVar (13,"_"),CPVar (14,"_")]] [(CSymbol ("Prelude","success"),CVar (10,"name"))] []]))]]),
  CFunc ("AbstractCurryPrinter","showExpr") 0 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CSymbol ("AbstractCurryPrinter","defaultOptions")))] []]),
  CFunc ("AbstractCurryPrinter","showExprOpt") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("AbstractCurry","CVar") [CPComb ("Prelude","(,)") [CPVar (1,"_"),CPVar (2,"name")]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showIdentifier")) (CVar (2,"name")))] [],CRule [CPVar (3,"_"),CPComb ("AbstractCurry","CLit") [CPVar (4,"lit")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showLiteral")) (CVar (4,"lit")))] [],CRule [CPVar (5,"opts"),CPComb ("AbstractCurry","CSymbol") [CPVar (6,"name")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CApply (CSymbol ("Prelude","snd")) (CVar (6,"name"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSymbol")) (CVar (5,"opts"))) (CVar (6,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSymbol")) (CVar (5,"opts"))) (CVar (6,"name"))))] [],CRule [CPVar (7,"opts"),CPComb ("AbstractCurry","CApply") [CPVar (8,"func"),CPVar (9,"arg")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurryPrinter","showApplication")) (CVar (7,"opts"))) (CApply (CApply (CSymbol ("AbstractCurry","CApply")) (CVar (8,"func"))) (CVar (9,"arg"))))] [],CRule [CPVar (10,"opts"),CPComb ("AbstractCurry","CLambda") [CPVar (11,"patts"),CPVar (12,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showLambdaOrSection")) (CVar (10,"opts"))) (CVar (11,"patts"))) (CVar (12,"expr")))] [],CRule [CPVar (13,"opts"),CPComb ("AbstractCurry","CLetDecl") [CPVar (14,"localdecls"),CPVar (15,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CApply (CSymbol ("AbstractCurryPrinter","showLocalDecl")) (CVar (13,"opts")))) (CVar (14,"localdecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (13,"opts"))) (CVar (15,"expr")))))))] [],CRule [CPVar (16,"opts"),CPComb ("AbstractCurry","CDoExpr") [CPVar (17,"stmts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CApply (CSymbol ("AbstractCurryPrinter","showStatement")) (CVar (16,"opts")))) (CVar (17,"stmts"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPVar (18,"opts"),CPComb ("AbstractCurry","CListComp") [CPVar (19,"expr"),CPVar (20,"stmts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (18,"opts"))) (CVar (19,"expr")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CApply (CSymbol ("AbstractCurryPrinter","showStatement")) (CVar (18,"opts")))) (CVar (20,"stmts"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPVar (21,"opts"),CPComb ("AbstractCurry","CCase") [CPVar (22,"expr"),CPVar (23,"branches")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (21,"opts"))) (CVar (22,"expr")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CApply (CSymbol ("AbstractCurryPrinter","showBranchExpr")) (CVar (21,"opts")))) (CVar (23,"branches"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("AbstractCurryPrinter","showFixity") 1 Private (CFuncType (CTCons ("AbstractCurry","CFixity") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CInfixOp") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPComb ("AbstractCurry","CInfixlOp") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))] [],CRule [CPComb ("AbstractCurry","CInfixrOp") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("AbstractCurryPrinter","showFuncDecl") 0 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showFuncDeclOpt")) (CSymbol ("AbstractCurryPrinter","defaultOptions")))] []]),
  CFunc ("AbstractCurryPrinter","showFuncDeclOpt") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CmtFunc") [CPVar (1,"cmt"),CPVar (2,"qname"),CPVar (3,"ar"),CPVar (4,"vis"),CPVar (5,"typeexpr"),CPVar (6,"rules")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showCmtFunc")) (CVar (0,"opts"))) (CVar (1,"cmt"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("AbstractCurry","CFunc")) (CVar (2,"qname"))) (CVar (3,"ar"))) (CVar (4,"vis"))) (CVar (5,"typeexpr"))) (CVar (6,"rules"))))] [],CRule [CPVar (7,"opts"),CPAs (13,"cfunc") (CPComb ("AbstractCurry","CFunc") [CPVar (8,"_"),CPVar (9,"_"),CPVar (10,"_"),CPVar (11,"_"),CPVar (12,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showCmtFunc")) (CVar (7,"opts"))) (CSymbol ("Prelude","[]"))) (CVar (13,"cfunc")))] []]),
  CFunc ("AbstractCurryPrinter","showITEApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPVar (1,"_")],CPVar (2,"condExpr")],CPVar (3,"thenExpr")],CPVar (4,"elseExpr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (2,"condExpr")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (3,"thenExpr")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (4,"elseExpr"))))))))] [],CRule [CPVar (5,"opts"),CPComb ("AbstractCurry","CApply") [CPAs (10,"e") (CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPVar (6,"_"),CPVar (7,"_")],CPVar (8,"_")],CPVar (9,"_")]),CPVar (11,"e'")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showITEApplication")) (CVar (5,"opts"))) (CVar (10,"e")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (5,"opts"))) (CVar (11,"e'"))))))] []]),
  CFunc ("AbstractCurryPrinter","showIdentifier") 0 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CApply (CApply (CSymbol ("Prelude","flip")) (CSymbol ("Prelude","elem"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("AbstractCurryPrinter","showImport") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"imp")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (0,"imp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CVar (0,"imp")))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("AbstractCurryPrinter","showImports") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","String") []]) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"imports")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixInter")) (CSymbol ("AbstractCurryPrinter","showImport"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))) (CVar (0,"imports")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"imports"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("AbstractCurryPrinter","showInfixApplication") 3 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","QName") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"infixop"),CPComb ("AbstractCurry","CApply") [CPVar (2,"func"),CPVar (3,"arg2")]] [(CSymbol ("Prelude","success"),CCase (CVar (2,"func")) [CBranch (CPComb ("AbstractCurry","CApply") [CPVar (4,"_"),CPVar (5,"arg1")]) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (5,"arg1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSymbol")) (CVar (0,"opts"))) (CVar (1,"infixop")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (3,"arg2"))))))),CBranch (CPVar (6,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSymbol")) (CVar (0,"opts"))) (CVar (1,"infixop")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (3,"arg2"))))))])] []]),
  CFunc ("AbstractCurryPrinter","showLambda") 3 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"patts"),CPVar (2,"expr")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CSymbol ("AbstractCurryPrinter","showPattern"))) (CVar (1,"patts"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (2,"expr"))))))] []]),
  CFunc ("AbstractCurryPrinter","showLambdaOrSection") 3 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"patts"),CPVar (2,"expr")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"patts")) [CBranch (CPComb ("Prelude",":") [CPComb ("AbstractCurry","CPVar") [CPVar (3,"pvar")],CPComb ("Prelude","[]") []]) (CCase (CVar (2,"expr")) [CBranch (CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (4,"_"),CPVar (5,"name")]],CPVar (6,"lexpr")],CPComb ("AbstractCurry","CVar") [CPVar (7,"var")]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CVar (5,"name")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AbstractCurryPrinter","isAtom")) (CVar (6,"lexpr")))) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CSymbol ("AbstractCurry","CVar")) (CVar (7,"var")))) (CVar (6,"lexpr")))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"pvar"))) (CVar (7,"var")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (6,"lexpr")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"lexpr"))) (CApply (CSymbol ("AbstractCurry","CVar")) (CVar (3,"pvar"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CApply (CSymbol ("AbstractCurry","CVar")) (CVar (7,"var"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showLambda")) (CVar (0,"opts"))) (CVar (1,"patts"))) (CVar (2,"expr")))))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showLambda")) (CVar (0,"opts"))) (CVar (1,"patts"))) (CVar (2,"expr")))),CBranch (CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (8,"_"),CPVar (9,"name")]],CPComb ("AbstractCurry","CVar") [CPVar (10,"var")]],CPVar (11,"rexpr")]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CVar (9,"name")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"pvar"))) (CVar (10,"var")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AbstractCurryPrinter","isAtom")) (CVar (11,"rexpr")))) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CSymbol ("AbstractCurry","CVar")) (CVar (10,"var")))) (CVar (11,"rexpr"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (9,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (11,"rexpr")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showLambda")) (CVar (0,"opts"))) (CVar (1,"patts"))) (CVar (2,"expr")))),CBranch (CPVar (12,"_")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showLambda")) (CVar (0,"opts"))) (CVar (1,"patts"))) (CVar (2,"expr")))]),CBranch (CPVar (13,"_")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showLambda")) (CVar (0,"opts"))) (CVar (1,"patts"))) (CVar (2,"expr")))])] []]),
  CFunc ("AbstractCurryPrinter","showListApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"appl")] [(CApply (CSymbol ("AbstractCurryPrinter","isStringList")) (CVar (1,"appl")),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showCharListApplication")) (CVar (0,"opts"))) (CVar (1,"appl")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))),(CApply (CSymbol ("AbstractCurryPrinter","isClosedList")) (CVar (1,"appl")),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showConsListApplication")) (CVar (0,"opts"))) (CVar (1,"appl")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSimpleListApplication")) (CVar (0,"opts"))) (CVar (1,"appl")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","showLiteral") 1 Private (CFuncType (CTCons ("AbstractCurry","CLiteral") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CIntc") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","show")) (CVar (0,"i")))] [],CRule [CPComb ("AbstractCurry","CFloatc") [CPVar (1,"f")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","show")) (CVar (1,"f")))] [],CRule [CPComb ("AbstractCurry","CCharc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showCCharc")) (CApply (CSymbol ("AbstractCurry","CCharc")) (CVar (2,"c"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","showLocalDecl") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CLocalDecl") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CLocalFunc") [CPVar (1,"funcdecl")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurryPrinter","showLocalFuncDecl")) (CVar (0,"opts"))) (CVar (1,"funcdecl")))] [],CRule [CPVar (2,"opts"),CPComb ("AbstractCurry","CLocalPat") [CPVar (3,"pattern"),CPVar (4,"expr"),CPVar (5,"localdecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CVar (3,"pattern")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (2,"opts"))) (CVar (4,"expr")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (5,"localdecls")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CApply (CSymbol ("AbstractCurryPrinter","showLocalDecl")) (CVar (2,"opts")))) (CVar (5,"localdecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))] [],CRule [CPVar (6,"_"),CPComb ("AbstractCurry","CLocalVar") [CPVar (7,"index")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CApply (CSymbol ("AbstractCurry","CPVar")) (CVar (7,"index"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("AbstractCurryPrinter","showLocalFuncDecl") 1 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showFuncDeclOpt")) (CVar (0,"opts")))] []]),
  CFunc ("AbstractCurryPrinter","showOpDecl") 1 Private (CFuncType (CTCons ("AbstractCurry","COpDecl") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","COp") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"fixity"),CPVar (3,"precedence")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showFixity")) (CVar (2,"fixity")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (3,"precedence")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("AbstractCurryPrinter","isInfixOpName")) (CVar (1,"name")))) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]"))))))))))] []]),
  CFunc ("AbstractCurryPrinter","showOpDecls") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","COpDecl") []]) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"opdecls")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixInter")) (CSymbol ("AbstractCurryPrinter","showOpDecl"))) (CVar (0,"opdecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"opdecls"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("AbstractCurryPrinter","showPatListElems") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (0,"x"),CPComb ("Prelude",":") [CPVar (1,"xs"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CVar (0,"x")))) (CApply (CSymbol ("AbstractCurryPrinter","showPatListElems")) (CVar (1,"xs"))))] [],CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("AbstractCurry","CPVar") [CPVar (2,"v")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CApply (CSymbol ("AbstractCurry","CPVar")) (CVar (2,"v"))))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("AbstractCurry","CPAs") [CPVar (3,"name"),CPVar (4,"p")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CApply (CApply (CSymbol ("AbstractCurry","CPAs")) (CVar (3,"name"))) (CVar (4,"p"))))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("AbstractCurryPrinter","showPattern") 1 Public (CFuncType (CTCons ("AbstractCurry","CPattern") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CPVar") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showIdentifier")) (CVar (1,"name")))] [],CRule [CPComb ("AbstractCurry","CPLit") [CPVar (2,"lit")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showLiteral")) (CVar (2,"lit")))] [],CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPVar (3,"_"),CPVar (4,"name")],CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (4,"name"))] [],CRule [CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPVar (5,"mod"),CPVar (6,"name")],CPComb ("Prelude",":") [CPVar (7,"p"),CPVar (8,"ps")]]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))),CApply (CSymbol ("AbstractCurryPrinter","showPreludeCons")) (CApply (CApply (CSymbol ("AbstractCurry","CPComb")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (5,"mod"))) (CVar (6,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"p"))) (CVar (8,"ps"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CSymbol ("AbstractCurryPrinter","showPattern"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"p"))) (CVar (8,"ps")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("AbstractCurry","CPAs") [CPComb ("Prelude","(,)") [CPVar (9,"_"),CPVar (10,"name")],CPVar (11,"pat")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showIdentifier")) (CVar (10,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CVar (11,"pat")))))] [],CRule [CPComb ("AbstractCurry","CPFuncComb") [CPVar (12,"qname"),CPVar (13,"pats")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CApply (CApply (CSymbol ("AbstractCurry","CPComb")) (CVar (12,"qname"))) (CVar (13,"pats"))))] []]),
  CFunc ("AbstractCurryPrinter","showPatternList") 1 Private (CFuncType (CTCons ("AbstractCurry","CPattern") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"p")] [(CApply (CSymbol ("AbstractCurryPrinter","isClosedStringPattern")) (CVar (0,"p")),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"x0"))) (CLit (CCharc '\''))))) (CApply (CSymbol ("Prelude","concat")) (CApply (CSymbol ("AbstractCurryPrinter","showPatListElems")) (CVar (0,"p")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))),(CApply (CSymbol ("AbstractCurryPrinter","isClosedPatternList")) (CVar (0,"p")),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("AbstractCurryPrinter","showPatListElems")) (CVar (0,"p")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))),(CApply (CSymbol ("AbstractCurryPrinter","isAsPattern")) (CVar (0,"p")),CApply (CSymbol ("AbstractCurryPrinter","showAsPatternList")) (CVar (0,"p"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("AbstractCurryPrinter","showPatListElems")) (CVar (0,"p")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","showPreludeCons") 1 Private (CFuncType (CTCons ("AbstractCurry","CPattern") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"p")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))),CApply (CSymbol ("AbstractCurryPrinter","showPatternList")) (CVar (0,"p"))),(CApply (CSymbol ("AbstractCurryPrinter","isTuple")) (CVar (2,"name")),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CSymbol ("AbstractCurryPrinter","showPattern"))) (CVar (3,"pattlist"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CSymbol ("AbstractCurryPrinter","showPattern"))) (CVar (3,"pattlist"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [CLocalPat (CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPVar (1,"_"),CPVar (2,"name")],CPVar (3,"pattlist")]) (CVar (0,"p")) []]]),
  CFunc ("AbstractCurryPrinter","showPreludeTypeCons") 2 Private (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeExpr") []]) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"typelist")] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"typelist")))) (CApply (CApply (CSymbol ("AbstractCurry","CTCons")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False"))) (CApply (CSymbol ("Prelude","head")) (CVar (1,"typelist"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))),(CApply (CSymbol ("AbstractCurryPrinter","isTuple")) (CVar (0,"name")),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False")))) (CVar (1,"typelist"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"name"))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","True")))) (CVar (1,"typelist"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","showProg") 1 Public (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CurryProg") [CPVar (0,"m"),CPVar (1,"imports"),CPVar (2,"typedecls"),CPVar (3,"funcdecls"),CPVar (4,"opdecls")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (5,"exports")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExports")) (CVar (2,"typedecls"))) (CVar (3,"funcdecls"))) []] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"m"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"exports"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"exports"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showImports")) (CVar (1,"imports")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showOpDecls")) (CVar (4,"opdecls")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showTypeDecls")) (CVar (2,"typedecls")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixInter")) (CApply (CSymbol ("AbstractCurryPrinter","showFuncDeclOpt")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("AbstractCurryPrinter","nameFM")) (CVar (3,"funcdecls")))) (CVar (0,"m"))))) (CVar (3,"funcdecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))] []]),
  CFunc ("AbstractCurryPrinter","showRule") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CRule") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CRule") [CPVar (1,"pattlist"),CPVar (2,"crhslist"),CPVar (3,"localdecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CSymbol ("AbstractCurryPrinter","showPattern"))) (CVar (1,"pattlist"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showCrhsList")) (CVar (0,"opts"))) (CVar (2,"crhslist")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (3,"localdecls")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CApply (CSymbol ("AbstractCurryPrinter","showLocalDecl")) (CVar (0,"opts")))) (CVar (3,"localdecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("AbstractCurryPrinter","showSimpleApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"appl")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"appl")) [CBranch (CPComb ("AbstractCurry","CApply") [CPVar (2,"func"),CPVar (3,"arg")]) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showSimpleApplication")) (CVar (0,"opts"))) (CVar (2,"func")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (3,"arg"))))),CBranch (CPVar (4,"_")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (1,"appl")))])] []]),
  CFunc ("AbstractCurryPrinter","showSimpleListApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPVar (1,"_"),CPVar (2,"head")],CPVar (3,"tail")]] [(CSymbol ("Prelude","success"),CCase (CVar (3,"tail")) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPVar (4,"_")]) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (2,"head")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))),CBranch (CPVar (5,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (2,"head")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (0,"opts"))) (CVar (3,"tail")))))])] [],CRule [CPVar (6,"opts"),CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (7,"_"),CPVar (8,"str")]],CPVar (9,"tail")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showBoxedExpr")) (CVar (6,"opts"))) (CVar (9,"tail")))) (CVar (8,"str")))] []]),
  CFunc ("AbstractCurryPrinter","showStatement") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CStatement") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("AbstractCurry","CSExpr") [CPVar (1,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (1,"expr")))] [],CRule [CPVar (2,"opts"),CPComb ("AbstractCurry","CSPat") [CPVar (3,"pattern"),CPVar (4,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","showPattern")) (CVar (3,"pattern")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (2,"opts"))) (CVar (4,"expr")))))] [],CRule [CPVar (5,"opts"),CPComb ("AbstractCurry","CSLet") [CPVar (6,"localdecls")]] [(CSymbol ("Prelude","success"),CCase (CVar (6,"localdecls")) [CBranch (CPComb ("Prelude",":") [CPVar (7,"decl"),CPComb ("Prelude","[]") []]) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showLocalDecl")) (CVar (5,"opts"))) (CVar (7,"decl")))),CBranch (CPVar (8,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CApply (CSymbol ("AbstractCurryPrinter","showLocalDecl")) (CVar (5,"opts")))) (CVar (6,"localdecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))])] []]),
  CFunc ("AbstractCurryPrinter","showSymbol") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","QName") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"fm"),CPVar (1,"thisModule")],CPComb ("Prelude","(,)") [CPVar (2,"thatModule"),CPVar (3,"symName")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"thisModule"))) (CVar (2,"thatModule")),CVar (3,"symName")),(CApply (CSymbol ("Maybe","isJust")) (CApply (CApply (CSymbol ("FiniteMap","lookupFM")) (CVar (0,"fm"))) (CVar (3,"symName"))),CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"thatModule"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]")))) (CVar (3,"symName")))),(CSymbol ("Prelude","otherwise"),CVar (3,"symName"))] []]),
  CFunc ("AbstractCurryPrinter","showSymbolApplication") 3 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []]) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"opts"),CPComb ("Prelude","(,)") [CPVar (1,"mod"),CPVar (2,"name")],CPVar (3,"appl")] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("AbstractCurryPrinter","showListApplication")) (CVar (0,"opts"))) (CVar (3,"appl"))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))))))),CApply (CApply (CSymbol ("AbstractCurryPrinter","showITEApplication")) (CVar (0,"opts"))) (CVar (3,"appl"))),(CApply (CSymbol ("AbstractCurryPrinter","isTuple")) (CVar (2,"name")),CApply (CApply (CSymbol ("AbstractCurryPrinter","showTupleApplication")) (CVar (0,"opts"))) (CVar (3,"appl"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("AbstractCurryPrinter","showSimpleApplication")) (CVar (0,"opts"))) (CVar (3,"appl")))] []]),
  CFunc ("AbstractCurryPrinter","showTupleApplication") 2 Private (CFuncType (CTCons ("AbstractCurryPrinter","Options") []) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"opts"),CPVar (1,"appl")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","p_showTuple")) (CVar (1,"appl")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] [CLocalFunc (CFunc ("AbstractCurryPrinter","p_showTuple") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPVar (2,"_")],CPVar (3,"arg")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (3,"arg")))] [],CRule [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPVar (4,"e1"),CPVar (5,"e2")],CPVar (6,"arg")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AbstractCurryPrinter","p_showTuple")) (CApply (CApply (CSymbol ("AbstractCurry","CApply")) (CVar (4,"e1"))) (CVar (5,"e2"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showExprOpt")) (CVar (0,"opts"))) (CVar (6,"arg")))))] []]))]]),
  CFunc ("AbstractCurryPrinter","showTypeCons") 3 Private (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeExpr") []]) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"name"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CVar (1,"name"))] [],CRule [CPVar (2,"mod"),CPVar (3,"name"),CPComb ("Prelude",":") [CPVar (4,"t"),CPVar (5,"ts")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))),CApply (CApply (CSymbol ("AbstractCurryPrinter","showPreludeTypeCons")) (CVar (3,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"t"))) (CVar (5,"ts")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"name"))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","True")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"t"))) (CVar (5,"ts")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AbstractCurryPrinter","showTypeDecl") 1 Public (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CTypeSyn") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"_"),CPVar (3,"indexlist"),CPVar (4,"typeexpr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbstractCurry","CTVar"))) (CVar (3,"indexlist")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False"))) (CVar (4,"typeexpr")))))))] [],CRule [CPComb ("AbstractCurry","CType") [CPComb ("Prelude","(,)") [CPVar (5,"_"),CPVar (6,"name")],CPVar (7,"_"),CPVar (8,"indexlist"),CPVar (9,"consdecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixMap")) (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbstractCurry","CTVar"))) (CVar (8,"indexlist")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("AbstractCurryPrinter","showBlock")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","combineMap")) (CSymbol ("AbstractCurryPrinter","showConsDecl"))) (CVar (9,"consdecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))] []]),
  CFunc ("AbstractCurryPrinter","showTypeDecls") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeDecl") []]) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"typedecls")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","prefixInter")) (CSymbol ("AbstractCurryPrinter","showTypeDecl"))) (CVar (0,"typedecls"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"typedecls"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("AbstractCurryPrinter","showTypeExpr") 2 Public (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("AbstractCurry","CTVar") [CPComb ("Prelude","(,)") [CPVar (1,"_"),CPVar (2,"name")]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurryPrinter","showTypeVar")) (CApply (CSymbol ("AbstractCurryPrinter","showIdentifier")) (CVar (2,"name"))))] [],CRule [CPVar (3,"nested"),CPComb ("AbstractCurry","CFuncType") [CPVar (4,"domain"),CPVar (5,"range")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurryPrinter","maybeShowBrackets")) (CVar (3,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CApply (CSymbol ("AbstractCurryPrinter","isCFuncType")) (CVar (4,"domain")))) (CVar (4,"domain")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("AbstractCurryPrinter","showTypeExpr")) (CSymbol ("Prelude","False"))) (CVar (5,"range"))))))] [],CRule [CPVar (6,"nested"),CPComb ("AbstractCurry","CTCons") [CPComb ("Prelude","(,)") [CPVar (7,"mod"),CPVar (8,"name")],CPVar (9,"typelist")]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"mod"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("AbstractCurryPrinter","maybeShowBrackets")) (CApply (CApply (CSymbol ("Prelude","&&")) (CVar (6,"nested"))) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (9,"typelist")))))) (CApply (CApply (CApply (CSymbol ("AbstractCurryPrinter","showTypeCons")) (CVar (7,"mod"))) (CVar (8,"name"))) (CVar (9,"typelist"))))] []]),
  CFunc ("AbstractCurryPrinter","showTypeVar") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc 'a')))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"cs"))))) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("Char","isDigit"))) (CVar (1,"cs")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CVar (1,"cs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs"))))] []])]
 []
