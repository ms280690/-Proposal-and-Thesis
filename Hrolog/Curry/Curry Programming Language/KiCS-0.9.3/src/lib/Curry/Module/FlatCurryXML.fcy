Prog "FlatCurryXML" ["FlatCurry","Prelude","Read","XML"] [] [Func ("FlatCurryXML","flatCurryDtd") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("FlatCurryXML","flatCurry2XmlFile") 2 Public (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","writeFile") [Var 2,Comb FuncCall ("XML","showXmlDocWithParams") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","DtdUrl") [Comb FuncCall ("FlatCurryXML","flatCurryDtd") []],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("FlatCurryXML","flatCurry2Xml") [Var 1]]])),Func ("FlatCurryXML","flatCurry2Xml") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 2],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatCurry2Xml._#lambda2") [],Var 3]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowType") [],Var 4]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowFunc") [],Var 5]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowOp") [],Var 6]],Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("FlatCurryXML","flatCurry2Xml._#lambda2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("XML","XmlExp") [])) (Rule [1] (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 1],Comb ConsCall ("Prelude","[]") []]])),Func ("FlatCurryXML","qname2xmlattrs") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 3],Comb ConsCall ("Prelude","[]") []]])])),Func ("FlatCurryXML","xmlShowVisibity") 1 Private (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Public") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Private") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude","[]") []])])),Func ("FlatCurryXML","xmlShowType") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 2],Comb FuncCall ("FlatCurryXML","xmlShowVisibity") [Var 3]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowTVar") [],Var 4]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowCons") [],Var 5]]]),Branch (Pattern ("FlatCurry","TypeSyn") [6,7,8,9]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 6],Comb FuncCall ("FlatCurryXML","xmlShowVisibity") [Var 7]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowTVar") [],Var 8]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowTypeExpr") [Var 9],Comb ConsCall ("Prelude","[]") []]]])])),Func ("FlatCurryXML","xmlShowCons") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("FlatCurryXML","xmlShowVisibity") [Var 4]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowTypeExpr") [],Var 5]])])),Func ("FlatCurryXML","xmlShowTypeExpr") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","FuncType") [2,3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowTypeExpr") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowTypeExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","TCons") [4,5]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowTypeExpr") [],Var 5]]),Branch (Pattern ("FlatCurry","TVar") [6]) (Comb FuncCall ("FlatCurryXML","xmlShowTVar") [Var 6])])),Func ("FlatCurryXML","xmlShowTVar") 1 Private (FuncType (TVar 0) (TCons ("XML","XmlExp") [])) (Rule [1] (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("FlatCurryXML","xmlShowFunc") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("FlatCurryXML","xmlShowVisibity") [Var 4]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowTypeExpr") [Var 5],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowRule") [Var 6],Comb ConsCall ("Prelude","[]") []]]])])),Func ("FlatCurryXML","xmlShowRule") 1 Private (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rule") [2,3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowVar") [],Var 2]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","External") [4]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 4],Comb ConsCall ("Prelude","[]") []]])])),Func ("FlatCurryXML","xmlShowVar") 1 Private (FuncType (TVar 0) (TCons ("XML","XmlExp") [])) (Rule [1] (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("FlatCurryXML","xmlShowExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb FuncCall ("FlatCurryXML","xmlShowVar") [Var 2]),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowLit") [Var 3],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","FuncCall") []) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowExpr") [],Var 6]]),Branch (Pattern ("FlatCurry","ConsCall") []) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowExpr") [],Var 6]]),Branch (Pattern ("FlatCurry","FuncPartCall") [7]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","show") [Var 7]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowExpr") [],Var 6]]),Branch (Pattern ("FlatCurry","ConsPartCall") [8]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","show") [Var 8]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowExpr") [],Var 6]])]),Branch (Pattern ("FlatCurry","Free") [9,10]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowVar") [],Var 9]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 10],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 11],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 12],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb ConsCall ("XML","XElem") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Comb ConsCall ("FlatCurry","Flex") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]])],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 14],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowBranch") [],Var 15]]]),Branch (Pattern ("FlatCurry","Let") [16,17]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowExpr._#lambda3") [],Var 16],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 17],Comb ConsCall ("Prelude","[]") []]]])])),Func ("FlatCurryXML","xmlShowExpr._#lambda3") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowVar") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]]])])),Func ("FlatCurryXML","xmlShowLit") 1 Private (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Intc") [2]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 2]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("FlatCurry","Floatc") [3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("FlatCurry","Charc") [4]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","ord") [Var 4]]],Comb ConsCall ("Prelude","[]") []]])])),Func ("FlatCurryXML","xmlShowBranch") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Pattern") [4,5]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xmlShowVar") [],Var 5]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","LPattern") [6]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowLit") [Var 6],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurryXML","xmlShowExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]]])])])),Func ("FlatCurryXML","xmlShowOp") 1 Private (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Op") [2,3,4]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryXML","qname2xmlattrs") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 4]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []])])),Func ("FlatCurryXML","xmlFile2FlatCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("XML","readXmlFile") [Var 1],Comb (FuncPartCall 1) ("FlatCurryXML","xmlFile2FlatCurry._#lambda4") []])),Func ("FlatCurryXML","xmlFile2FlatCurry._#lambda4") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("FlatCurryXML","xml2FlatCurry") [Var 1]])),Func ("FlatCurryXML","xml2FlatCurry") 1 Public (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("XML","XElem") [15,16,17]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (Pattern ("XML","XElem") [32,33,34]) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  't')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 33) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (Pattern ("XML","XElem") [49,50,51]) (Case  Flex (Var 49) [Branch (Pattern ("Prelude",":") [52,53]) (Case  Flex (Var 52) [Branch (LPattern (Charc  't')) (Case  Flex (Var 53) [Branch (Pattern ("Prelude",":") [54,55]) (Case  Flex (Var 54) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 55) [Branch (Pattern ("Prelude",":") [56,57]) (Case  Flex (Var 56) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 57) [Branch (Pattern ("Prelude",":") [58,59]) (Case  Flex (Var 58) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 59) [Branch (Pattern ("Prelude",":") [60,61]) (Case  Flex (Var 60) [Branch (LPattern (Charc  's')) (Case  Flex (Var 61) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 50) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 48) [Branch (Pattern ("Prelude",":") [62,63]) (Case  Flex (Var 62) [Branch (Pattern ("XML","XElem") [64,65,66]) (Case  Flex (Var 64) [Branch (Pattern ("Prelude",":") [67,68]) (Case  Flex (Var 67) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 68) [Branch (Pattern ("Prelude",":") [69,70]) (Case  Flex (Var 69) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 70) [Branch (Pattern ("Prelude",":") [71,72]) (Case  Flex (Var 71) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 72) [Branch (Pattern ("Prelude",":") [73,74]) (Case  Flex (Var 73) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 74) [Branch (Pattern ("Prelude",":") [75,76]) (Case  Flex (Var 75) [Branch (LPattern (Charc  't')) (Case  Flex (Var 76) [Branch (Pattern ("Prelude",":") [77,78]) (Case  Flex (Var 77) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 78) [Branch (Pattern ("Prelude",":") [79,80]) (Case  Flex (Var 79) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 80) [Branch (Pattern ("Prelude",":") [81,82]) (Case  Flex (Var 81) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 82) [Branch (Pattern ("Prelude",":") [83,84]) (Case  Flex (Var 83) [Branch (LPattern (Charc  's')) (Case  Flex (Var 84) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 65) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 63) [Branch (Pattern ("Prelude",":") [85,86]) (Case  Flex (Var 85) [Branch (Pattern ("XML","XElem") [87,88,89]) (Case  Flex (Var 87) [Branch (Pattern ("Prelude",":") [90,91]) (Case  Flex (Var 90) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 91) [Branch (Pattern ("Prelude",":") [92,93]) (Case  Flex (Var 92) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 93) [Branch (Pattern ("Prelude",":") [94,95]) (Case  Flex (Var 94) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 95) [Branch (Pattern ("Prelude",":") [96,97]) (Case  Flex (Var 96) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 97) [Branch (Pattern ("Prelude",":") [98,99]) (Case  Flex (Var 98) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 99) [Branch (Pattern ("Prelude",":") [100,101]) (Case  Flex (Var 100) [Branch (LPattern (Charc  't')) (Case  Flex (Var 101) [Branch (Pattern ("Prelude",":") [102,103]) (Case  Flex (Var 102) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 103) [Branch (Pattern ("Prelude",":") [104,105]) (Case  Flex (Var 104) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 105) [Branch (Pattern ("Prelude",":") [106,107]) (Case  Flex (Var 106) [Branch (LPattern (Charc  's')) (Case  Flex (Var 107) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 88) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 86) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Prog") [Comb FuncCall ("XML","textOfXml") [Var 17],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xml2FlatCurry._#lambda5") [],Var 34],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2typedecl") [],Var 51],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xml2FlatCurry._#lambda6") [],Var 66],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","xml2FlatCurry._#lambda7") [],Var 89]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","xml2FlatCurry._#lambda5") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("XML","textOfXml") [Var 4])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","xml2FlatCurry._#lambda6") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","FuncDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (Pattern ("Prelude","(,)") [31,32]) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (Pattern ("Prelude","(,)") [43,44]) (Case  Flex (Var 43) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 49) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 50) [Branch (Pattern ("Prelude",":") [51,52]) (Case  Flex (Var 51) [Branch (LPattern (Charc  't')) (Case  Flex (Var 52) [Branch (Pattern ("Prelude",":") [53,54]) (Case  Flex (Var 53) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 54) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [55,56]) (Case  Flex (Var 56) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [57,58]) (Case  Flex (Var 58) [Branch (Pattern ("Prelude",":") [59,60]) (Case  Flex (Var 60) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Func") [Comb ConsCall ("Prelude","(,)") [Var 16,Var 32],Comb FuncCall ("Read","readNat") [Var 44],Comb FuncCall ("FlatCurryXML","xvis2vis") [Var 55],Comb FuncCall ("FlatCurryXML","flatx2texp") [Var 57],Comb FuncCall ("FlatCurryXML","flatx2FunBody") [Var 59]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","xml2FlatCurry._#lambda7") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","OpDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [11,12]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (Pattern ("Prelude","(,)") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (Pattern ("Prelude","(,)") [39,40]) (Case  Flex (Var 39) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 49) [Branch (LPattern (Charc  't')) (Case  Flex (Var 50) [Branch (Pattern ("Prelude",":") [51,52]) (Case  Flex (Var 51) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 52) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [53,54]) (Case  Flex (Var 53) [Branch (Pattern ("Prelude","(,)") [55,56]) (Case  Flex (Var 55) [Branch (Pattern ("Prelude",":") [57,58]) (Case  Flex (Var 57) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 58) [Branch (Pattern ("Prelude",":") [59,60]) (Case  Flex (Var 59) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 60) [Branch (Pattern ("Prelude",":") [61,62]) (Case  Flex (Var 61) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 62) [Branch (Pattern ("Prelude",":") [63,64]) (Case  Flex (Var 63) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 64) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 54) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Op") [Comb ConsCall ("Prelude","(,)") [Var 12,Var 28],Comb FuncCall ("FlatCurryXML","flatx2Fixity") [Var 40],Comb FuncCall ("Read","readNat") [Var 56]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2typedecl") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","TypeDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (Pattern ("Prelude","(,)") [31,32]) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 42) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (Pattern ("XML","XElem") [45,46,47]) (Case  Flex (Var 45) [Branch (Pattern ("Prelude",":") [48,49]) (Case  Flex (Var 48) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 49) [Branch (Pattern ("Prelude",":") [50,51]) (Case  Flex (Var 50) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 51) [Branch (Pattern ("Prelude",":") [52,53]) (Case  Flex (Var 52) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 53) [Branch (Pattern ("Prelude",":") [54,55]) (Case  Flex (Var 54) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 55) [Branch (Pattern ("Prelude",":") [56,57]) (Case  Flex (Var 56) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 57) [Branch (Pattern ("Prelude",":") [58,59]) (Case  Flex (Var 58) [Branch (LPattern (Charc  's')) (Case  Flex (Var 59) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 46) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Type") [Comb ConsCall ("Prelude","(,)") [Var 16,Var 32],Comb FuncCall ("FlatCurryXML","xvis2vis") [Var 41],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2typedecl._#lambda8") [],Var 47],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2typedecl._#lambda9") [],Var 44]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (Pattern ("Prelude",":") [60,61]) (Case  Flex (Var 60) [Branch (LPattern (Charc  's')) (Case  Flex (Var 61) [Branch (Pattern ("Prelude",":") [62,63]) (Case  Flex (Var 62) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 63) [Branch (Pattern ("Prelude",":") [64,65]) (Case  Flex (Var 64) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 65) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [66,67]) (Case  Flex (Var 66) [Branch (Pattern ("Prelude","(,)") [68,69]) (Case  Flex (Var 68) [Branch (Pattern ("Prelude",":") [70,71]) (Case  Flex (Var 70) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 71) [Branch (Pattern ("Prelude",":") [72,73]) (Case  Flex (Var 72) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 73) [Branch (Pattern ("Prelude",":") [74,75]) (Case  Flex (Var 74) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 75) [Branch (Pattern ("Prelude",":") [76,77]) (Case  Flex (Var 76) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 77) [Branch (Pattern ("Prelude",":") [78,79]) (Case  Flex (Var 78) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 79) [Branch (Pattern ("Prelude",":") [80,81]) (Case  Flex (Var 80) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 81) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 67) [Branch (Pattern ("Prelude",":") [82,83]) (Case  Flex (Var 82) [Branch (Pattern ("Prelude","(,)") [84,85]) (Case  Flex (Var 84) [Branch (Pattern ("Prelude",":") [86,87]) (Case  Flex (Var 86) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 87) [Branch (Pattern ("Prelude",":") [88,89]) (Case  Flex (Var 88) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 89) [Branch (Pattern ("Prelude",":") [90,91]) (Case  Flex (Var 90) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 91) [Branch (Pattern ("Prelude",":") [92,93]) (Case  Flex (Var 92) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 93) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 83) [Branch (Pattern ("Prelude",":") [94,95]) (Case  Flex (Var 95) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [96,97]) (Case  Flex (Var 96) [Branch (Pattern ("XML","XElem") [98,99,100]) (Case  Flex (Var 98) [Branch (Pattern ("Prelude",":") [101,102]) (Case  Flex (Var 101) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 102) [Branch (Pattern ("Prelude",":") [103,104]) (Case  Flex (Var 103) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 104) [Branch (Pattern ("Prelude",":") [105,106]) (Case  Flex (Var 105) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 106) [Branch (Pattern ("Prelude",":") [107,108]) (Case  Flex (Var 107) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 108) [Branch (Pattern ("Prelude",":") [109,110]) (Case  Flex (Var 109) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 110) [Branch (Pattern ("Prelude",":") [111,112]) (Case  Flex (Var 111) [Branch (LPattern (Charc  's')) (Case  Flex (Var 112) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 99) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 97) [Branch (Pattern ("Prelude",":") [113,114]) (Case  Flex (Var 114) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","TypeSyn") [Comb ConsCall ("Prelude","(,)") [Var 69,Var 85],Comb FuncCall ("FlatCurryXML","xvis2vis") [Var 94],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2typedecl._#lambda10") [],Var 100],Comb FuncCall ("FlatCurryXML","flatx2texp") [Var 113]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2typedecl._#lambda8") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 4]])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2typedecl._#lambda9") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","ConsDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  's')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (Pattern ("Prelude","(,)") [31,32]) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (Pattern ("Prelude","(,)") [43,44]) (Case  Flex (Var 43) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 49) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 50) [Branch (Pattern ("Prelude",":") [51,52]) (Case  Flex (Var 51) [Branch (LPattern (Charc  't')) (Case  Flex (Var 52) [Branch (Pattern ("Prelude",":") [53,54]) (Case  Flex (Var 53) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 54) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [55,56]) (Case  Flex (Var 56) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Cons") [Comb ConsCall ("Prelude","(,)") [Var 16,Var 32],Comb FuncCall ("Read","readNat") [Var 44],Comb FuncCall ("FlatCurryXML","xvis2vis") [Var 55],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2texp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2typedecl._#lambda10") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 4]])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2FunBody") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","Rule") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  't')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","External") [Comb FuncCall ("XML","textOfXml") [Var 4]])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'r')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("XML","XElem") [29,30,31]) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (LPattern (Charc  's')) (Case  Flex (Var 37) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [38,39]) (Case  Flex (Var 38) [Branch (Pattern ("XML","XElem") [40,41,42]) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  's')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 41) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 50) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 39) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Rule") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2var") [],Var 31],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 49]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2var") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 4]])])])])])])])])])])),Func ("FlatCurryXML","flatx2exp") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 4]]])])])])])])]),Branch (LPattern (Charc  'l')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  't')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Lit") [Comb FuncCall ("FlatCurryXML","flatx2lit") [Var 15]])])])])])])]),Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  't')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(19,Comb FuncCall ("FlatCurryXML","flatx2let") [Var 4])] (Let [(20,Comb FuncCall ("FlatCurryXML","flatx2exp._#selFP3#bindings") [Var 19])] (Let [(21,Comb FuncCall ("FlatCurryXML","flatx2exp._#selFP4#exp") [Var 19])] (Comb ConsCall ("FlatCurry","Let") [Var 20,Var 21]))))]),Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(28,Comb FuncCall ("FlatCurryXML","flatx2let") [Var 4])] (Let [(29,Comb FuncCall ("FlatCurryXML","flatx2exp._#selFP6#bindings") [Var 28])] (Let [(30,Comb FuncCall ("FlatCurryXML","flatx2exp._#selFP7#exp") [Var 28])] (Comb ConsCall ("FlatCurry","Let") [Var 29,Var 30]))))])])])])])])])])])])])]),Branch (LPattern (Charc  'f')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (Pattern ("Prelude","(,)") [47,48]) (Case  Flex (Var 47) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 49) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 50) [Branch (Pattern ("Prelude",":") [51,52]) (Case  Flex (Var 51) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 52) [Branch (Pattern ("Prelude",":") [53,54]) (Case  Flex (Var 53) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 54) [Branch (Pattern ("Prelude",":") [55,56]) (Case  Flex (Var 55) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 56) [Branch (Pattern ("Prelude",":") [57,58]) (Case  Flex (Var 57) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 58) [Branch (Pattern ("Prelude",":") [59,60]) (Case  Flex (Var 59) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 60) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [61,62]) (Case  Flex (Var 61) [Branch (Pattern ("Prelude","(,)") [63,64]) (Case  Flex (Var 63) [Branch (Pattern ("Prelude",":") [65,66]) (Case  Flex (Var 65) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 66) [Branch (Pattern ("Prelude",":") [67,68]) (Case  Flex (Var 67) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 68) [Branch (Pattern ("Prelude",":") [69,70]) (Case  Flex (Var 69) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 70) [Branch (Pattern ("Prelude",":") [71,72]) (Case  Flex (Var 71) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 72) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 62) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Var 48,Var 64],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2exp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'p')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [73,74]) (Case  Flex (Var 73) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 74) [Branch (Pattern ("Prelude",":") [75,76]) (Case  Flex (Var 75) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 76) [Branch (Pattern ("Prelude",":") [77,78]) (Case  Flex (Var 77) [Branch (LPattern (Charc  't')) (Case  Flex (Var 78) [Branch (Pattern ("Prelude",":") [79,80]) (Case  Flex (Var 79) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 80) [Branch (Pattern ("Prelude",":") [81,82]) (Case  Flex (Var 81) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 82) [Branch (Pattern ("Prelude",":") [83,84]) (Case  Flex (Var 83) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 84) [Branch (Pattern ("Prelude",":") [85,86]) (Case  Flex (Var 85) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 86) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [87,88]) (Case  Flex (Var 87) [Branch (Pattern ("Prelude","(,)") [89,90]) (Case  Flex (Var 89) [Branch (Pattern ("Prelude",":") [91,92]) (Case  Flex (Var 91) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 92) [Branch (Pattern ("Prelude",":") [93,94]) (Case  Flex (Var 93) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 94) [Branch (Pattern ("Prelude",":") [95,96]) (Case  Flex (Var 95) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 96) [Branch (Pattern ("Prelude",":") [97,98]) (Case  Flex (Var 97) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 98) [Branch (Pattern ("Prelude",":") [99,100]) (Case  Flex (Var 99) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 100) [Branch (Pattern ("Prelude",":") [101,102]) (Case  Flex (Var 101) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 102) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 88) [Branch (Pattern ("Prelude",":") [103,104]) (Case  Flex (Var 103) [Branch (Pattern ("Prelude","(,)") [105,106]) (Case  Flex (Var 105) [Branch (Pattern ("Prelude",":") [107,108]) (Case  Flex (Var 107) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 108) [Branch (Pattern ("Prelude",":") [109,110]) (Case  Flex (Var 109) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 110) [Branch (Pattern ("Prelude",":") [111,112]) (Case  Flex (Var 111) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 112) [Branch (Pattern ("Prelude",":") [113,114]) (Case  Flex (Var 113) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 114) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 104) [Branch (Pattern ("Prelude",":") [115,116]) (Case  Flex (Var 115) [Branch (Pattern ("Prelude","(,)") [117,118]) (Case  Flex (Var 117) [Branch (Pattern ("Prelude",":") [119,120]) (Case  Flex (Var 119) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 120) [Branch (Pattern ("Prelude",":") [121,122]) (Case  Flex (Var 121) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 122) [Branch (Pattern ("Prelude",":") [123,124]) (Case  Flex (Var 123) [Branch (LPattern (Charc  's')) (Case  Flex (Var 124) [Branch (Pattern ("Prelude",":") [125,126]) (Case  Flex (Var 125) [Branch (LPattern (Charc  's')) (Case  Flex (Var 126) [Branch (Pattern ("Prelude",":") [127,128]) (Case  Flex (Var 127) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 128) [Branch (Pattern ("Prelude",":") [129,130]) (Case  Flex (Var 129) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 130) [Branch (Pattern ("Prelude",":") [131,132]) (Case  Flex (Var 131) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 132) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 116) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncPartCall") [Comb FuncCall ("Read","readNat") [Var 118]],Comb ConsCall ("Prelude","(,)") [Var 90,Var 106],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2exp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'r')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [133,134]) (Case  Flex (Var 133) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 134) [Branch (Pattern ("Prelude",":") [135,136]) (Case  Flex (Var 135) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 136) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [137,138]) (Case  Flex (Var 137) [Branch (Pattern ("XML","XElem") [139,140,141]) (Case  Flex (Var 139) [Branch (Pattern ("Prelude",":") [142,143]) (Case  Flex (Var 142) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 143) [Branch (Pattern ("Prelude",":") [144,145]) (Case  Flex (Var 144) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 145) [Branch (Pattern ("Prelude",":") [146,147]) (Case  Flex (Var 146) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 147) [Branch (Pattern ("Prelude",":") [148,149]) (Case  Flex (Var 148) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 149) [Branch (Pattern ("Prelude",":") [150,151]) (Case  Flex (Var 150) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 151) [Branch (Pattern ("Prelude",":") [152,153]) (Case  Flex (Var 152) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 153) [Branch (Pattern ("Prelude",":") [154,155]) (Case  Flex (Var 154) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 155) [Branch (Pattern ("Prelude",":") [156,157]) (Case  Flex (Var 156) [Branch (LPattern (Charc  's')) (Case  Flex (Var 157) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 140) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 138) [Branch (Pattern ("Prelude",":") [158,159]) (Case  Flex (Var 159) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Free") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2var") [],Var 141],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 158]])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'c')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [160,161]) (Case  Flex (Var 160) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 161) [Branch (Pattern ("Prelude",":") [162,163]) (Case  Flex (Var 162) [Branch (LPattern (Charc  's')) (Case  Flex (Var 163) [Branch (Pattern ("Prelude",":") [164,165]) (Case  Flex (Var 164) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 165) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [166,167]) (Comb ConsCall ("FlatCurry","Case") [Comb ConsCall ("FlatCurry","Flex") [],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 166],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2branch") [],Var 167]])])])])])])])])])])])]),Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [168,169]) (Case  Flex (Var 168) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 169) [Branch (Pattern ("Prelude",":") [170,171]) (Case  Flex (Var 170) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 171) [Branch (Pattern ("Prelude",":") [172,173]) (Case  Flex (Var 172) [Branch (LPattern (Charc  's')) (Case  Flex (Var 173) [Branch (Pattern ("Prelude",":") [174,175]) (Case  Flex (Var 174) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 175) [Branch (Pattern ("Prelude",":") [176,177]) (Case  Flex (Var 176) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 177) [Branch (Pattern ("Prelude",":") [178,179]) (Case  Flex (Var 178) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 179) [Branch (Pattern ("Prelude",":") [180,181]) (Case  Flex (Var 180) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 181) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [182,183]) (Case  Flex (Var 182) [Branch (Pattern ("Prelude","(,)") [184,185]) (Case  Flex (Var 184) [Branch (Pattern ("Prelude",":") [186,187]) (Case  Flex (Var 186) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 187) [Branch (Pattern ("Prelude",":") [188,189]) (Case  Flex (Var 188) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 189) [Branch (Pattern ("Prelude",":") [190,191]) (Case  Flex (Var 190) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 191) [Branch (Pattern ("Prelude",":") [192,193]) (Case  Flex (Var 192) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 193) [Branch (Pattern ("Prelude",":") [194,195]) (Case  Flex (Var 194) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 195) [Branch (Pattern ("Prelude",":") [196,197]) (Case  Flex (Var 196) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 197) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 183) [Branch (Pattern ("Prelude",":") [198,199]) (Case  Flex (Var 198) [Branch (Pattern ("Prelude","(,)") [200,201]) (Case  Flex (Var 200) [Branch (Pattern ("Prelude",":") [202,203]) (Case  Flex (Var 202) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 203) [Branch (Pattern ("Prelude",":") [204,205]) (Case  Flex (Var 204) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 205) [Branch (Pattern ("Prelude",":") [206,207]) (Case  Flex (Var 206) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 207) [Branch (Pattern ("Prelude",":") [208,209]) (Case  Flex (Var 208) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 209) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 199) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","ConsCall") [],Comb ConsCall ("Prelude","(,)") [Var 185,Var 201],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2exp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'p')) (Case  Flex (Var 175) [Branch (Pattern ("Prelude",":") [210,211]) (Case  Flex (Var 210) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 211) [Branch (Pattern ("Prelude",":") [212,213]) (Case  Flex (Var 212) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 213) [Branch (Pattern ("Prelude",":") [214,215]) (Case  Flex (Var 214) [Branch (LPattern (Charc  't')) (Case  Flex (Var 215) [Branch (Pattern ("Prelude",":") [216,217]) (Case  Flex (Var 216) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 217) [Branch (Pattern ("Prelude",":") [218,219]) (Case  Flex (Var 218) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 219) [Branch (Pattern ("Prelude",":") [220,221]) (Case  Flex (Var 220) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 221) [Branch (Pattern ("Prelude",":") [222,223]) (Case  Flex (Var 222) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 223) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [224,225]) (Case  Flex (Var 224) [Branch (Pattern ("Prelude","(,)") [226,227]) (Case  Flex (Var 226) [Branch (Pattern ("Prelude",":") [228,229]) (Case  Flex (Var 228) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 229) [Branch (Pattern ("Prelude",":") [230,231]) (Case  Flex (Var 230) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 231) [Branch (Pattern ("Prelude",":") [232,233]) (Case  Flex (Var 232) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 233) [Branch (Pattern ("Prelude",":") [234,235]) (Case  Flex (Var 234) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 235) [Branch (Pattern ("Prelude",":") [236,237]) (Case  Flex (Var 236) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 237) [Branch (Pattern ("Prelude",":") [238,239]) (Case  Flex (Var 238) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 239) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 225) [Branch (Pattern ("Prelude",":") [240,241]) (Case  Flex (Var 240) [Branch (Pattern ("Prelude","(,)") [242,243]) (Case  Flex (Var 242) [Branch (Pattern ("Prelude",":") [244,245]) (Case  Flex (Var 244) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 245) [Branch (Pattern ("Prelude",":") [246,247]) (Case  Flex (Var 246) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 247) [Branch (Pattern ("Prelude",":") [248,249]) (Case  Flex (Var 248) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 249) [Branch (Pattern ("Prelude",":") [250,251]) (Case  Flex (Var 250) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 251) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 241) [Branch (Pattern ("Prelude",":") [252,253]) (Case  Flex (Var 252) [Branch (Pattern ("Prelude","(,)") [254,255]) (Case  Flex (Var 254) [Branch (Pattern ("Prelude",":") [256,257]) (Case  Flex (Var 256) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 257) [Branch (Pattern ("Prelude",":") [258,259]) (Case  Flex (Var 258) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 259) [Branch (Pattern ("Prelude",":") [260,261]) (Case  Flex (Var 260) [Branch (LPattern (Charc  's')) (Case  Flex (Var 261) [Branch (Pattern ("Prelude",":") [262,263]) (Case  Flex (Var 262) [Branch (LPattern (Charc  's')) (Case  Flex (Var 263) [Branch (Pattern ("Prelude",":") [264,265]) (Case  Flex (Var 264) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 265) [Branch (Pattern ("Prelude",":") [266,267]) (Case  Flex (Var 266) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 267) [Branch (Pattern ("Prelude",":") [268,269]) (Case  Flex (Var 268) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 269) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 253) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","ConsPartCall") [Comb FuncCall ("Read","readNat") [Var 255]],Comb ConsCall ("Prelude","(,)") [Var 227,Var 243],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2exp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'a')) (Case  Flex (Var 169) [Branch (Pattern ("Prelude",":") [270,271]) (Case  Flex (Var 270) [Branch (LPattern (Charc  's')) (Case  Flex (Var 271) [Branch (Pattern ("Prelude",":") [272,273]) (Case  Flex (Var 272) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 273) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [274,275]) (Comb ConsCall ("FlatCurry","Case") [Comb ConsCall ("FlatCurry","Rigid") [],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 274],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2branch") [],Var 275]])])])])])])])])])]),Branch (LPattern (Charc  'o')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [276,277]) (Case  Flex (Var 276) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 277) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [278,279]) (Case  Flex (Var 279) [Branch (Pattern ("Prelude",":") [280,281]) (Case  Flex (Var 281) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Or") [Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 278],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 280]])])])])])])])])])])])),Func ("FlatCurryXML","flatx2exp._#selFP3#bindings") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FlatCurryXML","flatx2exp._#selFP4#exp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FlatCurryXML","flatx2exp._#selFP6#bindings") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FlatCurryXML","flatx2exp._#selFP7#exp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FlatCurryXML","flatx2let") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 2]]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 2) [Branch (Pattern ("XML","XElem") [6,7,8]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (Pattern ("XML","XElem") [25,26,27]) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 35) [Branch (Pattern ("Prelude","[]") []) (Let [(36,Comb FuncCall ("FlatCurryXML","flatx2let") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]])] (Let [(37,Comb FuncCall ("FlatCurryXML","flatx2let._#selFP9#bindings") [Var 36])] (Let [(38,Comb FuncCall ("FlatCurryXML","flatx2let._#selFP10#exp") [Var 36])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 27]],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 34]],Var 37],Var 38]))))])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2let._#selFP9#bindings") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FlatCurryXML","flatx2let._#selFP10#exp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]],TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FlatCurryXML","flatx2branch") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","BranchExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (Pattern ("XML","XElem") [19,20,21]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  't')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  't')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (Pattern ("Prelude","(,)") [38,39]) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [40,41]) (Case  Flex (Var 40) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 41) [Branch (Pattern ("Prelude",":") [42,43]) (Case  Flex (Var 42) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 43) [Branch (Pattern ("Prelude",":") [44,45]) (Case  Flex (Var 44) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 45) [Branch (Pattern ("Prelude",":") [46,47]) (Case  Flex (Var 46) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 47) [Branch (Pattern ("Prelude",":") [48,49]) (Case  Flex (Var 48) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 49) [Branch (Pattern ("Prelude",":") [50,51]) (Case  Flex (Var 50) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 51) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 37) [Branch (Pattern ("Prelude",":") [52,53]) (Case  Flex (Var 52) [Branch (Pattern ("Prelude","(,)") [54,55]) (Case  Flex (Var 54) [Branch (Pattern ("Prelude",":") [56,57]) (Case  Flex (Var 56) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 57) [Branch (Pattern ("Prelude",":") [58,59]) (Case  Flex (Var 58) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 59) [Branch (Pattern ("Prelude",":") [60,61]) (Case  Flex (Var 60) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 61) [Branch (Pattern ("Prelude",":") [62,63]) (Case  Flex (Var 62) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 63) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 53) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [64,65]) (Case  Flex (Var 65) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb ConsCall ("Prelude","(,)") [Var 39,Var 55],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2var") [],Var 21]],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 64]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'l')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [66,67]) (Case  Flex (Var 66) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 67) [Branch (Pattern ("Prelude",":") [68,69]) (Case  Flex (Var 68) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 69) [Branch (Pattern ("Prelude",":") [70,71]) (Case  Flex (Var 70) [Branch (LPattern (Charc  't')) (Case  Flex (Var 71) [Branch (Pattern ("Prelude",":") [72,73]) (Case  Flex (Var 72) [Branch (LPattern (Charc  't')) (Case  Flex (Var 73) [Branch (Pattern ("Prelude",":") [74,75]) (Case  Flex (Var 74) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 75) [Branch (Pattern ("Prelude",":") [76,77]) (Case  Flex (Var 76) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 77) [Branch (Pattern ("Prelude",":") [78,79]) (Case  Flex (Var 78) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 79) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [80,81]) (Case  Flex (Var 81) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [82,83]) (Case  Flex (Var 83) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","LPattern") [Comb FuncCall ("FlatCurryXML","flatx2lit") [Var 80]],Comb FuncCall ("FlatCurryXML","flatx2exp") [Var 82]])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'h')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [84,85]) (Case  Flex (Var 84) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 85) [Branch (Pattern ("Prelude",":") [86,87]) (Case  Flex (Var 86) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 87) [Branch (Pattern ("Prelude",":") [88,89]) (Case  Flex (Var 88) [Branch (LPattern (Charc  't')) (Case  Flex (Var 89) [Branch (Pattern ("Prelude",":") [90,91]) (Case  Flex (Var 90) [Branch (LPattern (Charc  't')) (Case  Flex (Var 91) [Branch (Pattern ("Prelude",":") [92,93]) (Case  Flex (Var 92) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 93) [Branch (Pattern ("Prelude",":") [94,95]) (Case  Flex (Var 94) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 95) [Branch (Pattern ("Prelude",":") [96,97]) (Case  Flex (Var 96) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 97) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [98,99]) (Case  Flex (Var 99) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2lit") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","Literal") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  't')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Intc") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 4]]])])])])])])])])]),Branch (LPattern (Charc  'f')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  't')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])])])])])])])])])])])]),Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Charc") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 4]]]])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2texp") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("FlatCurry","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","TVar") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("XML","textOfXml") [Var 4]]])])])])])])]),Branch (LPattern (Charc  'c')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  's')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","(,)") [21,22]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (Pattern ("Prelude","(,)") [37,38]) (Case  Flex (Var 37) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 36) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Var 22,Var 38],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryXML","flatx2texp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'f')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 49) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 50) [Branch (Pattern ("Prelude",":") [51,52]) (Case  Flex (Var 51) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 52) [Branch (Pattern ("Prelude",":") [53,54]) (Case  Flex (Var 53) [Branch (LPattern (Charc  't')) (Case  Flex (Var 54) [Branch (Pattern ("Prelude",":") [55,56]) (Case  Flex (Var 55) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 56) [Branch (Pattern ("Prelude",":") [57,58]) (Case  Flex (Var 57) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 58) [Branch (Pattern ("Prelude",":") [59,60]) (Case  Flex (Var 59) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 60) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [61,62]) (Case  Flex (Var 62) [Branch (Pattern ("Prelude",":") [63,64]) (Case  Flex (Var 64) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","FuncType") [Comb FuncCall ("FlatCurryXML","flatx2texp") [Var 61],Comb FuncCall ("FlatCurryXML","flatx2texp") [Var 63]])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","xvis2vis") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("FlatCurry","Visibility") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  's')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  't')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Public") [])])])])])])])])])]),Branch (LPattern (Charc  'r')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 37) [Branch (Pattern ("Prelude",":") [38,39]) (Case  Flex (Var 38) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 39) [Branch (Pattern ("Prelude",":") [40,41]) (Case  Flex (Var 40) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 41) [Branch (Pattern ("Prelude",":") [42,43]) (Case  Flex (Var 42) [Branch (LPattern (Charc  't')) (Case  Flex (Var 43) [Branch (Pattern ("Prelude",":") [44,45]) (Case  Flex (Var 44) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 45) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Private") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatCurryXML","flatx2Fixity") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("FlatCurry","Fixity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (LPattern (Charc  'I')) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'O')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","InfixOp") [])])])]),Branch (LPattern (Charc  'l')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  'O')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","InfixlOp") [])])])])])]),Branch (LPattern (Charc  'r')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'O')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","InfixrOp") [])])])])])])])])])])])])])])])])])]))] []