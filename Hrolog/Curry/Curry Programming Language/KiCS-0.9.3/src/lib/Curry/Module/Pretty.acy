CurryProg "Pretty"
 ["Prelude","Dequeue"]
 [CType ("Pretty","Doc") Public [] [CCons ("Pretty","Doc") 1 Public [CFuncType (CTCons ("Pretty","Tokens") []) (CTCons ("Pretty","Tokens") [])]],
  CTypeSyn ("Pretty","Layout") Private [] (CTCons ("Prelude","String") []),
  CTypeSyn ("Pretty","Horizontal") Private [] (CTCons ("Prelude","Bool") []),
  CTypeSyn ("Pretty","Remaining") Private [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("Pretty","Width") Private [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("Pretty","Position") Private [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("Pretty","StartPosition") Private [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("Pretty","EndPosition") Private [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("Pretty","Out") Private [] (CFuncType (CTCons ("Pretty","Remaining") []) (CFuncType (CTCons ("Pretty","Margins") []) (CTCons ("Prelude","String") []))),
  CTypeSyn ("Pretty","OutGroupPrefix") Private [] (CFuncType (CTCons ("Pretty","Horizontal") []) (CFuncType (CTCons ("Pretty","Out") []) (CTCons ("Pretty","Out") []))),
  CTypeSyn ("Pretty","Margins") Private [] (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]),
  CType ("Pretty","Tokens") Private [] [CCons ("Pretty","Text") 2 Private [CTCons ("Prelude","String") [],CTCons ("Pretty","Tokens") []],CCons ("Pretty","Line") 2 Private [CTCons ("Prelude","String") [],CTCons ("Pretty","Tokens") []],CCons ("Pretty","Open") 1 Private [CTCons ("Pretty","Tokens") []],CCons ("Pretty","Close") 1 Private [CTCons ("Pretty","Tokens") []],CCons ("Pretty","Empty") 0 Private [],CCons ("Pretty","OpenNest") 2 Private [CFuncType (CTCons ("Pretty","Margins") []) (CFuncType (CTCons ("Pretty","Remaining") []) (CFuncType (CTCons ("Pretty","Width") []) (CTCons ("Pretty","Margins") []))),CTCons ("Pretty","Tokens") []],CCons ("Pretty","CloseNest") 1 Private [CTCons ("Pretty","Tokens") []]]]
 [CFunc ("Pretty","<$$>") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","combine")) (CSymbol ("Pretty","linebreak")))] []]),
  CFunc ("Pretty","<$>") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","combine")) (CSymbol ("Pretty","line")))] []]),
  CFunc ("Pretty","<+>") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","combine")) (CSymbol ("Pretty","space")))] []]),
  CFunc ("Pretty","<//>") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","combine")) (CSymbol ("Pretty","softbreak")))] []]),
  CFunc ("Pretty","</>") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","combine")) (CSymbol ("Pretty","softline")))] []]),
  CFunc ("Pretty","<>") 2 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"d1"),CPVar (1,"d2")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","Doc")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","deDoc")) (CVar (0,"d1")))) (CApply (CSymbol ("Pretty","deDoc")) (CVar (1,"d2")))))] []]),
  CFunc ("Pretty","align") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 0)))] []]),
  CFunc ("Pretty","angles") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","enclose")) (CSymbol ("Pretty","langle"))) (CSymbol ("Pretty","rangle")))] []]),
  CFunc ("Pretty","backslash") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '\\')))] []]),
  CFunc ("Pretty","bquote") 0 Private (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '`')))] []]),
  CFunc ("Pretty","bquotes") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","enclose")) (CSymbol ("Pretty","bquote"))) (CSymbol ("Pretty","bquote")))] []]),
  CFunc ("Pretty","braces") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","enclose")) (CSymbol ("Pretty","lbrace"))) (CSymbol ("Pretty","rbrace")))] []]),
  CFunc ("Pretty","brackets") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","enclose")) (CSymbol ("Pretty","lbracket"))) (CSymbol ("Pretty","rbracket")))] []]),
  CFunc ("Pretty","cat") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","group"))) (CSymbol ("Pretty","vcat")))] []]),
  CFunc ("Pretty","char") 1 Public (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("Pretty","colon") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc ':')))] []]),
  CFunc ("Pretty","combine") 3 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"d1"),CPVar (2,"d2")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Pretty","enclose")) (CVar (1,"d1"))) (CVar (2,"d2"))) (CVar (0,"s")))] []]),
  CFunc ("Pretty","comma") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc ',')))] []]),
  CFunc ("Pretty","compose") 2 Public (CFuncType (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Pretty","empty"))] [],CRule [CPVar (1,"op"),CPAs (4,"ds") (CPComb ("Prelude",":") [CPVar (2,"_"),CPVar (3,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr1")) (CVar (1,"op"))) (CVar (4,"ds")))] []]),
  CFunc ("Pretty","deDoc") 1 Private (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Tokens") []) (CTCons ("Pretty","Tokens") []))) (CRules CFlex [CRule [CPComb ("Pretty","Doc") [CPVar (0,"d")]] [(CSymbol ("Prelude","success"),CVar (0,"d"))] []]),
  CFunc ("Pretty","doc2Tokens") 1 Private (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Tokens") [])) (CRules CFlex [CRule [CPComb ("Pretty","Doc") [CPVar (0,"d")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","normalise")) (CApply (CVar (0,"d")) (CSymbol ("Pretty","Empty"))))] []]),
  CFunc ("Pretty","dot") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '.')))] []]),
  CFunc ("Pretty","dquote") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '"')))] []]),
  CFunc ("Pretty","dquotes") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","enclose")) (CSymbol ("Pretty","dquote"))) (CSymbol ("Pretty","dquote")))] []]),
  CFunc ("Pretty","empty") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("Pretty","enclose") 3 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"l"),CPVar (1,"r"),CPVar (2,"d")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (0,"l"))) (CVar (2,"d")))) (CVar (1,"r")))] []]),
  CFunc ("Pretty","encloseSep") 4 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))))) (CRules CFlex [CRule [CPVar (0,"l"),CPVar (1,"r"),CPVar (2,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CVar (0,"l"))) (CVar (1,"r")))] [],CRule [CPVar (3,"l"),CPVar (4,"r"),CPVar (5,"s"),CPComb ("Prelude",":") [CPVar (6,"d"),CPVar (7,"ds")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CSymbol ("Pretty","enclose")) (CVar (3,"l"))) (CVar (4,"r"))) (CApply (CSymbol ("Pretty","cat")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"d"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (5,"s"))) (CVar (8,"x0"))))) (CVar (7,"ds")))))))] []]),
  CFunc ("Pretty","equals") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '=')))] []]),
  CFunc ("Pretty","fillCat") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","compose")) (CSymbol ("Pretty","<//>")))] []]),
  CFunc ("Pretty","fillEncloseSep") 4 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))))) (CRules CFlex [CRule [CPVar (0,"l"),CPVar (1,"r"),CPVar (2,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CVar (0,"l"))) (CVar (1,"r")))] [],CRule [CPVar (3,"l"),CPVar (4,"r"),CPVar (5,"s"),CPComb ("Prelude",":") [CPVar (6,"d"),CPVar (7,"ds")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CSymbol ("Pretty","enclose")) (CVar (3,"l"))) (CVar (4,"r"))) (CApply (CSymbol ("Pretty","hcat")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"d"))) (CApply (CSymbol ("Pretty","withSoftBreaks")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (5,"s"))) (CVar (8,"x0"))))) (CVar (7,"ds"))))))))] [CLocalFunc (CFunc ("Pretty","withSoftBreaks") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (8,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Pretty","group")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","linebreak"))) (CVar (8,"x"))))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (9,"x"),CPAs (12,"xs") (CPComb ("Prelude",":") [CPVar (10,"_"),CPVar (11,"_")])]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Pretty","group")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","linebreak"))) (CApply (CSymbol ("Pretty","group")) (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (9,"x"))) (CSymbol ("Pretty","linebreak"))))))) (CApply (CSymbol ("Pretty","withSoftBreaks")) (CVar (12,"xs"))))] []]))]]),
  CFunc ("Pretty","fillSep") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","compose")) (CSymbol ("Pretty","</>")))] []]),
  CFunc ("Pretty","float") 1 Public (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"x"))))] []]),
  CFunc ("Pretty","group") 1 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"d")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","Doc")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","Open"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","deDoc")) (CVar (0,"d")))) (CSymbol ("Pretty","Close")))))] []]),
  CFunc ("Pretty","hEncloseSep") 4 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))))) (CRules CFlex [CRule [CPVar (0,"l"),CPVar (1,"r"),CPVar (2,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CVar (0,"l"))) (CVar (1,"r")))] [],CRule [CPVar (3,"l"),CPVar (4,"r"),CPVar (5,"s"),CPComb ("Prelude",":") [CPVar (6,"d"),CPVar (7,"ds")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CSymbol ("Pretty","enclose")) (CVar (3,"l"))) (CVar (4,"r"))) (CApply (CSymbol ("Pretty","hcat")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"d"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (5,"s"))) (CVar (8,"x0"))))) (CVar (7,"ds")))))))] []]),
  CFunc ("Pretty","hang") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"i"),CPVar (1,"d")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","Doc")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","OpenNest")) (CLambda [CPVar (2,"ms"),CPVar (3,"r"),CPVar (4,"w")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (4,"w"))) (CVar (3,"r")))) (CVar (0,"i")))) (CVar (2,"ms")))))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","deDoc")) (CVar (1,"d")))) (CSymbol ("Pretty","CloseNest")))))] []]),
  CFunc ("Pretty","hcat") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","compose")) (CSymbol ("Pretty","<>")))] []]),
  CFunc ("Pretty","hsep") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","compose")) (CSymbol ("Pretty","<+>")))] []]),
  CFunc ("Pretty","int") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"n"))))] []]),
  CFunc ("Pretty","langle") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '<')))] []]),
  CFunc ("Pretty","lbrace") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '{')))] []]),
  CFunc ("Pretty","lbracket") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '[')))] []]),
  CFunc ("Pretty","length") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","length"))) (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"x0"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 5))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 6))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 7))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","enumFromTo")) (CLit (CIntc 16))) (CLit (CIntc 31))))))) (CSymbol ("Prelude","ord"))))))] []]),
  CFunc ("Pretty","line") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","linesep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("Pretty","linebreak") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","linesep")) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("Pretty","linesep") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","Doc"))) (CSymbol ("Pretty","Line")))] []]),
  CFunc ("Pretty","list") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","lbracket"))) (CSymbol ("Pretty","rbracket"))) (CSymbol ("Pretty","comma")))] []]),
  CFunc ("Pretty","lparen") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '(')))] []]),
  CFunc ("Pretty","multiGroup") 8 Private (CFuncType (CTCons ("Pretty","Tokens") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CFuncType (CTCons ("Dequeue","Queue") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))))))))) (CRules CFlex [CRule [CPComb ("Pretty","Text") [CPVar (0,"t"),CPVar (1,"ts")],CPVar (2,"w"),CPVar (3,"p"),CPVar (4,"e"),CPVar (5,"outGrpPreOuter"),CPVar (6,"qs"),CPVar (7,"s"),CPVar (8,"outGrpPreInner")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","pruneMulti")) (CVar (1,"ts"))) (CVar (2,"w"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"p"))) (CVar (9,"l")))) (CVar (4,"e"))) (CVar (5,"outGrpPreOuter"))) (CVar (6,"qs"))) (CVar (7,"s"))) (CLambda [CPVar (10,"h"),CPVar (11,"c")] (CApply (CApply (CVar (8,"outGrpPreInner")) (CVar (10,"h"))) (CApply (CSymbol ("Pretty","outText")) (CVar (11,"c"))))))] [CLocalPat (CPVar (9,"l")) (CApply (CSymbol ("Pretty","length")) (CVar (0,"t"))) [],CLocalFunc (CFunc ("Pretty","outText") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))) (CRules CFlex [CRule [CPVar (10,"c"),CPVar (11,"r"),CPVar (12,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"t"))) (CApply (CApply (CVar (10,"c")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (11,"r"))) (CVar (9,"l")))) (CVar (12,"ms"))))] []]))],CRule [CPComb ("Pretty","Line") [CPVar (12,"s"),CPVar (13,"ts")],CPVar (14,"w"),CPVar (15,"p"),CPVar (16,"e"),CPVar (17,"outGrpPreOuter"),CPVar (18,"qs"),CPVar (19,"si"),CPVar (20,"outGrpPreInner")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","pruneMulti")) (CVar (13,"ts"))) (CVar (14,"w"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (15,"p"))) (CVar (21,"lens")))) (CVar (16,"e"))) (CVar (17,"outGrpPreOuter"))) (CVar (18,"qs"))) (CVar (19,"si"))) (CLambda [CPVar (22,"h"),CPVar (23,"c")] (CApply (CApply (CVar (20,"outGrpPreInner")) (CVar (22,"h"))) (CApply (CApply (CSymbol ("Pretty","outLine")) (CVar (22,"h"))) (CVar (23,"c"))))))] [CLocalPat (CPVar (21,"lens")) (CApply (CSymbol ("Pretty","length")) (CVar (12,"s"))) [],CLocalFunc (CFunc ("Pretty","outLine") 4 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CRules CFlex [CRule [CPVar (22,"h"),CPVar (23,"c"),CPVar (24,"r"),CPAs (27,"ms") (CPComb ("Prelude",":") [CPVar (25,"m"),CPVar (26,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (22,"h"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (12,"s"))) (CApply (CApply (CVar (23,"c")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (24,"r"))) (CVar (21,"lens")))) (CVar (27,"ms"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","replicate")) (CVar (25,"m"))) (CLit (CCharc ' ')))) (CApply (CApply (CVar (23,"c")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (14,"w"))) (CVar (25,"m")))) (CVar (27,"ms"))))))] []]))],CRule [CPComb ("Pretty","Open") [CPVar (24,"ts")],CPVar (25,"w"),CPVar (26,"p"),CPVar (27,"e"),CPVar (28,"outGrpPreOuter"),CPVar (29,"qs"),CPVar (30,"si"),CPVar (31,"outGrpPreInner")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","multiGroup")) (CVar (24,"ts"))) (CVar (25,"w"))) (CVar (26,"p"))) (CVar (27,"e"))) (CVar (28,"outGrpPreOuter"))) (CApply (CApply (CSymbol ("Dequeue","cons")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (30,"si"))) (CVar (31,"outGrpPreInner")))) (CVar (29,"qs")))) (CVar (26,"p"))) (CLambda [CPVar (32,"_"),CPVar (33,"c")] (CVar (33,"c"))))] [],CRule [CPComb ("Pretty","Close") [CPVar (34,"ts")],CPVar (35,"w"),CPVar (36,"p"),CPVar (37,"e"),CPVar (38,"outGrpPreOuter"),CPVar (39,"qs"),CPVar (40,"si"),CPVar (41,"outGrpPreInner")] [(CSymbol ("Prelude","success"),CCase (CApply (CSymbol ("Dequeue","matchHead")) (CVar (39,"qs"))) [CBranch (CPComb ("Prelude","Nothing") []) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","oneGroup")) (CVar (34,"ts"))) (CVar (35,"w"))) (CVar (36,"p"))) (CVar (37,"e"))) (CLambda [CPVar (42,"h"),CPVar (43,"c")] (CApply (CApply (CVar (38,"outGrpPreOuter")) (CVar (42,"h"))) (CLambda [CPVar (44,"ri")] (CApply (CApply (CApply (CVar (41,"outGrpPreInner")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (36,"p"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (40,"si"))) (CVar (44,"ri"))))) (CVar (43,"c"))) (CVar (44,"ri"))))))),CBranch (CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,)") [CPVar (45,"s"),CPVar (46,"outGrpPre")],CPVar (47,"qs'")]]) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","multiGroup")) (CVar (34,"ts"))) (CVar (35,"w"))) (CVar (36,"p"))) (CVar (37,"e"))) (CVar (38,"outGrpPreOuter"))) (CVar (47,"qs'"))) (CVar (45,"s"))) (CLambda [CPVar (48,"h"),CPVar (49,"c")] (CApply (CApply (CVar (46,"outGrpPre")) (CVar (48,"h"))) (CLambda [CPVar (50,"ri")] (CApply (CApply (CApply (CVar (41,"outGrpPreInner")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (36,"p"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (40,"si"))) (CVar (50,"ri"))))) (CVar (49,"c"))) (CVar (50,"ri")))))))])] [],CRule [CPComb ("Pretty","OpenNest") [CPVar (51,"f"),CPVar (52,"ts")],CPVar (53,"w"),CPVar (54,"p"),CPVar (55,"e"),CPVar (56,"outGrpPreOuter"),CPVar (57,"qs"),CPVar (58,"si"),CPVar (59,"outGrpPreInner")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","multiGroup")) (CVar (52,"ts"))) (CVar (53,"w"))) (CVar (54,"p"))) (CVar (55,"e"))) (CVar (56,"outGrpPreOuter"))) (CVar (57,"qs"))) (CVar (58,"si"))) (CLambda [CPVar (60,"h"),CPVar (61,"c")] (CApply (CApply (CVar (59,"outGrpPreInner")) (CVar (60,"h"))) (CLambda [CPVar (62,"r"),CPVar (63,"ms")] (CApply (CApply (CVar (61,"c")) (CVar (62,"r"))) (CApply (CApply (CApply (CVar (51,"f")) (CVar (63,"ms"))) (CVar (62,"r"))) (CVar (53,"w"))))))))] [],CRule [CPComb ("Pretty","CloseNest") [CPVar (64,"ts")],CPVar (65,"w"),CPVar (66,"p"),CPVar (67,"e"),CPVar (68,"outGrpPreOuter"),CPVar (69,"qs"),CPVar (70,"si"),CPVar (71,"outGrpPreInner")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","multiGroup")) (CVar (64,"ts"))) (CVar (65,"w"))) (CVar (66,"p"))) (CVar (67,"e"))) (CVar (68,"outGrpPreOuter"))) (CVar (69,"qs"))) (CVar (70,"si"))) (CLambda [CPVar (72,"h"),CPVar (73,"c")] (CApply (CApply (CVar (71,"outGrpPreInner")) (CVar (72,"h"))) (CLambda [CPVar (74,"r"),CPVar (75,"ms")] (CApply (CApply (CVar (73,"c")) (CVar (74,"r"))) (CApply (CSymbol ("Prelude","tail")) (CVar (75,"ms"))))))))] []]),
  CFunc ("Pretty","nest") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"i"),CPVar (1,"d")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","Doc")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","OpenNest")) (CLambda [CPAs (4,"ms") (CPComb ("Prelude",":") [CPVar (2,"m"),CPVar (3,"_")]),CPVar (5,"_"),CPVar (6,"_")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (2,"m"))) (CVar (0,"i")))) (CVar (4,"ms")))))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","deDoc")) (CVar (1,"d")))) (CSymbol ("Pretty","CloseNest")))))] []]),
  CFunc ("Pretty","noGroup") 5 Private (CFuncType (CTCons ("Pretty","Tokens") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))))) (CRules CFlex [CRule [CPComb ("Pretty","Empty") [],CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Pretty","Text") [CPVar (4,"t"),CPVar (5,"ts")],CPVar (6,"w"),CPVar (7,"p"),CPVar (8,"r"),CPVar (9,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (4,"t"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CVar (5,"ts"))) (CVar (6,"w"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (7,"p"))) (CVar (10,"l")))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (8,"r"))) (CVar (10,"l")))) (CVar (9,"ms"))))] [CLocalPat (CPVar (10,"l")) (CApply (CSymbol ("Pretty","length")) (CVar (4,"t"))) []],CRule [CPComb ("Pretty","Line") [CPVar (11,"_"),CPVar (12,"ts")],CPVar (13,"w"),CPVar (14,"p"),CPVar (15,"_"),CPAs (18,"ms") (CPComb ("Prelude",":") [CPVar (16,"m"),CPVar (17,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","replicate")) (CVar (16,"m"))) (CLit (CCharc ' ')))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CVar (12,"ts"))) (CVar (13,"w"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (14,"p"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (13,"w"))) (CVar (16,"m")))) (CVar (18,"ms")))))] [],CRule [CPComb ("Pretty","Open") [CPVar (19,"ts")],CPVar (20,"w"),CPVar (21,"p"),CPVar (22,"r"),CPVar (23,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","oneGroup")) (CVar (19,"ts"))) (CVar (20,"w"))) (CVar (21,"p"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (21,"p"))) (CVar (22,"r")))) (CLambda [CPVar (24,"_"),CPVar (25,"c")] (CVar (25,"c")))) (CVar (22,"r"))) (CVar (23,"ms")))] [],CRule [CPComb ("Pretty","Close") [CPVar (26,"ts")],CPVar (27,"w"),CPVar (28,"p"),CPVar (29,"r"),CPVar (30,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CVar (26,"ts"))) (CVar (27,"w"))) (CVar (28,"p"))) (CVar (29,"r"))) (CVar (30,"ms")))] [],CRule [CPComb ("Pretty","OpenNest") [CPVar (31,"f"),CPVar (32,"ts")],CPVar (33,"w"),CPVar (34,"p"),CPVar (35,"r"),CPVar (36,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CVar (32,"ts"))) (CVar (33,"w"))) (CVar (34,"p"))) (CVar (35,"r"))) (CApply (CApply (CApply (CVar (31,"f")) (CVar (36,"ms"))) (CVar (35,"r"))) (CVar (33,"w"))))] [],CRule [CPComb ("Pretty","CloseNest") [CPVar (37,"ts")],CPVar (38,"w"),CPVar (39,"p"),CPVar (40,"r"),CPVar (41,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CVar (37,"ts"))) (CVar (38,"w"))) (CVar (39,"p"))) (CVar (40,"r"))) (CApply (CSymbol ("Prelude","tail")) (CVar (41,"ms"))))] []]),
  CFunc ("Pretty","normalise") 0 Private (CFuncType (CTCons ("Pretty","Tokens") []) (CTCons ("Pretty","Tokens") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","go")) (CSymbol ("Prelude","id")))] [CLocalFunc (CFunc ("Pretty","go") 2 Private (CFuncType (CFuncType (CTCons ("Pretty","Tokens") []) (CTCons ("Pretty","Tokens") [])) (CFuncType (CTCons ("Pretty","Tokens") []) (CTCons ("Pretty","Tokens") []))) (CRules CFlex [CRule [CPVar (0,"co"),CPComb ("Pretty","Empty") []] [(CSymbol ("Prelude","success"),CApply (CVar (0,"co")) (CSymbol ("Pretty","Empty")))] [],CRule [CPVar (1,"co"),CPComb ("Pretty","Open") [CPVar (2,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","go")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (1,"co"))) (CSymbol ("Pretty","open")))) (CVar (2,"ts")))] [],CRule [CPVar (3,"co"),CPComb ("Pretty","Close") [CPVar (4,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","go")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (3,"co"))) (CSymbol ("Pretty","Close")))) (CVar (4,"ts")))] [],CRule [CPVar (5,"co"),CPComb ("Pretty","Line") [CPVar (6,"s"),CPVar (7,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (5,"co"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","Line")) (CVar (6,"s")))) (CApply (CSymbol ("Pretty","go")) (CSymbol ("Prelude","id")))))) (CVar (7,"ts")))] [],CRule [CPVar (8,"co"),CPComb ("Pretty","Text") [CPVar (9,"s"),CPVar (10,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","Text")) (CVar (9,"s"))) (CApply (CApply (CSymbol ("Pretty","go")) (CVar (8,"co"))) (CVar (10,"ts"))))] [],CRule [CPVar (11,"co"),CPComb ("Pretty","OpenNest") [CPVar (12,"f"),CPVar (13,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","OpenNest")) (CVar (12,"f"))) (CApply (CApply (CSymbol ("Pretty","go")) (CVar (11,"co"))) (CVar (13,"ts"))))] [],CRule [CPVar (14,"co"),CPComb ("Pretty","CloseNest") [CPVar (15,"ts")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","CloseNest")) (CApply (CApply (CSymbol ("Pretty","go")) (CVar (14,"co"))) (CVar (15,"ts"))))] []])),CLocalFunc (CFunc ("Pretty","open") 1 Private (CFuncType (CTCons ("Pretty","Tokens") []) (CTCons ("Pretty","Tokens") [])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"t")) [CBranch (CPComb ("Pretty","Close") [CPVar (1,"ts")]) (CVar (1,"ts")),CBranch (CPVar (2,"_")) (CApply (CSymbol ("Pretty","Open")) (CVar (0,"t")))])] []]))]]),
  CFunc ("Pretty","oneGroup") 5 Private (CFuncType (CTCons ("Pretty","Tokens") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))))))) (CRules CFlex [CRule [CPComb ("Pretty","Text") [CPVar (0,"t"),CPVar (1,"ts")],CPVar (2,"w"),CPVar (3,"p"),CPVar (4,"e"),CPVar (5,"outGrpPre")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","pruneOne")) (CVar (1,"ts"))) (CVar (2,"w"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"p"))) (CVar (6,"l")))) (CVar (4,"e"))) (CLambda [CPVar (7,"h"),CPVar (8,"c")] (CApply (CApply (CVar (5,"outGrpPre")) (CVar (7,"h"))) (CApply (CSymbol ("Pretty","outText")) (CVar (8,"c"))))))] [CLocalPat (CPVar (6,"l")) (CApply (CSymbol ("Pretty","length")) (CVar (0,"t"))) [],CLocalFunc (CFunc ("Pretty","outText") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))) (CRules CFlex [CRule [CPVar (7,"c"),CPVar (8,"r"),CPVar (9,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"t"))) (CApply (CApply (CVar (7,"c")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (8,"r"))) (CVar (6,"l")))) (CVar (9,"ms"))))] []]))],CRule [CPComb ("Pretty","Line") [CPVar (9,"s"),CPVar (10,"ts")],CPVar (11,"w"),CPVar (12,"p"),CPVar (13,"e"),CPVar (14,"outGrpPre")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","pruneOne")) (CVar (10,"ts"))) (CVar (11,"w"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (12,"p"))) (CVar (15,"lens")))) (CVar (13,"e"))) (CLambda [CPVar (16,"h"),CPVar (17,"c")] (CApply (CApply (CVar (14,"outGrpPre")) (CVar (16,"h"))) (CApply (CApply (CSymbol ("Pretty","outLine")) (CVar (16,"h"))) (CVar (17,"c"))))))] [CLocalPat (CPVar (15,"lens")) (CApply (CSymbol ("Pretty","length")) (CVar (9,"s"))) [],CLocalFunc (CFunc ("Pretty","outLine") 4 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CRules CFlex [CRule [CPVar (16,"h"),CPVar (17,"c"),CPVar (18,"r"),CPAs (21,"ms") (CPComb ("Prelude",":") [CPVar (19,"m"),CPVar (20,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (16,"h"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (9,"s"))) (CApply (CApply (CVar (17,"c")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (18,"r"))) (CVar (15,"lens")))) (CVar (21,"ms"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","replicate")) (CVar (19,"m"))) (CLit (CCharc ' ')))) (CApply (CApply (CVar (17,"c")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (11,"w"))) (CVar (19,"m")))) (CVar (21,"ms"))))))] []]))],CRule [CPComb ("Pretty","Open") [CPVar (18,"ts")],CPVar (19,"w"),CPVar (20,"p"),CPVar (21,"e"),CPVar (22,"outGrpPre")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","multiGroup")) (CVar (18,"ts"))) (CVar (19,"w"))) (CVar (20,"p"))) (CVar (21,"e"))) (CVar (22,"outGrpPre"))) (CSymbol ("Dequeue","empty"))) (CVar (20,"p"))) (CLambda [CPVar (23,"_"),CPVar (24,"c")] (CVar (24,"c"))))] [],CRule [CPComb ("Pretty","Close") [CPVar (25,"ts")],CPVar (26,"w"),CPVar (27,"p"),CPVar (28,"e"),CPVar (29,"outGrpPre")] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (29,"outGrpPre")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (27,"p"))) (CVar (28,"e")))) (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CVar (25,"ts"))) (CVar (26,"w"))) (CVar (27,"p"))))] [],CRule [CPComb ("Pretty","OpenNest") [CPVar (30,"f"),CPVar (31,"ts")],CPVar (32,"w"),CPVar (33,"p"),CPVar (34,"e"),CPVar (35,"outGrpPre")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","oneGroup")) (CVar (31,"ts"))) (CVar (32,"w"))) (CVar (33,"p"))) (CVar (34,"e"))) (CLambda [CPVar (36,"h"),CPVar (37,"c")] (CApply (CApply (CVar (35,"outGrpPre")) (CVar (36,"h"))) (CLambda [CPVar (38,"r"),CPVar (39,"ms")] (CApply (CApply (CVar (37,"c")) (CVar (38,"r"))) (CApply (CApply (CApply (CVar (30,"f")) (CVar (39,"ms"))) (CVar (38,"r"))) (CVar (32,"w"))))))))] [],CRule [CPComb ("Pretty","CloseNest") [CPVar (40,"ts")],CPVar (41,"w"),CPVar (42,"p"),CPVar (43,"e"),CPVar (44,"outGrpPre")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","oneGroup")) (CVar (40,"ts"))) (CVar (41,"w"))) (CVar (42,"p"))) (CVar (43,"e"))) (CLambda [CPVar (45,"h"),CPVar (46,"c")] (CApply (CApply (CVar (44,"outGrpPre")) (CVar (45,"h"))) (CLambda [CPVar (47,"r"),CPVar (48,"ms")] (CApply (CApply (CVar (46,"c")) (CVar (47,"r"))) (CApply (CSymbol ("Prelude","tail")) (CVar (48,"ms"))))))))] []]),
  CFunc ("Pretty","parens") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","enclose")) (CSymbol ("Pretty","lparen"))) (CSymbol ("Pretty","rparen")))] []]),
  CFunc ("Pretty","pretty") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"w"),CPVar (1,"d")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CApply (CSymbol ("Pretty","doc2Tokens")) (CVar (1,"d")))) (CVar (0,"w"))) (CLit (CIntc 1))) (CVar (0,"w"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 0))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("Pretty","pruneMulti") 8 Private (CFuncType (CTCons ("Pretty","Tokens") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CFuncType (CTCons ("Dequeue","Queue") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))))))))) (CRules CFlex [CRule [CPVar (0,"ts"),CPVar (1,"w"),CPVar (2,"p"),CPVar (3,"e"),CPVar (4,"outGrpPreOuter"),CPVar (5,"qs"),CPVar (6,"si"),CPVar (7,"outGrpPreInner")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (2,"p"))) (CVar (3,"e")))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","multiGroup")) (CVar (0,"ts"))) (CVar (1,"w"))) (CVar (2,"p"))) (CVar (3,"e"))) (CVar (4,"outGrpPreOuter"))) (CVar (5,"qs"))) (CVar (6,"si"))) (CVar (7,"outGrpPreInner")))) (CApply (CApply (CVar (4,"outGrpPreOuter")) (CSymbol ("Prelude","False"))) (CLambda [CPVar (8,"r")] (CApply (CCase (CApply (CSymbol ("Dequeue","matchLast")) (CVar (5,"qs"))) [CBranch (CPComb ("Prelude","Nothing") []) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","pruneOne")) (CVar (0,"ts"))) (CVar (1,"w"))) (CVar (2,"p"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (6,"si"))) (CVar (8,"r")))) (CVar (7,"outGrpPreInner"))),CBranch (CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,)") [CPVar (9,"s"),CPVar (10,"outGrpPre")],CPVar (11,"qs'")]]) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","pruneMulti")) (CVar (0,"ts"))) (CVar (1,"w"))) (CVar (2,"p"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (9,"s"))) (CVar (8,"r")))) (CVar (10,"outGrpPre"))) (CVar (11,"qs'"))) (CVar (6,"si"))) (CVar (7,"outGrpPreInner")))]) (CVar (8,"r"))))))] []]),
  CFunc ("Pretty","pruneOne") 5 Private (CFuncType (CTCons ("Pretty","Tokens") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))))))) (CRules CFlex [CRule [CPVar (0,"ts"),CPVar (1,"w"),CPVar (2,"p"),CPVar (3,"e"),CPVar (4,"outGrpPre")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (2,"p"))) (CVar (3,"e")))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Pretty","oneGroup")) (CVar (0,"ts"))) (CVar (1,"w"))) (CVar (2,"p"))) (CVar (3,"e"))) (CVar (4,"outGrpPre")))) (CApply (CApply (CVar (4,"outGrpPre")) (CSymbol ("Prelude","False"))) (CApply (CApply (CApply (CSymbol ("Pretty","noGroup")) (CVar (0,"ts"))) (CVar (1,"w"))) (CVar (2,"p")))))] []]),
  CFunc ("Pretty","punctuate") 2 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"d"),CPAs (4,"ds") (CPComb ("Prelude",":") [CPVar (2,"_"),CPVar (3,"_")])] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","go")) (CVar (4,"ds")))] [CLocalFunc (CFunc ("Pretty","go") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (5,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"x"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (6,"x"),CPAs (9,"xs") (CPComb ("Prelude",":") [CPVar (7,"_"),CPVar (8,"_")])]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (6,"x"))) (CVar (1,"d")))) (CApply (CSymbol ("Pretty","go")) (CVar (9,"xs"))))] []]))]]),
  CFunc ("Pretty","rangle") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '>')))] []]),
  CFunc ("Pretty","rbrace") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '}')))] []]),
  CFunc ("Pretty","rbracket") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc ']')))] []]),
  CFunc ("Pretty","rparen") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc ')')))] []]),
  CFunc ("Pretty","semi") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc ';')))] []]),
  CFunc ("Pretty","semiBraces") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","lbrace"))) (CSymbol ("Pretty","rbrace"))) (CSymbol ("Pretty","semi")))] []]),
  CFunc ("Pretty","sep") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","group"))) (CSymbol ("Pretty","vsep")))] []]),
  CFunc ("Pretty","softbreak") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","group")) (CSymbol ("Pretty","linebreak")))] []]),
  CFunc ("Pretty","softline") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","group")) (CSymbol ("Pretty","line")))] []]),
  CFunc ("Pretty","space") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc ' ')))] []]),
  CFunc ("Pretty","squote") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '\'')))] []]),
  CFunc ("Pretty","squotes") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","enclose")) (CSymbol ("Pretty","squote"))) (CSymbol ("Pretty","squote")))] []]),
  CFunc ("Pretty","string") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","hcat"))) (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (0,"c")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\r'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Pretty","line"))) (CApply (CSymbol ("Pretty","char")) (CVar (0,"c")))))))] []]),
  CFunc ("Pretty","text") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","Doc")) (CApply (CSymbol ("Pretty","Text")) (CVar (0,"s"))))] []]),
  CFunc ("Pretty","tupled") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","lparen"))) (CSymbol ("Pretty","rparen"))) (CSymbol ("Pretty","comma")))] []]),
  CFunc ("Pretty","vcat") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","compose")) (CSymbol ("Pretty","<$$>")))] []]),
  CFunc ("Pretty","vsep") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","compose")) (CSymbol ("Pretty","<$>")))] []])]
 [COp ("Pretty","<//>") CInfixlOp 1,COp ("Pretty","<$$>") CInfixlOp 1,COp ("Pretty","</>") CInfixlOp 1,COp ("Pretty","<$>") CInfixlOp 1,COp ("Pretty","<+>") CInfixlOp 1,COp ("Pretty","<>") CInfixlOp 1]
