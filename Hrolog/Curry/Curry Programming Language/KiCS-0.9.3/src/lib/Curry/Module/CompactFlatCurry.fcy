Prog "CompactFlatCurry" ["Directory","Distribution","FileGoodies","FlatCurry","List","Maybe","Prelude","RedBlackTree","SetRBT","Sort","TableRBT","Time","XML"] [Type ("CompactFlatCurry","Option") Public [] [Cons ("CompactFlatCurry","Verbose") 0 Public [],Cons ("CompactFlatCurry","Main") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CompactFlatCurry","Exports") 0 Public [],Cons ("CompactFlatCurry","InitFuncs") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Cons ("CompactFlatCurry","Required") 1 Public [TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]],Cons ("CompactFlatCurry","Import") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("CompactFlatCurry","RequiredSpec") Public [] [Cons ("CompactFlatCurry","AlwaysReq") 1 Private [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("CompactFlatCurry","Requires") 2 Private [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]] [Func ("CompactFlatCurry","isMainOption") 1 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CompactFlatCurry","Main") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CompactFlatCurry","Exports") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CompactFlatCurry","InitFuncs") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CompactFlatCurry","Required") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CompactFlatCurry","Import") [5]) (Comb ConsCall ("Prelude","False") [])])),Func ("CompactFlatCurry","getMainFuncFromOptions") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("CompactFlatCurry","Main") [4]) (Var 4),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Comb FuncCall ("CompactFlatCurry","getMainFuncFromOptions") [Var 3]),Branch (Pattern ("CompactFlatCurry","Exports") []) (Comb FuncCall ("CompactFlatCurry","getMainFuncFromOptions") [Var 3]),Branch (Pattern ("CompactFlatCurry","InitFuncs") [5]) (Comb FuncCall ("CompactFlatCurry","getMainFuncFromOptions") [Var 3]),Branch (Pattern ("CompactFlatCurry","Required") [6]) (Comb FuncCall ("CompactFlatCurry","getMainFuncFromOptions") [Var 3]),Branch (Pattern ("CompactFlatCurry","Import") [7]) (Comb FuncCall ("CompactFlatCurry","getMainFuncFromOptions") [Var 3])])])),Func ("CompactFlatCurry","getRequiredFromOptions") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []])) (Rule [1] (Comb FuncCall ("Prelude","concat") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("CompactFlatCurry","getRequiredFromOptions._#lambda6") [],Comb ConsCall ("Prelude","[]") [],Var 1]])),Func ("CompactFlatCurry","getRequiredFromOptions._#lambda6") 2 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("CompactFlatCurry","Required") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Var 2),Branch (Pattern ("CompactFlatCurry","Main") [4]) (Var 2),Branch (Pattern ("CompactFlatCurry","Exports") []) (Var 2),Branch (Pattern ("CompactFlatCurry","InitFuncs") [5]) (Var 2),Branch (Pattern ("CompactFlatCurry","Import") [6]) (Var 2)])),Func ("CompactFlatCurry","addImport2Options") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("CompactFlatCurry","Import") [],Comb FuncCall ("List","nub") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","addImport2Options.alwaysReqMod.21") []],Comb FuncCall ("CompactFlatCurry","getRequiredFromOptions") [Var 1]]]]])),Func ("CompactFlatCurry","addImport2Options.alwaysReqMod.21") 1 Private (FuncType (TCons ("CompactFlatCurry","RequiredSpec") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CompactFlatCurry","AlwaysReq") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("CompactFlatCurry","Requires") [5,6]) (Comb ConsCall ("Prelude","[]") [])])),Func ("CompactFlatCurry","requires") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("CompactFlatCurry","RequiredSpec") []))) (Rule [1,2] (Comb ConsCall ("CompactFlatCurry","Requires") [Var 1,Var 2])),Func ("CompactFlatCurry","alwaysRequired") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("CompactFlatCurry","RequiredSpec") [])) (Rule [1] (Comb ConsCall ("CompactFlatCurry","AlwaysReq") [Var 1])),Func ("CompactFlatCurry","defaultRequired") 0 Public (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","alwaysRequired") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("CompactFlatCurry","requires") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'K'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'K'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]])),Func ("CompactFlatCurry","prelude") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("CompactFlatCurry","getRequiredInModule") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","getRequiredInModule.getImpReq.38") [Var 2]],Var 1])),Func ("CompactFlatCurry","getRequiredInModule.getImpReq.38") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CompactFlatCurry","RequiredSpec") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("CompactFlatCurry","AlwaysReq") [3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("CompactFlatCurry","Requires") [6,7]) (Comb ConsCall ("Prelude","[]") [])])),Func ("CompactFlatCurry","getImplicitlyRequired") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","getImplicitlyRequired.getImpReq.46") [Var 2]],Var 1])),Func ("CompactFlatCurry","getImplicitlyRequired.getImpReq.46") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CompactFlatCurry","RequiredSpec") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("CompactFlatCurry","AlwaysReq") [3]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("CompactFlatCurry","Requires") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("CompactFlatCurry","defaultRequiredTypes") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("CompactFlatCurry","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("CompactFlatCurry","generateCompactFlatCurryFile") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","computeCompactFlatCurry") [Var 1,Var 2],Comb (FuncPartCall 1) ("CompactFlatCurry","generateCompactFlatCurryFile._#lambda8") [Var 3]])),Func ("CompactFlatCurry","generateCompactFlatCurryFile._#lambda8") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("FlatCurry","writeFCY") [Var 1,Var 2],Comb FuncCall ("Prelude","done") []])),Func ("CompactFlatCurry","computeCompactFlatCurry") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("CompactFlatCurry","addImport2Options") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb ConsCall ("CompactFlatCurry","Exports") []],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CompactFlatCurry","isMainOption") []],Var 3]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStr") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","readCurrentFlatCurry") [Var 2],Comb (FuncPartCall 1) ("CompactFlatCurry","computeCompactFlatCurry._#lambda9") [Var 3]]])]))),Func ("CompactFlatCurry","computeCompactFlatCurry._#lambda9") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","makeCompactFlatCurry") [Var 2,Var 1],Comb (FuncPartCall 1) ("CompactFlatCurry","computeCompactFlatCurry._#lambda9._#lambda10") []])),Func ("CompactFlatCurry","computeCompactFlatCurry._#lambda9._#lambda10") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","length") [Comb FuncCall ("CompactFlatCurry","moduleFuns") [Var 1]]]]],Comb FuncCall ("Prelude","return") [Var 1]])),Func ("CompactFlatCurry","makeCompactFlatCurry") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","requiredInCompactProg") [Var 1,Var 2],Comb (FuncPartCall 1) ("CompactFlatCurry","makeCompactFlatCurry._#lambda11") [Var 1,Var 2]])),Func ("CompactFlatCurry","makeCompactFlatCurry._#lambda11") 3 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Let [(7,Comb FuncCall ("CompactFlatCurry","extendFuncTable") [Comb FuncCall ("TableRBT","emptyTableRBT") [Comb (FuncPartCall 2) ("CompactFlatCurry","leqQName") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","moduleFuns") []],Var 6]])] (Let [(8,Comb FuncCall ("CompactFlatCurry","getRequiredFromOptions") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","getRequiredInModule") [Var 8]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CompactFlatCurry","moduleName") [],Var 6]])] (Let [(10,Comb FuncCall ("Prelude","++") [Var 4,Var 9])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","getCalledFuncs") [Var 8,Var 5,Var 6,Var 7,Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("CompactFlatCurry","leqQName") []],Var 10],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("CompactFlatCurry","leqQName") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("CompactFlatCurry","leqQName") []],Var 10],Comb (FuncPartCall 1) ("CompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12") [Var 1]])))))])),Func ("CompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","+") [],Lit (Intc  0),Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","length") [],Comb (FuncPartCall 1) ("CompactFlatCurry","moduleFuns") []],Var 3]]]]],Let [(7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CompactFlatCurry","functionName") [],Var 4])] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("FlatCurry","Prog") [Comb FuncCall ("CompactFlatCurry","moduleName") [Var 1],Comb ConsCall ("Prelude","[]") [],Let [(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","moduleTypes") []],Var 3])] (Let [(9,Comb FuncCall ("CompactFlatCurry","extendTConsWithConsType") [Var 5,Var 6,Var 8])] (Let [(10,Comb FuncCall ("CompactFlatCurry","requiredDatatypes") [Var 9,Var 8])] (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda13") [Var 10],Var 8]))),Var 4,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda14") [Var 7],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","moduleOps") []],Var 3]]]])])])),Func ("CompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda13") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Comb FuncCall ("CompactFlatCurry","tconsName") [Var 2]],Var 1])),Func ("CompactFlatCurry","makeCompactFlatCurry._#lambda11._#lambda12._#lambda14") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Op") [3,4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Var 1])])),Func ("CompactFlatCurry","requiredDatatypes") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","newTypeConsOfTDecl") [Var 1]],Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CompactFlatCurry","requiredDatatypes") [Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 1,Var 3],Var 2])]))),Func ("CompactFlatCurry","newTypeConsOfTDecl") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","TypeSyn") [3,4,5,6]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 3],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CompactFlatCurry","newTypeConsOfTDecl._#lambda15") [Var 1],Comb FuncCall ("CompactFlatCurry","allTypesOfTExpr") [Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("FlatCurry","Type") [7,8,9,10]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 7],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CompactFlatCurry","newTypeConsOfTDecl._#lambda16") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","newTypeConsOfTDecl._#lambda17") []],Var 10]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("CompactFlatCurry","newTypeConsOfTDecl._#lambda15") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 2],Var 1]])),Func ("CompactFlatCurry","newTypeConsOfTDecl._#lambda16") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 2],Var 1]])),Func ("CompactFlatCurry","newTypeConsOfTDecl._#lambda17") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","allTypesOfTExpr") []],Var 5])])),Func ("CompactFlatCurry","extendTConsWithConsType") 3 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","TypeSyn") [6,7,8,9]) (Comb FuncCall ("CompactFlatCurry","extendTConsWithConsType") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 6],Var 2],Var 5]),Branch (Pattern ("FlatCurry","Type") [10,11,12,13]) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 10],Comb FuncCall ("CompactFlatCurry","defaultRequiredTypes") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CompactFlatCurry","extendTConsWithConsType._#lambda18") [Var 1]],Var 13]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CompactFlatCurry","extendTConsWithConsType") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 10],Var 2],Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CompactFlatCurry","extendTConsWithConsType") [Var 1,Var 2,Var 5])])])])),Func ("CompactFlatCurry","extendTConsWithConsType._#lambda18") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Comb FuncCall ("CompactFlatCurry","consName") [Var 2]],Var 1])),Func ("CompactFlatCurry","extendFuncTable") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("CompactFlatCurry","extendFuncTable._#lambda19") [],Var 1,Var 2])),Func ("CompactFlatCurry","extendFuncTable._#lambda19") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TableRBT","updateRBT") [Comb FuncCall ("CompactFlatCurry","functionName") [Var 1],Var 1],Var 2])),Func ("CompactFlatCurry","requiredInCompactProg") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","Option") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("List","nub") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("CompactFlatCurry","requiredInCompactProg._#lambda22") [],Comb ConsCall ("Prelude","[]") [],Var 2]])] (Let [(4,Comb FuncCall ("CompactFlatCurry","moduleName") [Var 1])] (Let [(5,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("CompactFlatCurry","requiredInCompactProg._#lambda26") [],Comb ConsCall ("Prelude","[]") [],Var 2])] (Let [(6,Comb FuncCall ("CompactFlatCurry","exportedFuncNames") [Comb FuncCall ("CompactFlatCurry","moduleFuns") [Var 1]])] (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb FuncCall ("Sort","leqString") []]])] (Case  Rigid (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 5]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry") []],Var 3],Comb (FuncPartCall 1) ("CompactFlatCurry","requiredInCompactProg._#lambda28") [Var 3,Var 5,Var 1,Var 7]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb ConsCall ("CompactFlatCurry","Exports") []],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry") []],Var 3],Comb (FuncPartCall 1) ("CompactFlatCurry","requiredInCompactProg._#lambda29") [Var 3,Var 6,Var 1,Var 7]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CompactFlatCurry","isMainOption") []],Var 2]) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("CompactFlatCurry","getMainFuncFromOptions") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 8]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CompactFlatCurry","functionName") [],Comb FuncCall ("CompactFlatCurry","moduleFuns") [Var 1]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry") []],Var 3],Comb (FuncPartCall 1) ("CompactFlatCurry","requiredInCompactProg._#lambda30") [Var 8,Var 3,Var 1,Var 4,Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 8,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]])])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry") []],Comb FuncCall ("List","nub") [Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("CompactFlatCurry","moduleImports") [Var 1]]]],Comb (FuncPartCall 1) ("CompactFlatCurry","requiredInCompactProg._#lambda31") [Var 6,Var 1,Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]))))))),Func ("CompactFlatCurry","requiredInCompactProg._#lambda22") 2 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("CompactFlatCurry","Import") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Var 2),Branch (Pattern ("CompactFlatCurry","Main") [4]) (Var 2),Branch (Pattern ("CompactFlatCurry","Exports") []) (Var 2),Branch (Pattern ("CompactFlatCurry","InitFuncs") [5]) (Var 2),Branch (Pattern ("CompactFlatCurry","Required") [6]) (Var 2)])),Func ("CompactFlatCurry","requiredInCompactProg._#lambda26") 2 Private (FuncType (TCons ("CompactFlatCurry","Option") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("CompactFlatCurry","InitFuncs") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("CompactFlatCurry","Verbose") []) (Var 2),Branch (Pattern ("CompactFlatCurry","Main") [4]) (Var 2),Branch (Pattern ("CompactFlatCurry","Exports") []) (Var 2),Branch (Pattern ("CompactFlatCurry","Required") [5]) (Var 2),Branch (Pattern ("CompactFlatCurry","Import") [6]) (Var 2)])),Func ("CompactFlatCurry","requiredInCompactProg.add2mainmodset.118") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 1,Var 2])),Func ("CompactFlatCurry","requiredInCompactProg._#lambda28") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","concat") [Var 2],Comb FuncCall ("CompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 4,Var 1],Comb ConsCall ("Prelude",":") [Var 3,Var 5]]])),Func ("CompactFlatCurry","requiredInCompactProg._#lambda29") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("List","nub") [Var 2],Comb FuncCall ("CompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 4,Var 1],Comb ConsCall ("Prelude",":") [Var 3,Var 5]]])),Func ("CompactFlatCurry","requiredInCompactProg._#lambda30") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 5,Var 2],Comb ConsCall ("Prelude",":") [Var 3,Var 6]]])),Func ("CompactFlatCurry","requiredInCompactProg._#lambda31") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("List","nub") [Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("CompactFlatCurry","exportedFuncNames") [],Comb (FuncPartCall 1) ("CompactFlatCurry","moduleFuns") []]],Var 4]]],Comb FuncCall ("CompactFlatCurry","requiredInCompactProg.add2mainmodset.118") [Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CompactFlatCurry","moduleName") [],Var 4]],Comb ConsCall ("Prelude",":") [Var 2,Var 4]]])),Func ("CompactFlatCurry","exportedFuncNames") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CompactFlatCurry","exportedFuncNames._#lambda32") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CompactFlatCurry","exportedFuncNames._#lambda33") [],Var 1]])),Func ("CompactFlatCurry","exportedFuncNames._#lambda32") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Var 2)])),Func ("CompactFlatCurry","exportedFuncNames._#lambda33") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("FlatCurry","Public") []])])),Func ("CompactFlatCurry","getCalledFuncs") 8 Private (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]))))))))) (Rule [1,2,3,4,5,6,7,8] (Case  Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,,)") [Var 3,Comb ConsCall ("Prelude","[]") [],Var 6,Var 7]]),Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 11],Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","readCurrentFlatCurry") [Var 11],Comb (FuncPartCall 1) ("CompactFlatCurry","getCalledFuncs._#lambda34") [Var 12,Var 10,Var 4,Var 6,Var 5,Var 2,Var 7,Var 11,Var 3,Var 1]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TableRBT","lookupRBT") [Comb ConsCall ("Prelude","(,)") [Var 11,Var 12]],Var 4],Comb ConsCall ("Prelude","Nothing") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CompactFlatCurry","getCalledFuncs") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 10]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TableRBT","lookupRBT") [Comb ConsCall ("Prelude","(,)") [Var 11,Var 12]],Var 4]])] (Let [(14,Comb FuncCall ("CompactFlatCurry","allFuncCalls") [Var 13])] (Let [(15,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CompactFlatCurry","getCalledFuncs._#lambda35") [Var 5],Var 14])] (Let [(16,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","getImplicitlyRequired") [Var 1]],Var 15])] (Let [(17,Comb FuncCall ("CompactFlatCurry","allConstructorsOfFunc") [Var 13])] (Let [(18,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CompactFlatCurry","getCalledFuncs._#lambda36") [Var 6],Var 17])] (Let [(19,Comb FuncCall ("CompactFlatCurry","allTypesOfFunc") [Var 13])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","getCalledFuncs") [Var 1,Var 2,Var 3,Var 4,Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 5,Comb FuncCall ("Prelude","++") [Var 15,Var 16]],Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 6,Var 17],Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 7,Var 19],Comb FuncCall ("Prelude","++") [Var 10,Comb FuncCall ("Prelude","++") [Var 15,Comb FuncCall ("Prelude","++") [Var 16,Var 18]]]],Comb (FuncPartCall 1) ("CompactFlatCurry","getCalledFuncs._#lambda37") [Var 13]])))))))),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("CompactFlatCurry","getCalledFuncs._#lambda34") 11 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","FuncDecl") []]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CompactFlatCurry","RequiredSpec") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])))))))))))) (Rule [1,2,3,4,5,6,7,8,9,10,11] (Let [(12,Comb FuncCall ("CompactFlatCurry","getRequiredInModule") [Var 10,Var 8])] (Comb FuncCall ("CompactFlatCurry","getCalledFuncs") [Var 10,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 8],Var 6],Comb ConsCall ("Prelude",":") [Var 11,Var 9],Comb FuncCall ("CompactFlatCurry","extendFuncTable") [Var 3,Comb FuncCall ("CompactFlatCurry","moduleFuns") [Var 11]],Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 5,Var 12],Var 4,Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 8,Var 1],Comb FuncCall ("Prelude","++") [Var 2,Var 12]]]))),Func ("CompactFlatCurry","getCalledFuncs._#lambda35") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 2],Var 1]])),Func ("CompactFlatCurry","getCalledFuncs._#lambda36") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 2],Var 1]])),Func ("CompactFlatCurry","getCalledFuncs._#lambda37") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,,)") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5,Var 6]])])),Func ("CompactFlatCurry","allFuncCalls") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","External") [7]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","Rule") [8,9]) (Comb FuncCall ("List","nub") [Comb FuncCall ("CompactFlatCurry","allFuncCallsOfExpr") [Var 9]])])])),Func ("CompactFlatCurry","allFuncCallsOfExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","allFuncCallsOfExpr") []],Var 6])] (Case  Rigid (Var 4) [Branch (Pattern ("FlatCurry","FuncCall") []) (Comb ConsCall ("Prelude",":") [Var 5,Var 7]),Branch (Pattern ("FlatCurry","FuncPartCall") [8]) (Comb ConsCall ("Prelude",":") [Var 5,Var 7]),Branch (Pattern ("FlatCurry","ConsCall") []) (Var 7),Branch (Pattern ("FlatCurry","ConsPartCall") [9]) (Var 7)])),Branch (Pattern ("FlatCurry","Free") [10,11]) (Comb FuncCall ("CompactFlatCurry","allFuncCallsOfExpr") [Var 11]),Branch (Pattern ("FlatCurry","Let") [12,13]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("CompactFlatCurry","allFuncCallsOfExpr") [],Comb (FuncPartCall 1) ("Prelude","snd") []]],Var 12],Comb FuncCall ("CompactFlatCurry","allFuncCallsOfExpr") [Var 13]]),Branch (Pattern ("FlatCurry","Or") [14,15]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("CompactFlatCurry","allFuncCallsOfExpr") [Var 14],Comb FuncCall ("CompactFlatCurry","allFuncCallsOfExpr") [Var 15]]),Branch (Pattern ("FlatCurry","Case") [16,17,18]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("CompactFlatCurry","allFuncCallsOfExpr") [Var 17],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","allFuncCallsOfBranchExpr") []],Var 18]])])),Func ("CompactFlatCurry","allFuncCallsOfBranchExpr") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("CompactFlatCurry","allFuncCallsOfExpr") [Var 3])])),Func ("CompactFlatCurry","allConstructorsOfFunc") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","External") [7]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","Rule") [8,9]) (Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 9])])])),Func ("CompactFlatCurry","allConsOfExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CompactFlatCurry","unionMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","allConsOfExpr") []],Var 6])] (Case  Rigid (Var 4) [Branch (Pattern ("FlatCurry","ConsCall") []) (Comb ConsCall ("Prelude",":") [Var 5,Var 7]),Branch (Pattern ("FlatCurry","ConsPartCall") [8]) (Comb ConsCall ("Prelude",":") [Var 5,Var 7]),Branch (Pattern ("FlatCurry","FuncCall") []) (Var 7),Branch (Pattern ("FlatCurry","FuncPartCall") [9]) (Var 7)])),Branch (Pattern ("FlatCurry","Free") [10,11]) (Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 11]),Branch (Pattern ("FlatCurry","Let") [12,13]) (Comb FuncCall ("List","union") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CompactFlatCurry","unionMap") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("CompactFlatCurry","allConsOfExpr") [],Comb (FuncPartCall 1) ("Prelude","snd") []]],Var 12],Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 13]]),Branch (Pattern ("FlatCurry","Or") [14,15]) (Comb FuncCall ("List","union") [Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 14],Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 15]]),Branch (Pattern ("FlatCurry","Case") [16,17,18]) (Comb FuncCall ("List","union") [Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 17],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CompactFlatCurry","unionMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","allConsOfExpr.consOfBranch.252") []],Var 18]])])),Func ("CompactFlatCurry","allConsOfExpr.consOfBranch.252") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","LPattern") [4]) (Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 3]),Branch (Pattern ("FlatCurry","Pattern") [5,6]) (Comb FuncCall ("List","union") [Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CompactFlatCurry","allConsOfExpr") [Var 3]])])])),Func ("CompactFlatCurry","allTypesOfFunc") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("CompactFlatCurry","allTypesOfTExpr") [Var 5])])),Func ("CompactFlatCurry","allTypesOfTExpr") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","FuncType") [3,4]) (Comb FuncCall ("List","union") [Comb FuncCall ("CompactFlatCurry","allTypesOfTExpr") [Var 3],Comb FuncCall ("CompactFlatCurry","allTypesOfTExpr") [Var 4]]),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Comb FuncCall ("List","union") [Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CompactFlatCurry","unionMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","allTypesOfTExpr") []],Var 6]])])),Func ("CompactFlatCurry","unionMap") 1 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","union") [],Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("CompactFlatCurry","functionName") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Var 2)])),Func ("CompactFlatCurry","consName") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Var 2)])),Func ("CompactFlatCurry","tconsName") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Var 2),Branch (Pattern ("FlatCurry","TypeSyn") [6,7,8,9]) (Var 6)])),Func ("CompactFlatCurry","moduleImports") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 3)])),Func ("CompactFlatCurry","moduleTypes") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 4)])),Func ("CompactFlatCurry","moduleOps") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 6)])),Func ("CompactFlatCurry","moduleName") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 2)])),Func ("CompactFlatCurry","moduleFuns") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 5)])),Func ("CompactFlatCurry","leqQName") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","cmpString") [],Var 3],Var 5])] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("Prelude","LT") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("Prelude","EQ") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","leqString") [],Var 4],Var 6]]]))])])),Func ("CompactFlatCurry","readCurrentFlatCurry") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStr") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","findSourceFileInLoadPath") [Var 1],Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry._#lambda40") []]])),Func ("CompactFlatCurry","readCurrentFlatCurry._#lambda40") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 1]],Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41") [Var 1]])),Func ("CompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","not") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurry") [Var 1],Comb (FuncPartCall 1) ("CompactFlatCurry","processPrimitives") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","getSourceModificationTime") [Var 1],Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42") [Var 1]])])),Func ("CompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 1]],Comb (FuncPartCall 1) ("CompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42._#lambda43") [Var 2,Var 1]])),Func ("CompactFlatCurry","readCurrentFlatCurry._#lambda40._#lambda41._#lambda42._#lambda43") 3 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude",">") [Comb FuncCall ("Time","clockTimeToInt") [Var 1],Comb FuncCall ("Time","clockTimeToInt") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurry") [Var 2],Comb (FuncPartCall 1) ("CompactFlatCurry","processPrimitives") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurryFile") [Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 2]],Comb (FuncPartCall 1) ("CompactFlatCurry","processPrimitives") [Var 2]])])),Func ("CompactFlatCurry","getSourceModificationTime") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Time","ClockTime") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb (FuncPartCall 1) ("CompactFlatCurry","getSourceModificationTime._#lambda44") [Var 1]])),Func ("CompactFlatCurry","getSourceModificationTime._#lambda44") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Time","ClockTime") []]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Directory","getModificationTime") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Directory","getModificationTime") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]])])),Func ("CompactFlatCurry","findSourceFileInLoadPath") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Distribution","getLoadPathForFile") [Var 1],Comb (FuncPartCall 1) ("CompactFlatCurry","findSourceFileInLoadPath._#lambda45") [Var 1]])),Func ("CompactFlatCurry","findSourceFileInLoadPath._#lambda45") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FileGoodies","lookupFileInPath") [Comb FuncCall ("FileGoodies","baseName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]],Var 2],Comb (FuncPartCall 1) ("CompactFlatCurry","findSourceFileInLoadPath._#lambda45._#lambda46") [Var 1]])),Func ("CompactFlatCurry","findSourceFileInLoadPath._#lambda45._#lambda46") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("FileGoodies","stripSuffix") []],Var 2])),Func ("CompactFlatCurry","processPrimitives") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompactFlatCurry","readPrimSpec") [Comb FuncCall ("CompactFlatCurry","moduleName") [Var 2],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb (FuncPartCall 1) ("CompactFlatCurry","processPrimitives._#lambda47") [Var 2]])),Func ("CompactFlatCurry","processPrimitives._#lambda47") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","IO") [TCons ("FlatCurry","Prog") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("CompactFlatCurry","mergePrimSpecIntoModule") [Var 2,Var 1]])),Func ("CompactFlatCurry","mergePrimSpecIntoModule") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb ConsCall ("FlatCurry","Prog") [Var 3,Var 4,Var 5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CompactFlatCurry","mergePrimSpecIntoFunc") [Var 1]],Var 6],Var 7])])),Func ("CompactFlatCurry","mergePrimSpecIntoFunc") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("Prelude","lookup") [Var 3,Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("Prelude","Nothing") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Func") [Var 3,Var 4,Var 5,Var 6,Var 7],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(9,Var 8)] (Let [(10,Comb FuncCall ("CompactFlatCurry","mergePrimSpecIntoFunc._#selFP3#lib") [Var 9])] (Let [(11,Comb FuncCall ("CompactFlatCurry","mergePrimSpecIntoFunc._#selFP4#entry") [Var 9])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 11]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Func") [Var 3,Var 4,Var 5,Var 6,Comb ConsCall ("FlatCurry","External") [Comb FuncCall ("Prelude","++") [Var 10,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Var 11]]]],Comb ConsCall ("Prelude","[]") []])]))))]))])),Func ("CompactFlatCurry","mergePrimSpecIntoFunc._#selFP3#lib") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Var 3)])])),Func ("CompactFlatCurry","mergePrimSpecIntoFunc._#selFP4#entry") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Var 4)])])),Func ("CompactFlatCurry","readPrimSpec") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 2],Comb (FuncPartCall 1) ("CompactFlatCurry","readPrimSpec._#lambda48") [Var 1,Var 2]])),Func ("CompactFlatCurry","readPrimSpec._#lambda48") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("XML","readXmlFile") [Var 2],Comb (FuncPartCall 1) ("CompactFlatCurry","readPrimSpec._#lambda48._#lambda49") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","[]") []])])),Func ("CompactFlatCurry","readPrimSpec._#lambda48._#lambda49") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("CompactFlatCurry","xml2primtrans") [Var 1,Var 2]])),Func ("CompactFlatCurry","xml2primtrans") 2 Private (FuncType (TVar 0) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("XML","XElem") [3,4,5]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  't')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  's')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CompactFlatCurry","xml2primtrans.xml2prim.358") [Var 1],Var 5])])])])])])])])])])])])])])])])])])])])])])])])),Func ("CompactFlatCurry","xml2primtrans.xml2prim.358") 2 Private (FuncType (TVar 248) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 248,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("XML","XElem") [3,4,5]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  't')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","(,)") [26,27]) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (Pattern ("XML","XElem") [38,39,40]) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 49) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 50) [Branch (Pattern ("Prelude",":") [51,52]) (Case  Flex (Var 51) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 52) [Branch (Pattern ("Prelude",":") [53,54]) (Case  Flex (Var 53) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 54) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 39) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 37) [Branch (Pattern ("Prelude",":") [55,56]) (Case  Flex (Var 55) [Branch (Pattern ("XML","XElem") [57,58,59]) (Case  Flex (Var 57) [Branch (Pattern ("Prelude",":") [60,61]) (Case  Flex (Var 60) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 61) [Branch (Pattern ("Prelude",":") [62,63]) (Case  Flex (Var 62) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 63) [Branch (Pattern ("Prelude",":") [64,65]) (Case  Flex (Var 64) [Branch (LPattern (Charc  't')) (Case  Flex (Var 65) [Branch (Pattern ("Prelude",":") [66,67]) (Case  Flex (Var 66) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 67) [Branch (Pattern ("Prelude",":") [68,69]) (Case  Flex (Var 68) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 69) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 58) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 56) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 27],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("XML","textOfXml") [Var 40],Comb FuncCall ("XML","textOfXml") [Var 59]]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'i')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [70,71]) (Case  Flex (Var 70) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 71) [Branch (Pattern ("Prelude",":") [72,73]) (Case  Flex (Var 72) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 73) [Branch (Pattern ("Prelude",":") [74,75]) (Case  Flex (Var 74) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 75) [Branch (Pattern ("Prelude",":") [76,77]) (Case  Flex (Var 76) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 77) [Branch (Pattern ("Prelude",":") [78,79]) (Case  Flex (Var 78) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 79) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [80,81]) (Case  Flex (Var 80) [Branch (Pattern ("Prelude","(,)") [82,83]) (Case  Flex (Var 82) [Branch (Pattern ("Prelude",":") [84,85]) (Case  Flex (Var 84) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 85) [Branch (Pattern ("Prelude",":") [86,87]) (Case  Flex (Var 86) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 87) [Branch (Pattern ("Prelude",":") [88,89]) (Case  Flex (Var 88) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 89) [Branch (Pattern ("Prelude",":") [90,91]) (Case  Flex (Var 90) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 91) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 83],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]])])])])])])])])])])])])])])])])])])])])])])])])])])]))] [Op ("CompactFlatCurry","requires") InfixOp 0]