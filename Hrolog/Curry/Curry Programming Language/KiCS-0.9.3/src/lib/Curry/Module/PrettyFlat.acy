CurryProg "PrettyFlat"
 ["Prelude","Char","Maybe","Pretty","FlatCurry","FlatCurryGoodies","StyledText","System"]
 [CTypeSyn ("PrettyFlat","Precs") Public [] (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("FlatCurry","QName") [],CTCons ("Prelude","Int") []]])]
 [CFunc ("PrettyFlat","<$>>") 2 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"d1"),CPVar (1,"d2")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CVar (0,"d1"))) (CSymbol ("Pretty","line")))) (CVar (1,"d2")))] []]),
  CFunc ("PrettyFlat","app") 2 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"d"),CPVar (1,"ds")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"ds")))) (CVar (0,"d"))) (CApply (CSymbol ("PrettyFlat","block")) (CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","space"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"d"))) (CVar (1,"ds"))))))] []]),
  CFunc ("PrettyFlat","arrow") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyFlat","bar") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","char")) (CLit (CCharc '|'))))] []]),
  CFunc ("PrettyFlat","block") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","group"))) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1))))] []]),
  CFunc ("PrettyFlat","branchDoc") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("FlatCurry","BranchExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPComb ("FlatCurry","Branch") [CPVar (2,"pat"),CPVar (3,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyFlat","def")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyFlat","patternDoc")) (CVar (1,"mod"))) (CVar (2,"pat")))) (CSymbol ("PrettyFlat","arrow")))) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (0,"pr"))) (CLit (CIntc 0))) (CVar (1,"mod"))) (CSymbol ("Prelude","False"))) (CVar (3,"e")))))] []]),
  CFunc ("PrettyFlat","caseTypeDoc") 1 Public (CFuncType (CTCons ("FlatCurry","CaseType") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Rigid") []] [(CSymbol ("Prelude","success"),CSymbol ("Pretty","empty"))] [],CRule [CPComb ("FlatCurry","Flex") []] [(CSymbol ("Prelude","success"),CSymbol ("Pretty","empty"))] []]),
  CFunc ("PrettyFlat","consDeclDoc") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod"),CPComb ("FlatCurry","Cons") [CPVar (1,"name"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("PrettyFlat","app")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (0,"mod"))) (CVar (1,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (0,"mod"))) (CSymbol ("Prelude","True")))) (CVar (4,"args"))))] []]),
  CFunc ("PrettyFlat","consDeclsDoc") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("PrettyFlat","operator")) (CSymbol ("Pretty","equals")))) (CSymbol ("Pretty","space")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("PrettyFlat","bar"))) (CSymbol ("Pretty","space"))))) (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (1,"x0"))) (CSymbol ("Pretty","space"))))) (CApply (CSymbol ("PrettyFlat","consDeclDoc")) (CVar (0,"mod"))))))] []]),
  CFunc ("PrettyFlat","consname") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("StyledText","greenDoc"))) (CSymbol ("Pretty","text")))] []]),
  CFunc ("PrettyFlat","correctName") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (1,"name'")) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CApply (CApply (CSymbol ("Prelude","flip")) (CSymbol ("Prelude","elem"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"name"))) []] (CCase (CVar (1,"name'")) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc '_'),CPVar (2,"xs")]) (CVar (2,"xs")),CBranch (CPVar (3,"_")) (CVar (1,"name'"))]))] []]),
  CFunc ("PrettyFlat","dcolon") 0 Public (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyFlat","def") 3 Public (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"params"),CPVar (2,"body")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","block")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (0,"name"))) (CVar (3,"paramDoc")))) (CVar (2,"body"))))] [CLocalPat (CPVar (3,"paramDoc")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"params")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CSymbol ("Pretty","align")) (CApply (CSymbol ("Pretty","fillSep")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyFlat","varDoc"))) (CVar (1,"params"))))))) []]]),
  CFunc ("PrettyFlat","elimApp") 0 Public (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("FlatCurry","Expr") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurryGoodies","updCombs")) (CSymbol ("PrettyFlat","elim")))] [CLocalFunc (CFunc ("PrettyFlat","elim") 3 Private (CFuncType (CTCons ("FlatCurry","CombType") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]) (CTCons ("FlatCurry","Expr") [])))) (CRules CFlex [CRule [CPVar (0,"ct"),CPVar (1,"name"),CPVar (2,"args")] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"ct"))) (CSymbol ("FlatCurry","FuncCall")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyFlat","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("FlatCurryGoodies","isComb")) (CApply (CSymbol ("Prelude","head")) (CVar (2,"args"))))) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CSymbol ("FlatCurryGoodies","combName")) (CApply (CSymbol ("Prelude","head")) (CVar (2,"args"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyFlat","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))),CApply (CApply (CSymbol ("PrettyFlat","extend")) (CApply (CSymbol ("Prelude","head")) (CVar (2,"args")))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (2,"args"))) (CLit (CIntc 1)))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CVar (0,"ct"))) (CVar (1,"name"))) (CVar (2,"args")))] []])),CLocalFunc (CFunc ("PrettyFlat","extend") 2 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("FlatCurry","Expr") []))) (CRules CFlex [CRule [CPComb ("FlatCurry","Comb") [CPVar (0,"ct"),CPVar (1,"name"),CPVar (2,"args")],CPVar (3,"arg")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CVar (0,"ct"))) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"args"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"arg"))) (CSymbol ("Prelude","[]")))))] []]))]]),
  CFunc ("PrettyFlat","expDoc") 5 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Pretty","Doc") [])))))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"_"),CPVar (2,"mod"),CPVar (3,"br"),CPVar (4,"exp")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc2")) (CVar (0,"pr"))) (CLit (CIntc 0))) (CVar (2,"mod"))) (CVar (3,"br"))) (CVar (4,"exp")))) (CLambda [CPVar (5,"l")] (CApply (CSymbol ("Pretty","list")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (0,"pr"))) (CLit (CIntc 0))) (CVar (2,"mod"))) (CSymbol ("Prelude","False")))) (CVar (5,"l")))))) (CApply (CSymbol ("PrettyFlat","toList")) (CVar (4,"exp"))))) (CLambda [CPVar (6,"s")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (6,"s")))) (CApply (CSymbol ("PrettyFlat","consname")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("PrettyFlat","literal")) (CApply (CSymbol ("Pretty","dquotes")) (CApply (CSymbol ("Pretty","text")) (CVar (6,"s")))))))) (CApply (CSymbol ("PrettyFlat","toString")) (CVar (4,"exp"))))] []]),
  CFunc ("PrettyFlat","expDoc2") 5 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Pretty","Doc") [])))))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPComb ("FlatCurry","Var") [CPVar (4,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","varDoc")) (CVar (4,"n")))] [],CRule [CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"_"),CPVar (8,"_"),CPComb ("FlatCurry","Lit") [CPVar (9,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","litDoc")) (CVar (9,"l")))] [],CRule [CPVar (10,"pr"),CPVar (11,"p"),CPVar (12,"mod"),CPVar (13,"br"),CPComb ("FlatCurry","Comb") [CPVar (14,"ct"),CPVar (15,"name"),CPVar (16,"args")]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (14,"ct"))) (CSymbol ("FlatCurry","FuncCall")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (15,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyFlat","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyFlat","par")) (CVar (13,"br")))) (CApply (CApply (CSymbol ("PrettyFlat","app")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (10,"pr"))) (CLit (CIntc 0))) (CVar (12,"mod"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (16,"args"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (10,"pr"))) (CLit (CIntc 0))) (CVar (12,"mod"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (16,"args"))) (CLit (CIntc 1))))) (CSymbol ("Prelude","[]"))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (14,"ct"))) (CSymbol ("FlatCurry","ConsCall")))) (CApply (CSymbol ("PrettyFlat","isTupleName")) (CVar (15,"name"))),CApply (CSymbol ("Pretty","tupled")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (10,"pr"))) (CLit (CIntc 0))) (CVar (12,"mod"))) (CSymbol ("Prelude","False")))) (CVar (16,"args")))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("PrettyFlat","isInfixName")) (CVar (15,"name")))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (16,"args")))) (CLit (CIntc 2))),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","align"))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","precFillEncloseSep")) (CVar (19,"pOp"))) (CVar (11,"p"))) (CVar (17,"lbr"))) (CVar (18,"rbr"))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (10,"pr"))) (CVar (19,"pOp"))) (CVar (12,"mod"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (16,"args"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","snd")) (CVar (15,"name"))))))) (CSymbol ("Pretty","space")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (10,"pr"))) (CVar (19,"pOp"))) (CVar (12,"mod"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (16,"args"))) (CLit (CIntc 1))))) (CSymbol ("Prelude","[]"))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyFlat","par")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (16,"args"))))) (CVar (13,"br"))))) (CApply (CApply (CSymbol ("PrettyFlat","app")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (12,"mod"))) (CVar (15,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (10,"pr"))) (CLit (CIntc 0))) (CVar (12,"mod"))) (CSymbol ("Prelude","True")))) (CVar (16,"args")))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (17,"lbr"),CPVar (18,"rbr")]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (13,"br"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Pretty","lparen"))) (CSymbol ("Pretty","rparen")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty")))) [],CLocalPat (CPVar (19,"pOp")) (CCase (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (15,"name"))) (CVar (10,"pr"))) [CBranch (CPComb ("Prelude","Just") [CPVar (20,"pr")]) (CVar (20,"pr")),CBranch (CPComb ("Prelude","Nothing") []) (CLit (CIntc 0))]) []],CRule [CPVar (21,"pr"),CPVar (22,"_"),CPVar (23,"mod"),CPVar (24,"br"),CPComb ("FlatCurry","Let") [CPVar (25,"bs"),CPVar (26,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyFlat","par")) (CVar (24,"br")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CSymbol ("PrettyFlat","letBindsDoc")) (CVar (21,"pr"))) (CVar (23,"mod"))) (CVar (25,"bs"))))) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (21,"pr"))) (CLit (CIntc 0))) (CVar (23,"mod"))) (CSymbol ("Prelude","False"))) (CVar (26,"e"))))))] [],CRule [CPVar (27,"pr"),CPVar (28,"_"),CPVar (29,"mod"),CPVar (30,"br"),CPComb ("FlatCurry","Free") [CPVar (31,"vs"),CPVar (32,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyFlat","par")) (CVar (30,"br")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Pretty","align")) (CApply (CSymbol ("Pretty","fillSep")) (CApply (CApply (CSymbol ("Pretty","punctuate")) (CSymbol ("Pretty","comma"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyFlat","varDoc"))) (CVar (31,"vs")))))))) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (27,"pr"))) (CLit (CIntc 0))) (CVar (29,"mod"))) (CSymbol ("Prelude","False"))) (CVar (32,"e"))))))] [],CRule [CPVar (33,"pr"),CPVar (34,"_"),CPVar (35,"mod"),CPVar (36,"br"),CPComb ("FlatCurry","Or") [CPVar (37,"e1"),CPVar (38,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (33,"pr"))) (CLit (CIntc 0))) (CVar (35,"mod"))) (CVar (36,"br"))) (CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","FuncCall"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyFlat","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (37,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (38,"e2"))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPVar (39,"pr"),CPVar (40,"_"),CPVar (41,"mod"),CPVar (42,"br"),CPComb ("FlatCurry","Case") [CPVar (43,"ct"),CPVar (44,"e"),CPVar (45,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyFlat","par")) (CVar (42,"br")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("PrettyFlat","caseTypeDoc")) (CVar (43,"ct")))) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (39,"pr"))) (CLit (CIntc 0))) (CVar (41,"mod"))) (CSymbol ("Prelude","False"))) (CVar (44,"e")))))) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("PrettyFlat","layout")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyFlat","branchDoc")) (CVar (39,"pr"))) (CVar (41,"mod")))) (CVar (45,"bs")))))))] []]),
  CFunc ("PrettyFlat","exportedNames") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]))) (CRules CFlex [CRule [CPVar (0,"mod"),CPComb ("FlatCurry","Prog") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"types"),CPVar (4,"funcs"),CPVar (5,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyFlat","typeExpDoc"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("FlatCurry","Public"))) (CVar (6,"x0"))))) (CSymbol ("FlatCurryGoodies","typeVisibility")))) (CVar (3,"types"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("PrettyFlat","qname")) (CVar (0,"mod")))) (CSymbol ("FlatCurryGoodies","funcName")))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (7,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("FlatCurry","Public"))) (CVar (7,"x0"))))) (CSymbol ("FlatCurryGoodies","funcVisibility")))) (CVar (4,"funcs")))))] [CLocalFunc (CFunc ("PrettyFlat","typeExpDoc") 1 Private (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (6,"tdecl")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (7,"ecs")) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("FlatCurry","Public"))) (CVar (8,"x0"))))) (CSymbol ("FlatCurryGoodies","consVisibility")))) (CApply (CApply (CApply (CSymbol ("FlatCurryGoodies","trType")) (CLambda [CPVar (9,"_"),CPVar (10,"_"),CPVar (11,"_"),CPVar (12,"cs")] (CVar (12,"cs")))) (CLambda [CPVar (13,"_"),CPVar (14,"_"),CPVar (15,"_"),CPVar (16,"_")] (CSymbol ("Prelude","[]")))) (CVar (6,"tdecl")))) []] (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (0,"mod"))) (CApply (CSymbol ("FlatCurryGoodies","typeName")) (CVar (6,"tdecl"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (7,"ecs")))) (CSymbol ("Pretty","empty"))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))))] []]))]]),
  CFunc ("PrettyFlat","exportsDoc") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"xs")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","group")) (CApply (CApply (CSymbol ("Pretty","nest")) (CLit (CIntc 1))) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CSymbol ("Pretty","lparen"))) (CApply (CSymbol ("Pretty","align")) (CApply (CSymbol ("Pretty","fillSep")) (CApply (CApply (CSymbol ("Pretty","punctuate")) (CSymbol ("Pretty","comma"))) (CVar (0,"xs"))))))) (CSymbol ("Pretty","rparen")))))] []]),
  CFunc ("PrettyFlat","funcDoc") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("FlatCurry","FuncDecl") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPComb ("FlatCurry","Func") [CPVar (2,"name"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"typ"),CPVar (6,"rule")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CApply (CSymbol ("PrettyFlat","funcTypeDeclDoc")) (CVar (1,"mod"))) (CVar (2,"name"))) (CVar (5,"typ")))) (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","ruleDoc")) (CVar (0,"pr"))) (CVar (1,"mod"))) (CVar (2,"name"))) (CVar (6,"rule"))))] []]),
  CFunc ("PrettyFlat","funcTypeDeclDoc") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"mod"),CPVar (1,"name"),CPVar (2,"typ")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyFlat","def")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (0,"mod"))) (CVar (1,"name")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CApply (CSymbol ("PrettyFlat","funcTypeDoc")) (CVar (0,"mod"))) (CApply (CSymbol ("FlatCurryGoodies","argTypes")) (CVar (2,"typ")))) (CApply (CSymbol ("FlatCurryGoodies","resultType")) (CVar (2,"typ")))))] []]),
  CFunc ("PrettyFlat","funcTypeDoc") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []]) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"mod"),CPVar (1,"args"),CPVar (2,"res")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("PrettyFlat","dcolon"))) (CSymbol ("Pretty","space")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("PrettyFlat","arrow"))) (CSymbol ("Pretty","space")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (3,"x0"))) (CSymbol ("Pretty","space"))))) (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (0,"mod"))) (CSymbol ("Prelude","True"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"args"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"res"))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyFlat","funcsDoc") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","FuncDecl") []]) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPVar (2,"funcs")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","vcat")) (CApply (CApply (CSymbol ("Pretty","punctuate")) (CSymbol ("Pretty","line"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyFlat","funcDoc")) (CVar (0,"pr"))) (CVar (1,"mod")))) (CVar (2,"funcs")))))] []]),
  CFunc ("PrettyFlat","impsDoc") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"imps")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","vcat")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))))) (CVar (1,"x0"))))) (CSymbol ("PrettyFlat","consname")))) (CVar (0,"imps"))))] []]),
  CFunc ("PrettyFlat","infixIDs") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '%'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '^'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))] []]),
  CFunc ("PrettyFlat","isInfixName") 1 Public (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (2,"x0"))) (CSymbol ("PrettyFlat","infixIDs"))))) (CVar (1,"n")))] []]),
  CFunc ("PrettyFlat","isTupleName") 1 Public (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"mod"),CPVar (1,"name")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"mod"))) (CSymbol ("PrettyFlat","prelude")))) (CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (1,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyFlat","keyword") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("StyledText","magentaDoc"))) (CSymbol ("Pretty","text")))] []]),
  CFunc ("PrettyFlat","layout") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","align"))) (CApply (CSymbol ("Pretty","compose")) (CApply (CSymbol ("Pretty","combine")) (CApply (CSymbol ("Pretty","linesep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("PrettyFlat","letBindDoc") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("FlatCurry","Expr") []]) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPComb ("Prelude","(,)") [CPVar (2,"n"),CPVar (3,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","varDoc")) (CVar (2,"n")))) (CApply (CSymbol ("PrettyFlat","operator")) (CSymbol ("Pretty","equals"))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (0,"pr"))) (CLit (CIntc 0))) (CVar (1,"mod"))) (CSymbol ("Prelude","False"))) (CVar (3,"e"))))] []]),
  CFunc ("PrettyFlat","letBindsDoc") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("FlatCurry","Expr") []]]) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("PrettyFlat","layout"))) (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyFlat","letBindDoc")) (CVar (0,"pr"))) (CVar (1,"mod")))))] []]),
  CFunc ("PrettyFlat","litDoc") 1 Public (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Intc") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","literal")) (CApply (CSymbol ("Pretty","int")) (CVar (0,"n"))))] [],CRule [CPComb ("FlatCurry","Floatc") [CPVar (1,"x")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","literal")) (CApply (CSymbol ("Pretty","float")) (CVar (1,"x"))))] [],CRule [CPComb ("FlatCurry","Charc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","literal")) (CApply (CSymbol ("Pretty","squotes")) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("PrettyFlat","quoteChar")) (CVar (2,"c"))))))] []]),
  CFunc ("PrettyFlat","literal") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("StyledText","cyanDoc"))] []]),
  CFunc ("PrettyFlat","mainPrint") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CSymbol ("System","getArgs"))) (CApply (CSymbol ("Prelude","mapIO_")) (CSymbol ("PrettyFlat","printProg"))))] []]),
  CFunc ("PrettyFlat","marked") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("StyledText","bgYellowDoc"))) (CSymbol ("StyledText","boldDoc")))] []]),
  CFunc ("PrettyFlat","moduleHeaderDoc") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"exports")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("PrettyFlat","consname")) (CVar (0,"name"))))) (CApply (CSymbol ("PrettyFlat","exportsDoc")) (CVar (1,"exports"))))) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("PrettyFlat","opDoc") 1 Public (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Op") [CPAs (2,"n") (CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")]),CPVar (3,"fix"),CPVar (4,"prec")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("PrettyFlat","fixDoc")) (CVar (3,"fix"))))) (CApply (CSymbol ("Pretty","int")) (CVar (4,"prec"))))) (CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","text")) (CVar (5,"infname")))))] [CLocalPat (CPVar (5,"infname")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("PrettyFlat","isInfixName")) (CVar (2,"n")))) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]")))))) [],CLocalFunc (CFunc ("PrettyFlat","fixDoc") 1 Private (CFuncType (CTCons ("FlatCurry","Fixity") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","InfixOp") []] [(CSymbol ("Prelude","success"),CSymbol ("Pretty","empty"))] [],CRule [CPComb ("FlatCurry","InfixlOp") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("FlatCurry","InfixrOp") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))] []]))]]),
  CFunc ("PrettyFlat","operator") 0 Public (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("StyledText","blueDoc"))] []]),
  CFunc ("PrettyFlat","opsDoc") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"ops")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","vcat")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyFlat","opDoc"))) (CVar (0,"ops"))))] []]),
  CFunc ("PrettyFlat","par") 1 Public (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"br")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (0,"br"))) (CSymbol ("Pretty","parens"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("PrettyFlat","patternDoc") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("FlatCurry","Pattern") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod"),CPComb ("FlatCurry","Pattern") [CPVar (1,"name"),CPVar (2,"args")]] [(CApply (CSymbol ("Prelude","null")) (CVar (2,"args")),CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (0,"mod"))) (CVar (1,"name"))),(CApply (CSymbol ("PrettyFlat","isTupleName")) (CVar (1,"name")),CApply (CSymbol ("Pretty","tupled")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyFlat","varDoc"))) (CVar (2,"args")))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("PrettyFlat","isInfixName")) (CVar (1,"name")))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (2,"args")))) (CLit (CIntc 2))),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("PrettyFlat","varDoc")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (2,"args"))) (CLit (CIntc 0))))) (CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","snd")) (CVar (1,"name"))))))) (CApply (CSymbol ("PrettyFlat","varDoc")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (2,"args"))) (CLit (CIntc 1))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (0,"mod"))) (CVar (1,"name")))) (CApply (CSymbol ("Pretty","hsep")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyFlat","varDoc"))) (CVar (2,"args")))))] [],CRule [CPVar (3,"_"),CPComb ("FlatCurry","LPattern") [CPVar (4,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","litDoc")) (CVar (4,"l")))] []]),
  CFunc ("PrettyFlat","precFillEncloseSep") 6 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))))))) (CRules CFlex [CRule [CPVar (0,"p1"),CPVar (1,"p2"),CPVar (2,"l"),CPVar (3,"r"),CPVar (4,"s"),CPVar (5,"ds")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CApply (CApply (CApply (CSymbol ("PrettyFlat","pre")) (CVar (0,"p1"))) (CVar (1,"p2"))) (CVar (2,"l")))) (CApply (CApply (CApply (CSymbol ("PrettyFlat","pre")) (CVar (0,"p1"))) (CVar (1,"p2"))) (CVar (3,"r")))) (CVar (4,"s"))) (CVar (5,"ds")))] [CLocalFunc (CFunc ("PrettyFlat","pre") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (6,"pO"),CPVar (7,"pI"),CPVar (8,"br")] [(CApply (CApply (CSymbol ("Prelude","<")) (CVar (6,"pO"))) (CVar (7,"pI")),CSymbol ("Pretty","empty")),(CSymbol ("Prelude","True"),CVar (8,"br"))] []]))]]),
  CFunc ("PrettyFlat","precs") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("FlatCurry","Op") [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"i")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"name"))) (CVar (2,"i")))))] []]),
  CFunc ("PrettyFlat","prelude") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("PrettyFlat","prettyOps") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CLit (CIntc 78)))) (CSymbol ("PrettyFlat","opsDoc")))] []]),
  CFunc ("PrettyFlat","prettyProg") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CVar (0,"n")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("PrettyFlat","progDoc"))) (CApply (CSymbol ("FlatCurryGoodies","updProgExps")) (CSymbol ("PrettyFlat","elimApp")))))] []]),
  CFunc ("PrettyFlat","prettyTypeExpr") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CLit (CIntc 78)))) (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (0,"mod"))) (CSymbol ("Prelude","False"))))] []]),
  CFunc ("PrettyFlat","prettyTypes") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CLit (CIntc 78)))) (CApply (CSymbol ("PrettyFlat","typesDoc")) (CVar (0,"mod"))))] []]),
  CFunc ("PrettyFlat","printProg") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("FlatCurry","readFlatCurryFile")) (CVar (0,"f")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","putStrLn"))) (CSymbol ("PrettyFlat","showProg"))))] []]),
  CFunc ("PrettyFlat","printStyledProg") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("FlatCurry","readFlatCurry")) (CVar (0,"f")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("StyledText","printStyledText"))) (CSymbol ("PrettyFlat","showStyledProg"))))] []]),
  CFunc ("PrettyFlat","progDoc") 1 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPAs (5,"prog") (CPComb ("FlatCurry","Prog") [CPVar (0,"name"),CPVar (1,"imps"),CPVar (2,"types"),CPVar (3,"funcs"),CPVar (4,"ops")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("PrettyFlat","<$>>")) (CApply (CApply (CSymbol ("PrettyFlat","<$>>")) (CApply (CApply (CSymbol ("PrettyFlat","<$>>")) (CApply (CApply (CSymbol ("PrettyFlat","<$>>")) (CApply (CApply (CSymbol ("PrettyFlat","moduleHeaderDoc")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("PrettyFlat","exportedNames")) (CVar (0,"name"))) (CVar (5,"prog"))))) (CApply (CSymbol ("PrettyFlat","impsDoc")) (CVar (1,"imps"))))) (CApply (CSymbol ("PrettyFlat","opsDoc")) (CVar (4,"ops"))))) (CApply (CApply (CSymbol ("PrettyFlat","typesDoc")) (CVar (0,"name"))) (CVar (2,"types"))))) (CApply (CApply (CApply (CSymbol ("PrettyFlat","funcsDoc")) (CApply (CSymbol ("PrettyFlat","precs")) (CVar (4,"ops")))) (CVar (0,"name"))) (CVar (3,"funcs"))))] []]),
  CFunc ("PrettyFlat","qname") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"prog"),CPAs (3,"mn") (CPComb ("Prelude","(,)") [CPVar (1,"mod"),CPVar (2,"name")])] [(CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"mn"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyFlat","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("PrettyFlat","isTupleName")) (CVar (3,"mn"))),CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","text")) (CVar (2,"name")))),(CApply (CSymbol ("PrettyFlat","isInfixName")) (CVar (3,"mn")),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CVar (0,"prog")))) (CApply (CSymbol ("Pretty","parens")) (CApply (CSymbol ("PrettyFlat","operator")) (CApply (CSymbol ("Pretty","text")) (CVar (2,"name")))))) (CApply (CSymbol ("Pretty","parens")) (CApply (CSymbol ("PrettyFlat","operator")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("PrettyFlat","consname")) (CVar (1,"mod")))) (CSymbol ("Pretty","dot")))) (CApply (CSymbol ("PrettyFlat","txt")) (CVar (2,"name"))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CVar (0,"prog")))) (CApply (CSymbol ("PrettyFlat","txt")) (CApply (CSymbol ("PrettyFlat","correctName")) (CVar (2,"name"))))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("PrettyFlat","consname")) (CVar (1,"mod")))) (CSymbol ("Pretty","dot")))) (CApply (CSymbol ("PrettyFlat","txt")) (CVar (2,"name")))))] [CLocalFunc (CFunc ("PrettyFlat","txt") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (4,"n"),CPVar (5,"ame")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Char","isUpper")) (CVar (4,"n")))) (CApply (CSymbol ("PrettyFlat","consname")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"n"))) (CVar (5,"ame"))))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"n"))) (CVar (5,"ame")))))] []]))]]),
  CFunc ("PrettyFlat","quoteChar") 1 Public (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","id"))) (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (0,"c"))) (CSymbol ("PrettyFlat","specialChars"))))] []]),
  CFunc ("PrettyFlat","ruleDoc") 4 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","Rule") []) (CTCons ("Pretty","Doc") []))))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPVar (2,"name"),CPComb ("FlatCurry","Rule") [CPVar (3,"args"),CPVar (4,"body")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyFlat","def")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (1,"mod"))) (CVar (2,"name")))) (CVar (3,"args"))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CSymbol ("Pretty","equals"))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyFlat","expDoc")) (CVar (0,"pr"))) (CLit (CIntc 0))) (CVar (1,"mod"))) (CSymbol ("Prelude","False"))) (CVar (4,"body"))))))] [],CRule [CPVar (5,"_"),CPVar (6,"mod"),CPVar (7,"name"),CPComb ("FlatCurry","External") [CPVar (8,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (6,"mod"))) (CVar (7,"name")))) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))))] []]),
  CFunc ("PrettyFlat","showProg") 0 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("StyledText","plainText"))) (CSymbol ("PrettyFlat","showStyledProg")))] []]),
  CFunc ("PrettyFlat","showStyledProg") 0 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","prettyProg")) (CLit (CIntc 78)))] []]),
  CFunc ("PrettyFlat","specialChars") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Char") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\t'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyFlat","toList") 1 Public (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]])) (CRules CFlex [CRule [CPVar (0,"exp")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"exp")) [CBranch (CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","ConsCall") [],CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","ConsCall") [],CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (1,"x"),CPComb ("Prelude",":") [CPVar (2,"xs"),CPComb ("Prelude","[]") []]]]) (CApply (CApply (CSymbol ("Maybe",">>-")) (CApply (CSymbol ("PrettyFlat","toList")) (CVar (2,"xs")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CVar (3,"x0")))))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("PrettyFlat","toString") 1 Public (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"exp")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"exp")) [CBranch (CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","ConsCall") [],CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","ConsCall") [],CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPComb ("FlatCurry","Lit") [CPComb ("FlatCurry","Charc") [CPVar (1,"c")]],CPComb ("Prelude",":") [CPVar (2,"cs"),CPComb ("Prelude","[]") []]]]) (CApply (CApply (CSymbol ("Maybe",">>-")) (CApply (CSymbol ("PrettyFlat","toString")) (CVar (2,"cs")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("PrettyFlat","quoteChar")) (CVar (1,"c")))) (CVar (3,"x0")))))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("PrettyFlat","tvarDoc") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"i")] [(CApply (CApply (CSymbol ("Prelude",">")) (CVar (0,"i"))) (CLit (CIntc 25)),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CApply (CSymbol ("Prelude","+")) (CLit (CIntc 97))) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("PrettyFlat","typeDoc") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod"),CPComb ("FlatCurry","Type") [CPVar (1,"name"),CPVar (2,"_"),CPVar (3,"params"),CPVar (4,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyFlat","def")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (0,"mod"))) (CVar (1,"name"))))) (CVar (3,"params"))) (CApply (CApply (CSymbol ("PrettyFlat","consDeclsDoc")) (CVar (0,"mod"))) (CVar (4,"cs"))))] [],CRule [CPVar (5,"mod"),CPComb ("FlatCurry","TypeSyn") [CPVar (6,"name"),CPVar (7,"_"),CPVar (8,"params"),CPVar (9,"syn")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyFlat","def")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","keyword")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (5,"mod"))) (CVar (6,"name"))))) (CVar (8,"params"))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyFlat","operator")) (CSymbol ("Pretty","equals")))) (CApply (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (5,"mod"))) (CSymbol ("Prelude","False"))) (CVar (9,"syn")))))] []]),
  CFunc ("PrettyFlat","typeExprDoc") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("FlatCurry","TVar") [CPVar (2,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyFlat","tvarDoc")) (CVar (2,"n")))] [],CRule [CPVar (3,"mod"),CPVar (4,"br"),CPComb ("FlatCurry","TCons") [CPVar (5,"name"),CPVar (6,"args")]] [(CApply (CSymbol ("Prelude","null")) (CVar (6,"args")),CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (3,"mod"))) (CVar (5,"name"))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyFlat","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))),CApply (CSymbol ("Pretty","brackets")) (CApply (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (3,"mod"))) (CSymbol ("Prelude","False"))) (CApply (CSymbol ("Prelude","head")) (CVar (6,"args"))))),(CApply (CSymbol ("PrettyFlat","isTupleName")) (CVar (5,"name")),CApply (CSymbol ("Pretty","tupled")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (3,"mod"))) (CSymbol ("Prelude","False")))) (CVar (6,"args")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyFlat","par")) (CVar (4,"br")))) (CApply (CApply (CSymbol ("PrettyFlat","app")) (CApply (CApply (CSymbol ("PrettyFlat","qname")) (CVar (3,"mod"))) (CVar (5,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (3,"mod"))) (CSymbol ("Prelude","True")))) (CVar (6,"args")))))] [],CRule [CPVar (7,"mod"),CPVar (8,"br"),CPAs (11,"typ") (CPComb ("FlatCurry","FuncType") [CPVar (9,"_"),CPVar (10,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyFlat","par")) (CVar (8,"br")))) (CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CSymbol ("PrettyFlat","arrow")))) (CSymbol ("Pretty","space")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (7,"mod"))) (CSymbol ("Prelude","True")))) (CApply (CSymbol ("FlatCurryGoodies","argTypes")) (CVar (11,"typ"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("PrettyFlat","typeExprDoc")) (CVar (7,"mod"))) (CSymbol ("Prelude","False"))) (CApply (CSymbol ("FlatCurryGoodies","resultType")) (CVar (11,"typ"))))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyFlat","typesDoc") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","vcat"))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("PrettyFlat","typeDoc")) (CVar (0,"mod")))))] []]),
  CFunc ("PrettyFlat","varDoc") 0 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","text"))) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CVar (0,"x0"))))) (CSymbol ("Prelude","show"))))] []])]
 []
