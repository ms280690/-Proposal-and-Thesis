CurryProg "Time"
 ["Prelude"]
 [CType ("Time","ClockTime") Public [] [CCons ("Time","CTime") 1 Private [CTCons ("Prelude","Int") []]],
  CType ("Time","CalendarTime") Public [] [CCons ("Time","CalendarTime") 7 Public [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]]]
 [CFunc ("Time","addDays") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","ClockTime") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPComb ("Time","CTime") [CPVar (1,"ctime")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Time","CTime")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"ctime"))) (CApply (CApply (CSymbol ("Prelude","*")) (CVar (0,"n"))) (CLit (CIntc 86400)))))] []]),
  CFunc ("Time","addHours") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","ClockTime") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPComb ("Time","CTime") [CPVar (1,"ctime")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Time","CTime")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"ctime"))) (CApply (CApply (CSymbol ("Prelude","*")) (CVar (0,"n"))) (CLit (CIntc 3600)))))] []]),
  CFunc ("Time","addMinutes") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","ClockTime") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPComb ("Time","CTime") [CPVar (1,"ctime")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Time","CTime")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"ctime"))) (CApply (CApply (CSymbol ("Prelude","*")) (CVar (0,"n"))) (CLit (CIntc 60)))))] []]),
  CFunc ("Time","addMonths") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","ClockTime") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"ctime")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Time","CalendarTime") [CPVar (2,"y"),CPVar (3,"mo"),CPVar (4,"d"),CPVar (5,"h"),CPVar (6,"mi"),CPVar (7,"s"),CPVar (8,"tz")]) (CApply (CSymbol ("Time","toUTCTime")) (CVar (1,"ctime"))) [],CLocalPat (CPVar (9,"nmo")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","mod")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (3,"mo"))) (CLit (CIntc 1)))) (CVar (0,"n")))) (CLit (CIntc 12)))) (CLit (CIntc 1))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (9,"nmo"))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Time","addYears")) (CApply (CApply (CSymbol ("Prelude","div")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (3,"mo"))) (CLit (CIntc 1)))) (CVar (0,"n")))) (CLit (CIntc 12)))) (CApply (CSymbol ("Time","toClockTime")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Time","CalendarTime")) (CVar (2,"y"))) (CVar (9,"nmo"))) (CVar (4,"d"))) (CVar (5,"h"))) (CVar (6,"mi"))) (CVar (7,"s"))) (CVar (8,"tz")))))) (CApply (CApply (CSymbol ("Time","addYears")) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","div")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (3,"mo"))) (CLit (CIntc 1)))) (CVar (0,"n")))) (CLit (CIntc 12)))) (CLit (CIntc 1)))) (CApply (CSymbol ("Time","toClockTime")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Time","CalendarTime")) (CVar (2,"y"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (9,"nmo"))) (CLit (CIntc 12)))) (CVar (4,"d"))) (CVar (5,"h"))) (CVar (6,"mi"))) (CVar (7,"s"))) (CVar (8,"tz")))))))] []]),
  CFunc ("Time","addSeconds") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","ClockTime") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPComb ("Time","CTime") [CPVar (1,"ctime")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Time","CTime")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"ctime"))) (CVar (0,"n"))))] []]),
  CFunc ("Time","addYears") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","ClockTime") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"ctime")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"n"))) (CLit (CIntc 0)))) (CVar (1,"ctime"))) (CLetDecl [CLocalPat (CPComb ("Time","CalendarTime") [CPVar (2,"y"),CPVar (3,"mo"),CPVar (4,"d"),CPVar (5,"h"),CPVar (6,"mi"),CPVar (7,"s"),CPVar (8,"tz")]) (CApply (CSymbol ("Time","toUTCTime")) (CVar (1,"ctime"))) []] (CApply (CSymbol ("Time","toClockTime")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Time","CalendarTime")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (2,"y"))) (CVar (0,"n")))) (CVar (3,"mo"))) (CVar (4,"d"))) (CVar (5,"h"))) (CVar (6,"mi"))) (CVar (7,"s"))) (CVar (8,"tz"))))))] []]),
  CFunc ("Time","calendarTimeToString") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPAs (7,"ctime") (CPComb ("Time","CalendarTime") [CPVar (0,"y"),CPVar (1,"mo"),CPVar (2,"d"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (8,"shortMonths"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (1,"mo"))) (CLit (CIntc 1))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (2,"d")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Time","toTimeString")) (CVar (7,"ctime")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"y")))))))))] [CLocalPat (CPVar (8,"shortMonths")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Prelude","[]")))))))))))))) []]]),
  CFunc ("Time","clockTimeToInt") 1 Public (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CTime") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CVar (0,"i"))] []]),
  CFunc ("Time","compareCalendarTime") 2 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Ordering") []))) (CRules CFlex [CRule [CPVar (0,"ct1"),CPVar (1,"ct2")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Time","compareClockTime")) (CApply (CSymbol ("Time","toClockTime")) (CVar (0,"ct1")))) (CApply (CSymbol ("Time","toClockTime")) (CVar (1,"ct2"))))] []]),
  CFunc ("Time","compareClockTime") 2 Public (CFuncType (CTCons ("Time","ClockTime") []) (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Prelude","Ordering") []))) (CRules CFlex [CRule [CPComb ("Time","CTime") [CPVar (0,"time1")],CPComb ("Time","CTime") [CPVar (1,"time2")]] [(CApply (CApply (CSymbol ("Prelude","<")) (CVar (0,"time1"))) (CVar (1,"time2")),CSymbol ("Prelude","LT")),(CApply (CApply (CSymbol ("Prelude",">")) (CVar (0,"time1"))) (CVar (1,"time2")),CSymbol ("Prelude","GT")),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","EQ"))] []]),
  CFunc ("Time","compareDate") 0 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Ordering") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("Time","compareCalendarTime"))] []]),
  CFunc ("Time","ctDay") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"d"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CVar (2,"d"))] []]),
  CFunc ("Time","ctHour") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"h"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CVar (3,"h"))] []]),
  CFunc ("Time","ctMin") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"m"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CVar (4,"m"))] []]),
  CFunc ("Time","ctMonth") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"_"),CPVar (1,"m"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"m"))] []]),
  CFunc ("Time","ctSec") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"s"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CVar (5,"s"))] []]),
  CFunc ("Time","ctTZ") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"tz")]] [(CSymbol ("Prelude","success"),CVar (6,"tz"))] []]),
  CFunc ("Time","ctYear") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"y"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"y"))] []]),
  CFunc ("Time","daysOfMonth") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (0,"mo"),CPVar (1,"yr")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (0,"mo"))) (CLit (CIntc 2)))) (CApply (CApply (CSymbol ("Prelude","!!")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 31))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 28))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 31))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 30))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 31))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 30))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 31))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 31))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 30))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 31))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 30))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 31))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (0,"mo"))) (CLit (CIntc 1))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","mod")) (CVar (1,"yr"))) (CLit (CIntc 4)))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CApply (CSymbol ("Prelude","mod")) (CVar (1,"yr"))) (CLit (CIntc 100)))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","mod")) (CVar (1,"yr"))) (CLit (CIntc 400)))) (CLit (CIntc 0)))))) (CLit (CIntc 29))) (CLit (CIntc 28))))] []]),
  CFunc ("Time","getClockTime") 0 Public (CTCons ("Prelude","IO") [CTCons ("Time","ClockTime") []]) (CExternal "getClockTime"),
  CFunc ("Time","getLocalTime") 0 Public (CTCons ("Prelude","IO") [CTCons ("Time","CalendarTime") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (0,"ctime")) (CSymbol ("Time","getClockTime")),CSExpr (CApply (CSymbol ("Time","toCalendarTime")) (CVar (0,"ctime")))])] []]),
  CFunc ("Time","prim_toCalendarTime") 1 Private (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Prelude","IO") [CTCons ("Time","CalendarTime") []])) (CExternal "prim_toCalendarTime"),
  CFunc ("Time","prim_toClockTime") 1 Private (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Time","ClockTime") [])) (CExternal "prim_toClockTime"),
  CFunc ("Time","prim_toUTCTime") 1 Private (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","CalendarTime") [])) (CExternal "prim_toUTCTime"),
  CFunc ("Time","toCalendarTime") 1 Public (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Prelude","IO") [CTCons ("Time","CalendarTime") []])) (CRules CFlex [CRule [CPVar (0,"ctime")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("Time","prim_toCalendarTime"))) (CVar (0,"ctime")))] []]),
  CFunc ("Time","toClockTime") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Time","ClockTime") [])) (CRules CFlex [CRule [CPVar (0,"d")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("Time","prim_toClockTime"))) (CVar (0,"d")))] []]),
  CFunc ("Time","toDayString") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"y"),CPVar (1,"mo"),CPVar (2,"d"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (7,"longMonths"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (1,"mo"))) (CLit (CIntc 1))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (2,"d")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"y")))))))] [CLocalPat (CPVar (7,"longMonths")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("Prelude","[]")))))))))))))) []]]),
  CFunc ("Time","toTimeString") 1 Public (CFuncType (CTCons ("Time","CalendarTime") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Time","CalendarTime") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"h"),CPVar (4,"mi"),CPVar (5,"s"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Time","digit2")) (CVar (3,"h")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Time","digit2")) (CVar (4,"mi")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Time","digit2")) (CVar (5,"s")))))))] [CLocalFunc (CFunc ("Time","digit2") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (7,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (7,"n"))) (CLit (CIntc 10)))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CSymbol ("Prelude","ord")) (CLit (CCharc '0')))) (CVar (7,"n"))))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Prelude","show")) (CVar (7,"n"))))] []]))]]),
  CFunc ("Time","toUTCTime") 1 Public (CFuncType (CTCons ("Time","ClockTime") []) (CTCons ("Time","CalendarTime") [])) (CRules CFlex [CRule [CPVar (0,"ctime")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("Time","prim_toUTCTime"))) (CVar (0,"ctime")))] []]),
  CFunc ("Time","validDate") 3 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Bool") [])))) (CRules CFlex [CRule [CPVar (0,"y"),CPVar (1,"m"),CPVar (2,"d")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (1,"m"))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (1,"m"))) (CLit (CIntc 13)))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (2,"d"))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (2,"d"))) (CApply (CApply (CSymbol ("Time","daysOfMonth")) (CVar (1,"m"))) (CVar (0,"y")))))))] []])]
 []
