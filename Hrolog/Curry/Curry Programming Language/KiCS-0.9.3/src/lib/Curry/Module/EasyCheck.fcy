Prog "EasyCheck" ["Integer","List","Meta","Prelude","RandomExternal","Sort","Read"] [TypeSyn ("EasyCheck","Prop") Public [] (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]),Type ("EasyCheck","Test") Private [] [Cons ("EasyCheck","Test") 3 Private [TCons ("EasyCheck","Result") [],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Type ("EasyCheck","Result") Public [] [Cons ("EasyCheck","Undef") 0 Public [],Cons ("EasyCheck","Ok") 0 Public [],Cons ("EasyCheck","Falsified") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("EasyCheck","Ambigious") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Type ("EasyCheck","Config") Private [] [Cons ("EasyCheck","Config") 3 Private [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))]]] [Func ("EasyCheck","notest") 0 Private (TCons ("EasyCheck","Test") []) (Rule [] (Comb ConsCall ("EasyCheck","Test") [Comb ConsCall ("EasyCheck","Undef") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []])),Func ("EasyCheck","result") 1 Public (FuncType (TCons ("EasyCheck","Test") []) (TCons ("EasyCheck","Result") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("EasyCheck","Test") [2,3,4]) (Var 2)])),Func ("EasyCheck","setResult") 2 Private (FuncType (TCons ("EasyCheck","Result") []) (FuncType (TCons ("EasyCheck","Test") []) (TCons ("EasyCheck","Test") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("EasyCheck","Test") [3,4,5]) (Comb ConsCall ("EasyCheck","Test") [Var 1,Var 5,Var 4])])),Func ("EasyCheck","args") 1 Private (FuncType (TCons ("EasyCheck","Test") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("EasyCheck","Test") [2,3,4]) (Var 3)])),Func ("EasyCheck","stamp") 1 Private (FuncType (TCons ("EasyCheck","Test") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("EasyCheck","Test") [2,3,4]) (Var 4)])),Func ("EasyCheck","updArgs") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("EasyCheck","Test") []) (TCons ("EasyCheck","Test") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("EasyCheck","Test") [3,4,5]) (Comb ConsCall ("EasyCheck","Test") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 5])])),Func ("EasyCheck","updStamp") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("EasyCheck","Test") []) (TCons ("EasyCheck","Test") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("EasyCheck","Test") [3,4,5]) (Comb ConsCall ("EasyCheck","Test") [Var 3,Var 4,Comb FuncCall ("Prelude","apply") [Var 1,Var 5]])])),Func ("EasyCheck","test") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","valuesOf") [],Var 1])] (Let [(4,Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","valuesOf") [],Comb FuncCall ("Prelude","apply") [Var 2,Var 3]])] (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("EasyCheck","Ok") []),Branch (Pattern ("Prelude",":") [8,9]) (Comb ConsCall ("EasyCheck","Ambigious") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","show") [],Var 3]])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("EasyCheck","Falsified") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","show") [],Var 3]]),Branch (Pattern ("Prelude",":") [10,11]) (Comb ConsCall ("EasyCheck","Ambigious") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","show") [],Var 3]])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("EasyCheck","Ambigious") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","show") [],Var 3]])]))] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("EasyCheck","setResult") [Var 4,Comb FuncCall ("EasyCheck","notest") []],Comb ConsCall ("Prelude","[]") []])))),Func ("EasyCheck","is") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Comb FuncCall ("EasyCheck","test") [Var 1,Comb (FuncPartCall 1) ("EasyCheck","is._#lambda3") [Var 2]])),Func ("EasyCheck","is._#lambda3") 2 Private (FuncType (FuncType (TVar 220) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 220]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])])),Func ("EasyCheck","isAlways") 1 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("EasyCheck","test") [Var 1],Comb (FuncPartCall 1) ("Prelude","all") []])),Func ("EasyCheck","isEventually") 1 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("EasyCheck","test") [Var 1],Comb (FuncPartCall 1) ("Prelude","any") []])),Func ("EasyCheck","prop") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Comb FuncCall ("EasyCheck","uniquely") [])),Func ("EasyCheck","uniquely") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("EasyCheck","is") [],Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("EasyCheck","always") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("EasyCheck","isAlways") [],Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("EasyCheck","eventually") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("EasyCheck","isEventually") [],Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("EasyCheck","failing") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [1] (Comb FuncCall ("EasyCheck","test") [Var 1,Comb (FuncPartCall 1) ("Prelude","null") []])),Func ("EasyCheck","successful") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [1] (Comb FuncCall ("EasyCheck","test") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","null") []]])),Func ("EasyCheck","deterministic") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (Rule [1] (Comb FuncCall ("EasyCheck","is") [Var 1,Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","True") []]])),Func ("EasyCheck","#") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Comb FuncCall ("EasyCheck","test") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","length") [],Comb (FuncPartCall 1) ("List","nub") []]]])),Func ("EasyCheck","-=-") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Comb FuncCall ("EasyCheck","is") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2],Comb (FuncPartCall 1) ("Prelude","uncurry") [Comb (FuncPartCall 2) ("Prelude","==") []]])),Func ("EasyCheck","<~>") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Comb FuncCall ("EasyCheck","test") [Var 1,Comb (FuncPartCall 1) ("EasyCheck","isSameSet") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","valuesOf") [],Var 2]]])),Func ("EasyCheck","~>") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Comb FuncCall ("EasyCheck","test") [Var 1,Comb (FuncPartCall 1) ("EasyCheck","isSubsetOf") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","valuesOf") [],Var 2]]])),Func ("EasyCheck","<~") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Comb FuncCall ("EasyCheck","test") [Var 1,Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("EasyCheck","isSubsetOf") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","valuesOf") [],Var 2]]])),Func ("EasyCheck","isSameSet") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("List","nub") [Var 1])] (Let [(4,Comb FuncCall ("List","nub") [Var 2])] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("EasyCheck","subset") [Var 3,Var 4],Comb FuncCall ("EasyCheck","subset") [Var 4,Var 3]])))),Func ("EasyCheck","isSubsetOf") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("EasyCheck","subset") [Comb FuncCall ("List","nub") [Var 1],Var 2])),Func ("EasyCheck","subset") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","null") [Comb FuncCall ("List","\\\\") [Var 1,Var 2]])),Func ("EasyCheck","==>") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("EasyCheck","notest") [],Comb ConsCall ("Prelude","[]") []])])),Func ("EasyCheck","forAll") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (FuncType (TVar 1) (FuncType (FuncType (TVar 1) (TVar 0)) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (Rule [1,2,3] (Comb FuncCall ("EasyCheck","forAllValues") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","valuesOf") [],Var 2],Var 3])),Func ("EasyCheck","forAllValues") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TVar 0)) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","diagonal") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("EasyCheck","forAllValues._#lambda5") [Var 1,Var 3],Var 2]])),Func ("EasyCheck","forAllValues._#lambda5") 3 Private (FuncType (FuncType (TVar 330) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (FuncType (FuncType (TVar 327) (TVar 330)) (FuncType (TVar 327) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("EasyCheck","forAllValues._#lambda5._#lambda6") [Var 3],Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]]])),Func ("EasyCheck","forAllValues._#lambda5._#lambda6") 2 Private (FuncType (TVar 327) (FuncType (TCons ("EasyCheck","Test") []) (TCons ("EasyCheck","Test") []))) (Rule [1,2] (Comb FuncCall ("EasyCheck","updArgs") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","show") [Var 1]],Var 2])),Func ("EasyCheck","for") 0 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Comb (FuncPartCall 2) ("EasyCheck","forAll") [Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("EasyCheck","forValues") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Comb (FuncPartCall 2) ("EasyCheck","forAllValues") [Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("EasyCheck","label") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("Prelude","map") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("EasyCheck","updStamp") [],Comb (ConsPartCall 2) ("Prelude",":") []]])),Func ("EasyCheck","classify") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","label") [],Var 2]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","id") [])])),Func ("EasyCheck","trivial") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("EasyCheck","classify") [],Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("EasyCheck","collect") 0 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","label") [],Comb (FuncPartCall 1) ("Prelude","show") []])),Func ("EasyCheck","collectAs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","label") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","++") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb (FuncPartCall 1) ("Prelude","show") []]])),Func ("EasyCheck","maxTest") 1 Private (FuncType (TCons ("EasyCheck","Config") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("EasyCheck","Config") [2,3,4]) (Var 2)])),Func ("EasyCheck","maxFail") 1 Private (FuncType (TCons ("EasyCheck","Config") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("EasyCheck","Config") [2,3,4]) (Var 3)])),Func ("EasyCheck","every") 1 Private (FuncType (TCons ("EasyCheck","Config") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("EasyCheck","Config") [2,3,4]) (Var 4)])),Func ("EasyCheck","setEvery") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("EasyCheck","Config") []) (TCons ("EasyCheck","Config") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("EasyCheck","Config") [3,4,5]) (Comb ConsCall ("EasyCheck","Config") [Var 3,Var 4,Var 1])])),Func ("EasyCheck","easy") 0 Private (TCons ("EasyCheck","Config") []) (Rule [] (Comb ConsCall ("EasyCheck","Config") [Lit (Intc  100),Lit (Intc  1000),Comb (FuncPartCall 2) ("EasyCheck","easy._#lambda7") []])),Func ("EasyCheck","easy._#lambda7") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)]]])] (Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("EasyCheck","easy._#lambda7._#lambda8") [],Var 3]]))),Func ("EasyCheck","easy._#lambda7._#lambda8") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("Prelude","chr") [Lit (Intc  8)])),Func ("EasyCheck","verbose") 0 Private (TCons ("EasyCheck","Config") []) (Rule [] (Comb FuncCall ("EasyCheck","setEvery") [Comb (FuncPartCall 2) ("EasyCheck","verbose._#lambda9") [],Comb FuncCall ("EasyCheck","easy") []])),Func ("EasyCheck","verbose._#lambda9") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","unlines") [Var 2]]])),Func ("EasyCheck","easyCheck") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb (FuncPartCall 1) ("EasyCheck","check") [Comb FuncCall ("EasyCheck","easy") []])),Func ("EasyCheck","verboseCheck") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb (FuncPartCall 1) ("EasyCheck","check") [Comb FuncCall ("EasyCheck","verbose") []])),Func ("EasyCheck","suc") 1 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (FuncType (FuncType (TVar 1) (TVar 0)) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (Rule [1] (Comb (FuncPartCall 1) ("EasyCheck","forAll") [Var 1,Comb FuncCall ("Prelude","unknown") []])),Func ("EasyCheck","easyCheck1") 0 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","easyCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]])),Func ("EasyCheck","easyCheck2") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","easyCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]])),Func ("EasyCheck","easyCheck3") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","easyCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]]])),Func ("EasyCheck","easyCheck4") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","easyCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]]]])),Func ("EasyCheck","easyCheck5") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","easyCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]]]]])),Func ("EasyCheck","verboseCheck1") 0 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","verboseCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]])),Func ("EasyCheck","verboseCheck2") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","verboseCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]])),Func ("EasyCheck","verboseCheck3") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","verboseCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]]])),Func ("EasyCheck","verboseCheck4") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","verboseCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]]]])),Func ("EasyCheck","verboseCheck5") 0 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []])))))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("EasyCheck","verboseCheck") [],Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb FuncCall ("EasyCheck","suc") [Comb (FuncPartCall 1) ("Prelude","id") []]]]]]])),Func ("EasyCheck","check") 2 Private (FuncType (TCons ("EasyCheck","Config") []) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("EasyCheck","evalModeIsOrBased") [],Comb (FuncPartCall 1) ("EasyCheck","check._#lambda10") [Var 1,Var 2]])),Func ("EasyCheck","check._#lambda10") 3 Private (FuncType (TCons ("EasyCheck","Config") []) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("EasyCheck","tests") [Var 1,Var 2,Lit (Intc  0),Lit (Intc  0),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("Prelude","unlines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]])])),Func ("EasyCheck","tests") 5 Private (FuncType (TCons ("EasyCheck","Config") []) (FuncType (TCons ("Prelude","[]") [TCons ("EasyCheck","Test") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("EasyCheck","done") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 3,Var 5]),Branch (Pattern ("Prelude",":") [6,7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb FuncCall ("EasyCheck","maxTest") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("EasyCheck","done") [Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'K'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Var 3,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("EasyCheck","maxFail") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("EasyCheck","done") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Var 3,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStr") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","every") [Var 1],Var 3],Comb FuncCall ("EasyCheck","args") [Var 6]]],Case  Rigid (Comb FuncCall ("EasyCheck","result") [Var 6]) [Branch (Pattern ("EasyCheck","Undef") []) (Comb FuncCall ("EasyCheck","tests") [Var 1,Var 7,Var 3,Comb FuncCall ("Prelude","+") [Var 4,Lit (Intc  1)],Var 5]),Branch (Pattern ("EasyCheck","Ok") []) (Comb FuncCall ("EasyCheck","tests") [Var 1,Var 7,Comb FuncCall ("Prelude","+") [Var 3,Lit (Intc  1)],Var 4,Comb ConsCall ("Prelude",":") [Comb FuncCall ("EasyCheck","stamp") [Var 6],Var 5]]),Branch (Pattern ("EasyCheck","Falsified") [8]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStr") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("EasyCheck","nth") [Comb FuncCall ("Prelude","+") [Var 3,Lit (Intc  1)]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","null") [Comb FuncCall ("EasyCheck","args") [Var 6]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]])],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unlines") [Comb FuncCall ("EasyCheck","args") [Var 6]],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 8]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","unlines") [Var 8]])]]]]]]]]),Branch (Pattern ("EasyCheck","Ambigious") [9,10]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStr") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 9],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("EasyCheck","nth") [Comb FuncCall ("Prelude","+") [Var 3,Lit (Intc  1)]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","null") [Comb FuncCall ("EasyCheck","args") [Var 6]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]])],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unlines") [Comb FuncCall ("EasyCheck","args") [Var 6]],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","unlines") [Var 10]])]]]]]]]]]])]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("EasyCheck","nth") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  2)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  3)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]])])])])),Func ("EasyCheck","done") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("EasyCheck","done.display.199") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("EasyCheck","done.entry.199") [Var 2]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Sort","mergeSort") [Comb (FuncPartCall 2) ("EasyCheck","leqPair") [Comb (FuncPartCall 2) ("Prelude","<=") [],Comb (FuncPartCall 2) ("Sort","leqList") [Comb FuncCall ("Sort","leqString") []]]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("EasyCheck","done.pairLength.199") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("List","group") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Sort","mergeSort") [Comb (FuncPartCall 2) ("Sort","leqList") [Comb FuncCall ("Sort","leqString") []]],Comb (FuncPartCall 1) ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","null") []]]]]]]]]],Var 3])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStr") [],Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude",">=") [Var 2,Lit (Intc  2)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 4]]]]]]))),Func ("EasyCheck","done.display.199") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","unlines") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Var 1]]])])])),Func ("EasyCheck","done.pairLength.199") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","length") [Var 1],Var 2])])),Func ("EasyCheck","done.percentage.199") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","div") [Comb FuncCall ("Prelude","*") [Lit (Intc  100),Var 1],Var 2]])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","replicate") [Comb FuncCall ("Prelude","-") [Lit (Intc  3),Comb FuncCall ("Prelude","length") [Var 3]],Lit (Charc  ' ')],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '%'),Comb ConsCall ("Prelude","[]") []]]]))),Func ("EasyCheck","done.entry.199") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("EasyCheck","done.percentage.199") [Var 3,Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Var 4]]]])])),Func ("EasyCheck","leqPair") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 1) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 6],Var 8]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 5],Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("EasyCheck","leList") 3 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 6],Var 8],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 8],Comb FuncCall ("EasyCheck","leList") [Var 1,Var 7,Var 9]]])])])),Func ("EasyCheck","valuesOf") 0 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("EasyCheck","rndLevelDiagFlat") [Lit (Intc  3),Lit (Intc  2008)],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Meta","searchTree") [],Comb (FuncPartCall 1) ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","id") []]]])),Func ("EasyCheck","rndLevelDiag") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("EasyCheck","rndLevelDiag._#lambda15") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("EasyCheck","diagonal") [],Comb FuncCall ("EasyCheck","rndLevels") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]]])),Func ("EasyCheck","rndLevelDiag._#lambda15") 2 Private (FuncType (TCons ("Prelude","SearchTree") [TVar 119]) (FuncType (TCons ("Prelude","[]") [TVar 119]) (TCons ("Prelude","[]") [TVar 119]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","Value") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("Prelude","Fail") []) (Var 2),Branch (Pattern ("Prelude","Choice") [4]) (Var 2),Branch (Pattern ("Prelude","Suspend") []) (Var 2)])),Func ("EasyCheck","rndLevels") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","SearchTree") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","SearchTree") [TVar 0]]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("RandomExternal","split") [Var 1])] (Let [(4,Comb FuncCall ("EasyCheck","rndLevels._#selFP3#r") [Var 3])] (Let [(5,Comb FuncCall ("EasyCheck","rndLevels._#selFP4#rs") [Var 3])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("EasyCheck","rndLevels") [Var 4,Comb FuncCall ("Prelude","concat") [Comb FuncCall ("Prelude","zipWith") [Comb (FuncPartCall 2) ("EasyCheck","shuffle") [],Var 5,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("EasyCheck","rndLevels._#lambda19") [],Comb ConsCall ("Prelude","[]") [],Var 2]]]]])]))))),Func ("EasyCheck","rndLevels._#selFP3#r") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("EasyCheck","rndLevels._#selFP4#rs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)])),Func ("EasyCheck","rndLevels._#lambda19") 2 Private (FuncType (TCons ("Prelude","SearchTree") [TVar 68]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","SearchTree") [TVar 68]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","SearchTree") [TVar 68]]]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","Choice") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("Prelude","Fail") []) (Var 2),Branch (Pattern ("Prelude","Value") [4]) (Var 2),Branch (Pattern ("Prelude","Suspend") []) (Var 2)])),Func ("EasyCheck","rndLevelDiagFlat") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("RandomExternal","split") [Var 2])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("EasyCheck","transpose") [Comb FuncCall ("Prelude","zipWith") [Comb (FuncPartCall 2) ("EasyCheck","rndLevelDiag") [],Var 4,Comb FuncCall ("EasyCheck","flatRep") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]]]))),Func ("EasyCheck","flat") 1 Private (FuncType (TCons ("Prelude","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","SearchTree") [TVar 0]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","Value") [2]) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","Choice") [3]) (Var 3),Branch (Pattern ("Prelude","Fail") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","Suspend") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("EasyCheck","flatRep") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","SearchTree") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","SearchTree") [TVar 0]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("EasyCheck","flatRep") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("EasyCheck","flat") []],Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("EasyCheck","diagonal") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("EasyCheck","diagonal.diags.268") [],Comb ConsCall ("Prelude","[]") []]])),Func ("EasyCheck","diagonal.merge.268") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []],Var 1]),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Var 5],Comb FuncCall ("EasyCheck","diagonal.merge.268") [Var 4,Var 6]])])])),Func ("EasyCheck","diagonal.diags.268") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("EasyCheck","diagonal.merge.268") [Var 4,Var 2]])])),Func ("EasyCheck","shuffle") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("EasyCheck","shuffleWithLen") [Comb FuncCall ("RandomExternal","nextInt") [Var 1],Comb FuncCall ("Prelude","length") [Var 2],Var 2])),Func ("EasyCheck","shuffleWithLen") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","splitAt") [Comb FuncCall ("Prelude","mod") [Comb FuncCall ("Integer","abs") [Var 4],Var 2],Var 3])] (Let [(7,Comb FuncCall ("EasyCheck","shuffleWithLen._#selFP6#ys") [Var 6])] (Let [(8,Comb FuncCall ("EasyCheck","shuffleWithLen._#selFP7#z") [Var 6])] (Let [(9,Comb FuncCall ("EasyCheck","shuffleWithLen._#selFP8#zs") [Var 6])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 8,Comb FuncCall ("EasyCheck","shuffleWithLen") [Var 5,Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Comb FuncCall ("Prelude","++") [Var 7,Var 9]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])))))])),Func ("EasyCheck","shuffleWithLen._#selFP6#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 39],TCons ("Prelude","[]") [TVar 39]]) (TCons ("Prelude","[]") [TVar 39])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("EasyCheck","shuffleWithLen._#selFP7#z") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 39],TCons ("Prelude","[]") [TVar 39]]) (TVar 39)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 4)])])),Func ("EasyCheck","shuffleWithLen._#selFP8#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 39],TCons ("Prelude","[]") [TVar 39]]) (TCons ("Prelude","[]") [TVar 39])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("EasyCheck","transpose") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("EasyCheck","transpose") [Var 3]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("EasyCheck","transpose._#lambda24") [],Comb ConsCall ("Prelude","[]") [],Var 3]],Comb FuncCall ("EasyCheck","transpose") [Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("EasyCheck","transpose._#lambda28") [],Comb ConsCall ("Prelude","[]") [],Var 3]]]])])])),Func ("EasyCheck","transpose._#lambda24") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 151]) (FuncType (TCons ("Prelude","[]") [TVar 151]) (TCons ("Prelude","[]") [TVar 151]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("Prelude","[]") []) (Var 2)])),Func ("EasyCheck","transpose._#lambda28") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 151]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 151]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 151]]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 4,Var 2]),Branch (Pattern ("Prelude","[]") []) (Var 2)])),Func ("EasyCheck","evalModeIsOrBased") 0 Private (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","getSearchTree") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","unknown") []]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb ConsCall ("Prelude","Value") [Comb ConsCall ("Prelude","()") []]]]]))] [Op ("EasyCheck","isSameSet") InfixOp 4,Op ("EasyCheck","isSubsetOf") InfixOp 4,Op ("EasyCheck","is") InfixOp 1,Op ("EasyCheck","isAlways") InfixOp 1,Op ("EasyCheck","isEventually") InfixOp 1,Op ("EasyCheck","-=-") InfixOp 1,Op ("EasyCheck","#") InfixOp 1,Op ("EasyCheck","<~>") InfixOp 1,Op ("EasyCheck","~>") InfixOp 1,Op ("EasyCheck","<~") InfixOp 1,Op ("EasyCheck","trivial") InfixOp 1,Op ("EasyCheck","==>") InfixrOp 0]