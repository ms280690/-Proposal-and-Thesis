Prog "GraphInductive" ["FiniteMap","Maybe","Prelude","Sort"] [TypeSyn ("GraphInductive","Node") Public [] (TCons ("Prelude","Int") []),TypeSyn ("GraphInductive","LNode") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]),TypeSyn ("GraphInductive","UNode") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []]),TypeSyn ("GraphInductive","Edge") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]),TypeSyn ("GraphInductive","LEdge") Public [0] (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]),TypeSyn ("GraphInductive","UEdge") Public [] (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","()") []]),TypeSyn ("GraphInductive","Context") Public [0,1] (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]),TypeSyn ("GraphInductive","Adj") Private [0] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]),TypeSyn ("GraphInductive","MContext") Public [0,1] (TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]]),TypeSyn ("GraphInductive","Context'") Public [0,1] (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]),TypeSyn ("GraphInductive","UContext") Public [] (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]),TypeSyn ("GraphInductive","GDecomp") Public [0,1] (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]),TypeSyn ("GraphInductive","Decomp") Public [0,1] (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]),TypeSyn ("GraphInductive","UDecomp") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]],TVar 0]),TypeSyn ("GraphInductive","Path") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]),TypeSyn ("GraphInductive","LPath") Public [0] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]),TypeSyn ("GraphInductive","UPath") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []]]),TypeSyn ("GraphInductive","GraphRep") Private [0,1] (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]]),TypeSyn ("GraphInductive","UGr") Public [] (TCons ("GraphInductive","Graph") [TCons ("Prelude","()") [],TCons ("Prelude","()") []]),Type ("GraphInductive","Graph") Public [0,1] []] [Func ("GraphInductive",":&") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]))) (Rule [] (Var 0)),Func ("GraphInductive","matchAny") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]])) (Rule [] (Var 0)),Func ("GraphInductive","empty") 0 Public (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (Rule [] (Var 0)),Func ("GraphInductive","mkGraph") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","buildGr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0])) (Rule [] (Var 0)),Func ("GraphInductive","mkUGraph") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("GraphInductive","Graph") [TCons ("Prelude","()") [],TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("GraphInductive","insNode") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","insEdge") 2 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]))) (Rule [] (Var 0)),Func ("GraphInductive","delNode") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","delEdge") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","insNodes") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","insEdges") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]))) (Rule [] (Var 0)),Func ("GraphInductive","delNodes") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","delEdges") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","isEmpty") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("GraphInductive","match") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("GraphInductive","noNodes") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("GraphInductive","nodeRange") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("GraphInductive","context") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]))) (Rule [] (Var 0)),Func ("GraphInductive","lab") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("GraphInductive","neighbors") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("GraphInductive","suc") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("GraphInductive","pre") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("GraphInductive","lsuc") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]]))) (Rule [] (Var 0)),Func ("GraphInductive","lpre") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]]))) (Rule [] (Var 0)),Func ("GraphInductive","out") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]))) (Rule [] (Var 0)),Func ("GraphInductive","inn") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]))) (Rule [] (Var 0)),Func ("GraphInductive","outdeg") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("GraphInductive","indeg") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("GraphInductive","deg") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("GraphInductive","gelem") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("GraphInductive","equal") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("GraphInductive","node'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("GraphInductive","lab'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TVar 1)) (Rule [] (Var 0)),Func ("GraphInductive","labNode'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1])) (Rule [] (Var 0)),Func ("GraphInductive","neighbors'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("GraphInductive","suc'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("GraphInductive","pre'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("GraphInductive","lpre'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [] (Var 0)),Func ("GraphInductive","lsuc'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [] (Var 0)),Func ("GraphInductive","out'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]])) (Rule [] (Var 0)),Func ("GraphInductive","inn'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]])) (Rule [] (Var 0)),Func ("GraphInductive","outdeg'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("GraphInductive","indeg'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("GraphInductive","deg'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("GraphInductive","labNodes") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [] (Var 0)),Func ("GraphInductive","labEdges") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]])) (Rule [] (Var 0)),Func ("GraphInductive","nodes") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("GraphInductive","edges") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("GraphInductive","newNodes") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("GraphInductive","ufold") 3 Public (FuncType (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 2) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TVar 2)))) (Rule [] (Var 0)),Func ("GraphInductive","gmap") 1 Public (FuncType (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","Int") []]]])) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 3,TVar 2]))) (Rule [] (Var 0)),Func ("GraphInductive","nmap") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 2]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 2]))) (Rule [] (Var 0)),Func ("GraphInductive","emap") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("GraphInductive","Graph") [TVar 2,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 2,TVar 1]))) (Rule [] (Var 0)),Func ("GraphInductive","labUEdges") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TCons ("Prelude","()") []]])) (Rule [] (Var 0)),Func ("GraphInductive","labUNodes") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","()") []]])) (Rule [] (Var 0)),Func ("GraphInductive","showGraph") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0))] [Op ("GraphInductive",".:") InfixrOp 5,Op ("GraphInductive",":&") InfixrOp 5]