Prog "XML" ["Char","List","Prelude","Read"] [Type ("XML","XmlExp") Public [] [Cons ("XML","XText") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("XML","XElem") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]],Type ("XML","Encoding") Public [] [Cons ("XML","StandardEnc") 0 Public [],Cons ("XML","Iso88591Enc") 0 Public []],Type ("XML","XmlDocParams") Public [] [Cons ("XML","Enc") 1 Public [TCons ("XML","Encoding") []],Cons ("XML","DtdUrl") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("XML","encoding2Attribute") 1 Private (FuncType (TCons ("XML","Encoding") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","StandardEnc") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("XML","Iso88591Enc") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '8'),Comb ConsCall ("Prelude",":") [Lit (Charc  '8'),Comb ConsCall ("Prelude",":") [Lit (Charc  '5'),Comb ConsCall ("Prelude",":") [Lit (Charc  '9'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]])])),Func ("XML","encoding2EncFunc") 1 Private (FuncType (TCons ("XML","Encoding") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","StandardEnc") []) (Comb (FuncPartCall 1) ("XML","standardEncoding") []),Branch (Pattern ("XML","Iso88591Enc") []) (Comb (FuncPartCall 1) ("XML","iso88591Encoding") [])])),Func ("XML","standardEncoding") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '<')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("XML","standardEncoding") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '>')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("XML","standardEncoding") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '&')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("XML","standardEncoding") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("XML","standardEncoding") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("XML","standardEncoding") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","ord") [Var 2],Lit (Intc  32)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","ord") [Var 2]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("XML","standardEncoding") [Var 3]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude",">") [Comb FuncCall ("Prelude","ord") [Var 2],Lit (Intc  127)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","ord") [Var 2]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("XML","standardEncoding") [Var 3]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("XML","standardEncoding") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])])])),Func ("XML","iso88591Encoding") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","ord") [Var 2]],Comb FuncCall ("XML","iso88591list") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("XML","iso88591Encoding") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","standardEncoding") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("XML","iso88591Encoding") [Var 3]])])])),Func ("XML","iso88591list") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Intc  192),Comb ConsCall ("Prelude",":") [Lit (Intc  193),Comb ConsCall ("Prelude",":") [Lit (Intc  194),Comb ConsCall ("Prelude",":") [Lit (Intc  195),Comb ConsCall ("Prelude",":") [Lit (Intc  196),Comb ConsCall ("Prelude",":") [Lit (Intc  197),Comb ConsCall ("Prelude",":") [Lit (Intc  198),Comb ConsCall ("Prelude",":") [Lit (Intc  199),Comb ConsCall ("Prelude",":") [Lit (Intc  200),Comb ConsCall ("Prelude",":") [Lit (Intc  201),Comb ConsCall ("Prelude",":") [Lit (Intc  202),Comb ConsCall ("Prelude",":") [Lit (Intc  203),Comb ConsCall ("Prelude",":") [Lit (Intc  204),Comb ConsCall ("Prelude",":") [Lit (Intc  205),Comb ConsCall ("Prelude",":") [Lit (Intc  207),Comb ConsCall ("Prelude",":") [Lit (Intc  208),Comb ConsCall ("Prelude",":") [Lit (Intc  209),Comb ConsCall ("Prelude",":") [Lit (Intc  210),Comb ConsCall ("Prelude",":") [Lit (Intc  211),Comb ConsCall ("Prelude",":") [Lit (Intc  212),Comb ConsCall ("Prelude",":") [Lit (Intc  214),Comb ConsCall ("Prelude",":") [Lit (Intc  216),Comb ConsCall ("Prelude",":") [Lit (Intc  217),Comb ConsCall ("Prelude",":") [Lit (Intc  218),Comb ConsCall ("Prelude",":") [Lit (Intc  219),Comb ConsCall ("Prelude",":") [Lit (Intc  220),Comb ConsCall ("Prelude",":") [Lit (Intc  221),Comb ConsCall ("Prelude",":") [Lit (Intc  224),Comb ConsCall ("Prelude",":") [Lit (Intc  225),Comb ConsCall ("Prelude",":") [Lit (Intc  228),Comb ConsCall ("Prelude",":") [Lit (Intc  229),Comb ConsCall ("Prelude",":") [Lit (Intc  226),Comb ConsCall ("Prelude",":") [Lit (Intc  227),Comb ConsCall ("Prelude",":") [Lit (Intc  230),Comb ConsCall ("Prelude",":") [Lit (Intc  231),Comb ConsCall ("Prelude",":") [Lit (Intc  233),Comb ConsCall ("Prelude",":") [Lit (Intc  232),Comb ConsCall ("Prelude",":") [Lit (Intc  235),Comb ConsCall ("Prelude",":") [Lit (Intc  234),Comb ConsCall ("Prelude",":") [Lit (Intc  236),Comb ConsCall ("Prelude",":") [Lit (Intc  237),Comb ConsCall ("Prelude",":") [Lit (Intc  239),Comb ConsCall ("Prelude",":") [Lit (Intc  240),Comb ConsCall ("Prelude",":") [Lit (Intc  241),Comb ConsCall ("Prelude",":") [Lit (Intc  248),Comb ConsCall ("Prelude",":") [Lit (Intc  246),Comb ConsCall ("Prelude",":") [Lit (Intc  242),Comb ConsCall ("Prelude",":") [Lit (Intc  243),Comb ConsCall ("Prelude",":") [Lit (Intc  244),Comb ConsCall ("Prelude",":") [Lit (Intc  245),Comb ConsCall ("Prelude",":") [Lit (Intc  250),Comb ConsCall ("Prelude",":") [Lit (Intc  249),Comb ConsCall ("Prelude",":") [Lit (Intc  252),Comb ConsCall ("Prelude",":") [Lit (Intc  251),Comb ConsCall ("Prelude",":") [Lit (Intc  253),Comb ConsCall ("Prelude",":") [Lit (Intc  255),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("XML","lookupEncoding") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlDocParams") []]) (TCons ("XML","Encoding") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("XML","Enc") [4]) (Var 4),Branch (Pattern ("XML","DtdUrl") [5]) (Comb FuncCall ("XML","lookupEncoding") [Var 3])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("XML","StandardEnc") [])])),Func ("XML","lookupDtdUrl") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlDocParams") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("XML","Enc") [4]) (Comb FuncCall ("XML","lookupDtdUrl") [Var 3]),Branch (Pattern ("XML","DtdUrl") [5]) (Var 5)])])),Func ("XML","hasDtdUrl") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlDocParams") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("XML","DtdUrl") [4]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("XML","Enc") [5]) (Comb FuncCall ("XML","hasDtdUrl") [Var 3])])])),Func ("XML","xtxt") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("XML","XmlExp") [])) (Rule [1] (Comb ConsCall ("XML","XText") [Var 1])),Func ("XML","xml") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (TCons ("XML","XmlExp") []))) (Rule [1,2] (Comb ConsCall ("XML","XElem") [Var 1,Comb ConsCall ("Prelude","[]") [],Var 2])),Func ("XML","writeXmlFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("XML","writeXmlFileWithParams") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","Enc") [Comb ConsCall ("XML","StandardEnc") []],Comb ConsCall ("Prelude","[]") []],Var 2])),Func ("XML","writeXmlFileWithParams") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlDocParams") []]) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","writeFile") [Var 1,Comb FuncCall ("XML","showXmlDocWithParams") [Var 2,Var 3]])),Func ("XML","showXmlDoc") 1 Public (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("XML","showXmlDocWithParams") [Comb ConsCall ("Prelude","[]") [],Var 1])),Func ("XML","showXmlDocWithParams") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlDocParams") []]) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("XML","XElem") [3,4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","encoding2Attribute") [Comb FuncCall ("XML","lookupEncoding") [Var 1]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("XML","hasDtdUrl") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]])],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("XML","hasDtdUrl") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","lookupDtdUrl") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb FuncCall ("XML","showXmlExp") [Lit (Intc  0),Comb FuncCall ("XML","encoding2EncFunc") [Comb FuncCall ("XML","lookupEncoding") [Var 1]],Comb ConsCall ("XML","XElem") [Var 3,Var 4,Var 5]]]]]]]])])),Func ("XML","showXmlExp") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("XML","XText") [4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","xtab") [Var 1],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("XML","XElem") [5,6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","xtab") [Var 1],Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","showXmlOpenTag") [Var 5,Var 6,Var 2],Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 7],Lit (Intc  1)],Comb FuncCall ("XML","isXText") [Comb FuncCall ("Prelude","head") [Var 7]]]) [Branch (Pattern ("Prelude","True") []) (Let [(8,Var 7)] (Let [(9,Comb FuncCall ("XML","showXmlExp._#selFP3#s") [Var 8])] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 2,Var 9],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]))),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","showXmlExps") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)],Var 7,Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","xtab") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]])])]]])])),Func ("XML","showXmlExp._#selFP3#s") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("XML","XText") [4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])),Func ("XML","xtab") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","take") [Var 1,Comb FuncCall ("Prelude","repeat") [Lit (Charc  ' ')]])),Func ("XML","showXmlOpenTag") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","concat") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 1) ("XML","showXmlOpenTag.attr2string.125") [Var 3]],Var 2]]]])),Func ("XML","showXmlOpenTag.attr2string.125") 2 Private (FuncType (FuncType (TVar 130) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 130]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]])])),Func ("XML","showXmlExps") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("XML","showXmlExp") [Var 1,Var 3]],Var 2])),Func ("XML","isXText") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XText") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("XML","XElem") [3,4,5]) (Comb ConsCall ("Prelude","False") [])])),Func ("XML","xmlUnquoteSpecials") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '&')]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("XML","splitAtChar") [Lit (Charc  ';'),Var 3])] (Let [(5,Comb FuncCall ("XML","xmlUnquoteSpecials._#selFP5#special") [Var 4])] (Let [(6,Comb FuncCall ("XML","xmlUnquoteSpecials._#selFP6#rest") [Var 4])] (Comb FuncCall ("XML","xmlUnquoteSpecial") [Var 5,Var 6])))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("XML","xmlUnquoteSpecials._#selFP5#special") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","xmlUnquoteSpecials._#selFP6#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","xmlUnquoteSpecial") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Lit (Intc  228)],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Lit (Intc  246)],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Lit (Intc  252)],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Lit (Intc  196)],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Lit (Intc  214)],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Lit (Intc  220)],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Lit (Intc  223)],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("XML","unquoteUnicode") [Var 1],Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])])])])])])])),Func ("XML","unquoteUnicode") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '#')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Charc  'x')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Read","readHex") [Var 5]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Read","readInt") [Var 3]],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Read","readInt") [Var 3]],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 2,Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("XML","readXmlFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("XML","XmlExp") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("XML","readXmlFile._#lambda3") [Var 1]])),Func ("XML","readXmlFile._#lambda3") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("XML","XmlExp") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("XML","parseXmlString") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","tail") [Var 3],Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","head") [Var 3]])])]))),Func ("XML","readUnsafeXmlFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("XML","XmlExp") []]])) (Rule [1] (Comb FuncCall ("Prelude","catchFail") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("XML","readXmlFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("Prelude","Just") []]],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []]])),Func ("XML","showXmlFile") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("XML","readXmlFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStr") [],Comb (FuncPartCall 1) ("XML","showXmlDoc") []]])),Func ("XML","readFileWithXmlDocs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("XML","parseXmlString") []]])),Func ("XML","parseXmlString") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Comb FuncCall ("Prelude","fst") [Comb FuncCall ("XML","parseXmlTokens") [Comb FuncCall ("XML","scanXmlString") [Var 1],Comb ConsCall ("Prelude","Nothing") []]])),Func ("XML","parseXmlTokens") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("XML","XText") [5]) (Let [(6,Comb FuncCall ("XML","parseXmlTokens") [Var 4,Var 2])] (Let [(7,Comb FuncCall ("XML","parseXmlTokens._#selFP8#xexps") [Var 6])] (Let [(8,Comb FuncCall ("XML","parseXmlTokens._#selFP9#rem_xtokens") [Var 6])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XText") [Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 5]],Var 7],Var 8])))),Branch (Pattern ("XML","XElem") [9,10,11]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '<')],Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","head") [Var 13],Lit (Charc  '/')]]) [Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("XML","parseXmlTokens") [Var 4,Comb ConsCall ("Prelude","Just") [Var 13]])] (Let [(15,Comb FuncCall ("XML","parseXmlTokens._#selFP14#xexps1") [Var 14])] (Let [(16,Comb FuncCall ("XML","parseXmlTokens._#selFP15#xtokens1") [Var 14])] (Let [(17,Comb FuncCall ("XML","parseXmlTokens") [Var 16,Var 2])] (Let [(18,Comb FuncCall ("XML","parseXmlTokens._#selFP12#xexps") [Var 17])] (Let [(19,Comb FuncCall ("XML","parseXmlTokens._#selFP13#rem_xtokens") [Var 17])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Var 13,Var 10,Var 15],Var 18],Var 19]))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '<')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 13],Lit (Charc  '/')]]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb FuncCall ("Prelude","tail") [Var 13]],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 4]),Branch (Pattern ("Prelude","False") []) (Let [(20,Comb FuncCall ("XML","parseXmlTokens") [Var 4,Var 2])] (Let [(21,Comb FuncCall ("XML","parseXmlTokens._#selFP17#xexps") [Var 20])] (Let [(22,Comb FuncCall ("XML","parseXmlTokens._#selFP18#rem_xtokens") [Var 20])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Var 13,Var 10,Var 11],Var 21],Var 22]))))]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(23,Comb FuncCall ("XML","parseXmlTokens") [Var 4,Var 2])] (Let [(24,Comb FuncCall ("XML","parseXmlTokens._#selFP20#xexps") [Var 23])] (Let [(25,Comb FuncCall ("XML","parseXmlTokens._#selFP21#rem_xtokens") [Var 23])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Var 12,Var 13],Var 10,Var 11],Var 24],Var 25])))),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Func ("XML","parseXmlTokens._#selFP8#xexps") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseXmlTokens._#selFP9#rem_xtokens") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","parseXmlTokens._#selFP14#xexps1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseXmlTokens._#selFP15#xtokens1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","parseXmlTokens._#selFP12#xexps") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseXmlTokens._#selFP13#rem_xtokens") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","parseXmlTokens._#selFP17#xexps") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseXmlTokens._#selFP18#rem_xtokens") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","parseXmlTokens._#selFP20#xexps") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseXmlTokens._#selFP21#rem_xtokens") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","scanXmlString") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Comb FuncCall ("XML","scanXmlString.scanXml.191") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("XML","dropBlanks") [],Var 1]])),Func ("XML","scanXmlString.scanXml.191") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '<')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlElem") [Var 3]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("XML","scanXmlText") [Comb ConsCall ("Prelude",":") [Var 2,Var 3]])] (Let [(5,Comb FuncCall ("XML","scanXmlString.scanXml.191._#selFP23#initxt") [Var 4])] (Let [(6,Comb FuncCall ("XML","scanXmlString.scanXml.191._#selFP24#remtag") [Var 4])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XText") [Var 5],Comb FuncCall ("XML","scanXmlString.scanXml.191") [Var 6]]))))])])),Func ("XML","scanXmlString.scanXml.191._#selFP23#initxt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","scanXmlString.scanXml.191._#selFP24#remtag") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","scanXmlText") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '<')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Char","isSpace") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("XML","scanXmlText") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("XML","dropBlanks") [],Var 3]])] (Let [(5,Comb FuncCall ("XML","scanXmlText._#selFP26#txt") [Var 4])] (Let [(6,Comb FuncCall ("XML","scanXmlText._#selFP27#rem") [Var 4])] (Comb ConsCall ("Prelude","(,)") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Var 5])],Var 6])))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("XML","scanXmlText") [Var 3])] (Let [(8,Comb FuncCall ("XML","scanXmlText._#selFP29#txt") [Var 7])] (Let [(9,Comb FuncCall ("XML","scanXmlText._#selFP30#rem") [Var 7])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 8],Var 9])))),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("XML","scanXmlText._#selFP26#txt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","scanXmlText._#selFP27#rem") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","scanXmlText._#selFP29#txt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","scanXmlText._#selFP30#rem") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","scanXmlElem") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '!')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  2),Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlComment") [Comb FuncCall ("Prelude","drop") [Lit (Intc  2),Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("XML","scanXmlCData") [Var 3])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '?')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlProcInstr") [Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlElemName") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("XML","scanXmlElemName") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Var 1],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Charc  '>')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Var 1],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("XML","scanXmlString") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Char","isSpace") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("XML","parseAttrs") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("XML","dropBlanks") [],Var 4]])] (Let [(6,Comb FuncCall ("XML","scanXmlElemName._#selFP32#attrs") [Var 5])] (Let [(7,Comb FuncCall ("XML","scanXmlElemName._#selFP33#rest") [Var 5])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 7],Lit (Charc  '/')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Var 1,Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("XML","scanXmlString") [Comb FuncCall ("Prelude","drop") [Lit (Intc  2),Var 7]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Var 1],Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("XML","scanXmlString") [Comb FuncCall ("Prelude","tail") [Var 7]]])])))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Lit (Charc  '/')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 4],Lit (Charc  '>')]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Var 1,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("XML","scanXmlString") [Comb FuncCall ("Prelude","tail") [Var 4]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlElemName") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("XML","scanXmlElemName._#selFP32#attrs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","scanXmlElemName._#selFP33#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","scanXmlComment") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '-')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  2),Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlString") [Comb FuncCall ("Prelude","drop") [Lit (Intc  2),Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("XML","scanXmlComment") [Var 3])])])),Func ("XML","scanXmlCData") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Let [(2,Comb FuncCall ("XML","dropCData") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 2],Lit (Charc  '>')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlString") [Comb FuncCall ("Prelude","tail") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("XML","scanXmlCData") [Var 2])]))),Func ("XML","dropCData") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","tail") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  ']')],Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '>')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","dropCData") [Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("XML","scanXmlProcInstr") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '?')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 3],Lit (Charc  '>')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","scanXmlString") [Comb FuncCall ("Prelude","tail") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("XML","scanXmlProcInstr") [Var 3])])])),Func ("XML","parseAttrs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Char","isAlpha") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("XML","splitAtChar") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Var 2,Var 3]])] (Let [(5,Comb FuncCall ("XML","parseAttrs._#selFP41#name") [Var 4])] (Let [(6,Comb FuncCall ("XML","parseAttrs._#selFP42#rest1") [Var 4])] (Let [(7,Comb FuncCall ("XML","splitAtChar") [Lit (Charc  '"'),Comb FuncCall ("Prelude","tail") [Var 6]])] (Let [(8,Comb FuncCall ("XML","parseAttrs._#selFP39#value") [Var 7])] (Let [(9,Comb FuncCall ("XML","parseAttrs._#selFP40#rest2") [Var 7])] (Let [(10,Comb FuncCall ("XML","parseAttrs") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("XML","dropBlanks") [],Var 9]])] (Let [(11,Comb FuncCall ("XML","parseAttrs._#selFP37#rem_attrs") [Var 10])] (Let [(12,Comb FuncCall ("XML","parseAttrs._#selFP38#rem_inp") [Var 10])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Comb FuncCall ("XML","xmlUnquoteSpecials") [Var 8]],Var 11],Var 12])))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("XML","parseAttrs._#selFP41#name") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseAttrs._#selFP42#rest1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","parseAttrs._#selFP39#value") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseAttrs._#selFP40#rest2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","parseAttrs._#selFP37#rem_attrs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","parseAttrs._#selFP38#rem_inp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","dropBlanks") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isSpace") []])),Func ("XML","splitAtChar") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 4]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("XML","splitAtChar") [Var 1,Var 4])] (Let [(6,Comb FuncCall ("XML","splitAtChar._#selFP44#first") [Var 5])] (Let [(7,Comb FuncCall ("XML","splitAtChar._#selFP45#rest") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7]))))])])),Func ("XML","splitAtChar._#selFP44#first") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 231],TCons ("Prelude","[]") [TVar 231]]) (TCons ("Prelude","[]") [TVar 231])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("XML","splitAtChar._#selFP45#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 231],TCons ("Prelude","[]") [TVar 231]]) (TCons ("Prelude","[]") [TVar 231])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("XML","textOfXml") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","null") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("XML","textOfXml.textOfXmlItem.255") [],Var 1]]]])),Func ("XML","textOfXml.textOfXmlItem.255") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XText") [2]) (Var 2),Branch (Pattern ("XML","XElem") [3,4,5]) (Comb FuncCall ("XML","textOfXml") [Var 5])]))] []