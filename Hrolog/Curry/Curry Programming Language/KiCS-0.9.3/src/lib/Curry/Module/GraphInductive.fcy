Prog "GraphInductive" ["FiniteMap","Maybe","Prelude","Sort"] [TypeSyn ("GraphInductive","Node") Public [] (TCons ("Prelude","Int") []),TypeSyn ("GraphInductive","LNode") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]),TypeSyn ("GraphInductive","UNode") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []]),TypeSyn ("GraphInductive","Edge") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]),TypeSyn ("GraphInductive","LEdge") Public [0] (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]),TypeSyn ("GraphInductive","UEdge") Public [] (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","()") []]),TypeSyn ("GraphInductive","Context") Public [0,1] (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]),TypeSyn ("GraphInductive","Adj") Private [0] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]),TypeSyn ("GraphInductive","MContext") Public [0,1] (TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]]),TypeSyn ("GraphInductive","Context'") Public [0,1] (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]),TypeSyn ("GraphInductive","UContext") Public [] (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]),TypeSyn ("GraphInductive","GDecomp") Public [0,1] (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]),TypeSyn ("GraphInductive","Decomp") Public [0,1] (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]),TypeSyn ("GraphInductive","UDecomp") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]],TVar 0]),TypeSyn ("GraphInductive","Path") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]),TypeSyn ("GraphInductive","LPath") Public [0] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]),TypeSyn ("GraphInductive","UPath") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []]]),TypeSyn ("GraphInductive","GraphRep") Private [0,1] (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]]),TypeSyn ("GraphInductive","UGr") Public [] (TCons ("GraphInductive","Graph") [TCons ("Prelude","()") [],TCons ("Prelude","()") []]),Type ("GraphInductive","Graph") Public [0,1] [Cons ("GraphInductive","Gr") 1 Private [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]]]]] [Func ("GraphInductive",":&") 2 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Case  Flex (Var 2) [Branch (Pattern ("GraphInductive","Gr") [7]) (Let [(8,Comb FuncCall ("FiniteMap","addToFM") [Var 7,Var 4,Comb ConsCall ("Prelude","(,,)") [Var 3,Var 5,Var 6]])] (Let [(9,Comb FuncCall ("GraphInductive","updAdj") [Var 8,Var 3,Comb (FuncPartCall 2) ("GraphInductive","addSucc") [Var 4]])] (Let [(10,Comb FuncCall ("GraphInductive","updAdj") [Var 9,Var 6,Comb (FuncPartCall 2) ("GraphInductive","addPred") [Var 4]])] (Case  Rigid (Comb FuncCall ("FiniteMap","elemFM") [Var 4,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","show") [Var 5]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("GraphInductive","Gr") [Var 10]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))))])])),Func ("GraphInductive","matchAny") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GraphInductive","Gr") [2]) (Case  Rigid (Comb FuncCall ("FiniteMap","isEmptyFM") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","head") [Comb FuncCall ("FiniteMap","fmToListPreOrder") [Var 2]]) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("GraphInductive","match") [Var 3,Comb ConsCall ("GraphInductive","Gr") [Var 2]]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","Just") [7]) (Comb ConsCall ("Prelude","(,)") [Var 7,Var 6]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","failed") [])])])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("GraphInductive","empty") 0 Public (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (Rule [] (Comb ConsCall ("GraphInductive","Gr") [Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]])),Func ("GraphInductive","mkGraph") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("GraphInductive","insEdges") [Var 2],Comb (FuncPartCall 1) ("GraphInductive","insNodes") [Var 1]],Comb FuncCall ("GraphInductive","empty") []])),Func ("GraphInductive","buildGr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("GraphInductive",":&") [],Comb FuncCall ("GraphInductive","empty") []])),Func ("GraphInductive","mkUGraph") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("GraphInductive","Graph") [TCons ("Prelude","()") [],TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("GraphInductive","mkGraph") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","labUNodes") [],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","labUEdges") [],Var 2]])),Func ("GraphInductive","insNode") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb (FuncPartCall 1) ("GraphInductive",":&") [Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Var 2,Var 3,Comb ConsCall ("Prelude","[]") []]])])),Func ("GraphInductive","insEdge") 2 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Let [(6,Comb FuncCall ("GraphInductive","match") [Var 3,Var 2])] (Let [(7,Comb FuncCall ("GraphInductive","insEdge._#selFP3#pr") [Var 6])] (Let [(8,Comb FuncCall ("GraphInductive","insEdge._#selFP4#la") [Var 6])] (Let [(9,Comb FuncCall ("GraphInductive","insEdge._#selFP5#su") [Var 6])] (Let [(10,Comb FuncCall ("GraphInductive","insEdge._#selFP6#g'") [Var 6])] (Comb FuncCall ("GraphInductive",":&") [Comb ConsCall ("Prelude","(,,,)") [Var 7,Var 3,Var 8,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 4],Var 9]],Var 10]))))))])),Func ("GraphInductive","insEdge._#selFP3#pr") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 212,TVar 213]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Just") [4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,,,)") [5,6,7,8]) (Var 5)])])])),Func ("GraphInductive","insEdge._#selFP4#la") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 212,TVar 213]]) (TVar 212)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Just") [4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,,,)") [5,6,7,8]) (Var 7)])])])),Func ("GraphInductive","insEdge._#selFP5#su") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 212,TVar 213]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Just") [4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,,,)") [5,6,7,8]) (Var 8)])])])),Func ("GraphInductive","insEdge._#selFP6#g'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 212,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 213,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 212,TVar 213]]) (TCons ("GraphInductive","Graph") [TVar 212,TVar 213])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Just") [4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,,,)") [5,6,7,8]) (Var 3)])])])),Func ("GraphInductive","delNode") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [1] (Comb (FuncPartCall 1) ("GraphInductive","delNodes") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("GraphInductive","delEdge") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("GraphInductive","match") [Var 3,Var 2]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","Nothing") []) (Var 2),Branch (Pattern ("Prelude","Just") [7]) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Comb FuncCall ("GraphInductive",":&") [Comb ConsCall ("Prelude","(,,,)") [Var 8,Var 9,Var 10,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Var 4],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 11]],Var 6])])])])])),Func ("GraphInductive","insNodes") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 1) ("GraphInductive","insNode") [],Var 2,Var 1])),Func ("GraphInductive","insEdges") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("GraphInductive","insEdge") [],Var 2,Var 1])),Func ("GraphInductive","delNodes") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("GraphInductive","delNodes") [Var 4,Comb FuncCall ("Prelude","snd") [Comb FuncCall ("GraphInductive","match") [Var 3,Var 2]]])])),Func ("GraphInductive","delEdges") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("GraphInductive","delEdge") [],Var 2,Var 1])),Func ("GraphInductive","isEmpty") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GraphInductive","Gr") [2]) (Comb FuncCall ("FiniteMap","isEmptyFM") [Var 2])])),Func ("GraphInductive","match") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 0,TVar 1]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("GraphInductive","Gr") [3]) (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("GraphInductive","Gr") [Var 3]],Comb (FuncPartCall 1) ("GraphInductive","match._#lambda5") [Var 1],Comb FuncCall ("FiniteMap","splitFM") [Var 3,Var 1]])])),Func ("GraphInductive","match._#lambda5") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]],TVar 148,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]]]],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]],TVar 148,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 148,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 146,TCons ("Prelude","Int") []]]]],TCons ("GraphInductive","Graph") [TVar 148,TVar 146]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,,)") [7,8,9]) (Let [(10,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Var 1],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 9])] (Let [(11,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Var 1],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 7])] (Let [(12,Comb FuncCall ("GraphInductive","updAdj") [Var 3,Var 10,Comb (FuncPartCall 2) ("GraphInductive","clearPred") [Var 1]])] (Let [(13,Comb FuncCall ("GraphInductive","updAdj") [Var 12,Var 11,Comb (FuncPartCall 2) ("GraphInductive","clearSucc") [Var 1]])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,,,)") [Var 11,Var 1,Var 8,Var 9]],Comb ConsCall ("GraphInductive","Gr") [Var 13]])))))])])])),Func ("GraphInductive","noNodes") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GraphInductive","Gr") [2]) (Comb FuncCall ("FiniteMap","sizeFM") [Var 2])])),Func ("GraphInductive","nodeRange") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GraphInductive","Gr") [2]) (Let [(3,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb (FuncPartCall 1) ("Maybe","fromJust") []])] (Case  Rigid (Comb FuncCall ("FiniteMap","isEmptyFM") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Lit (Intc  0)]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","minFM") [],Var 2]],Comb FuncCall ("Prelude","apply") [Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","maxFM") [],Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("GraphInductive","context") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("GraphInductive","match") [Var 2,Var 1]) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]]),Branch (Pattern ("Prelude","Just") [5]) (Var 5)])])),Func ("GraphInductive","lab") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Prelude","fst") [Comb FuncCall ("GraphInductive","match") [Var 2,Var 1]],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb (FuncPartCall 1) ("GraphInductive","lab'") []]])),Func ("GraphInductive","neighbors") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("GraphInductive","neighbors._#lambda7") []],Comb (FuncPartCall 2) ("GraphInductive","context") []])),Func ("GraphInductive","neighbors._#lambda7") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 416,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 415,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 416,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb FuncCall ("Prelude","++") [Var 2,Var 5]])])),Func ("GraphInductive","suc") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") []]],Comb FuncCall ("GraphInductive","context4") []])),Func ("GraphInductive","pre") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") []]],Comb FuncCall ("GraphInductive","context1") []])),Func ("GraphInductive","lsuc") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]]))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","flip2") []]],Comb FuncCall ("GraphInductive","context4") []])),Func ("GraphInductive","lpre") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]]))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","flip2") []]],Comb FuncCall ("GraphInductive","context1") []])),Func ("GraphInductive","out") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","out._#lambda8") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","context4") [],Var 1],Var 2]])),Func ("GraphInductive","out._#lambda8") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 511,TCons ("Prelude","Int") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 511]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,,)") [Var 1,Var 4,Var 3])])),Func ("GraphInductive","inn") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","inn._#lambda9") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","context1") [],Var 1],Var 2]])),Func ("GraphInductive","inn._#lambda9") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 521,TCons ("Prelude","Int") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 521]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,,)") [Var 4,Var 1,Var 3])])),Func ("GraphInductive","outdeg") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("Prelude","length") []],Comb FuncCall ("GraphInductive","context4") []])),Func ("GraphInductive","indeg") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("Prelude","length") []],Comb FuncCall ("GraphInductive","context1") []])),Func ("GraphInductive","deg") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("GraphInductive","deg._#lambda10") []],Comb (FuncPartCall 2) ("GraphInductive","context") []])),Func ("GraphInductive","deg._#lambda10") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 553,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 552,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 553,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","length") [Var 2],Comb FuncCall ("Prelude","length") [Var 5]])])),Func ("GraphInductive","gelem") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Maybe","isJust") [Comb FuncCall ("Prelude","fst") [Comb FuncCall ("GraphInductive","match") [Var 1,Var 2]]])),Func ("GraphInductive","equal") 2 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","slabNodes") [],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","slabNodes") [],Var 2]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","slabEdges") [],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","slabEdges") [],Var 2]]])),Func ("GraphInductive","nodeComp") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","fst") [Var 1],Comb FuncCall ("Prelude","fst") [Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("GraphInductive","slabNodes") 0 Private (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("GraphInductive","sortBy") [Comb (FuncPartCall 2) ("GraphInductive","nodeComp") []],Comb (FuncPartCall 1) ("GraphInductive","labNodes") []])),Func ("GraphInductive","edgeComp") 2 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Let [(3,Var 1)] (Let [(4,Comb FuncCall ("GraphInductive","edgeComp._#selFP11#v") [Var 3])] (Let [(5,Comb FuncCall ("GraphInductive","edgeComp._#selFP12#w") [Var 3])] (Let [(6,Var 2)] (Let [(7,Comb FuncCall ("GraphInductive","edgeComp._#selFP9#x") [Var 6])] (Let [(8,Comb FuncCall ("GraphInductive","edgeComp._#selFP10#y") [Var 6])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","<") [Var 4,Var 7],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Var 7],Comb FuncCall ("Prelude","<") [Var 5,Var 8]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])))))))),Func ("GraphInductive","edgeComp._#selFP11#v") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("GraphInductive","edgeComp._#selFP12#w") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("GraphInductive","edgeComp._#selFP9#x") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("GraphInductive","edgeComp._#selFP10#y") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 613]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("GraphInductive","slabEdges") 0 Private (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("GraphInductive","sortBy") [Comb (FuncPartCall 2) ("GraphInductive","edgeComp") []],Comb (FuncPartCall 1) ("GraphInductive","labEdges") []])),Func ("GraphInductive","node'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("GraphInductive","lab'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TVar 1)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("GraphInductive","labNode'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])])),Func ("GraphInductive","neighbors'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 2],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 5]])])),Func ("GraphInductive","suc'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 5])])),Func ("GraphInductive","pre'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 2])])),Func ("GraphInductive","lpre'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","flip2") [],Var 2])])),Func ("GraphInductive","lsuc'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","flip2") [],Var 5])])),Func ("GraphInductive","out'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","out'._#lambda11") [Var 3],Var 5])])),Func ("GraphInductive","out'._#lambda11") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 732,TCons ("Prelude","Int") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 732]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,,)") [Var 1,Var 4,Var 3])])),Func ("GraphInductive","inn'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","inn'._#lambda12") [Var 3],Var 2])])),Func ("GraphInductive","inn'._#lambda12") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 742,TCons ("Prelude","Int") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 742]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,,)") [Var 4,Var 1,Var 3])])),Func ("GraphInductive","outdeg'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","length") [Var 5])])),Func ("GraphInductive","indeg'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","length") [Var 2])])),Func ("GraphInductive","deg'") 1 Public (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","length") [Var 2],Comb FuncCall ("Prelude","length") [Var 5]])])),Func ("GraphInductive","labNodes") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GraphInductive","Gr") [2]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","labNodes._#lambda13") [],Comb FuncCall ("FiniteMap","fmToList") [Var 2]])])),Func ("GraphInductive","labNodes._#lambda13") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 574,TCons ("Prelude","Int") []]],TVar 573,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 574,TCons ("Prelude","Int") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 573])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 5])])])),Func ("GraphInductive","labEdges") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 1]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GraphInductive","Gr") [2]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("GraphInductive","labEdges._#lambda14") []],Comb FuncCall ("FiniteMap","fmToList") [Var 2]])])),Func ("GraphInductive","labEdges._#lambda14") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 620,TCons ("Prelude","Int") []]],TVar 619,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 620,TCons ("Prelude","Int") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 620]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","labEdges._#lambda14._#lambda15") [Var 2],Var 6])])])),Func ("GraphInductive","labEdges._#lambda14._#lambda15") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 620,TCons ("Prelude","Int") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 620]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,,)") [Var 1,Var 4,Var 3])])),Func ("GraphInductive","nodes") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") []],Comb (FuncPartCall 1) ("GraphInductive","labNodes") []])),Func ("GraphInductive","edges") 0 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","edges._#lambda16") []],Comb (FuncPartCall 1) ("GraphInductive","labEdges") []])),Func ("GraphInductive","edges._#lambda16") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 788]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 3])])),Func ("GraphInductive","newNodes") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("GraphInductive","nodeRange") [Var 2])] (Let [(4,Comb FuncCall ("GraphInductive","newNodes._#selFP14#n") [Var 3])] (Comb FuncCall ("Prelude","enumFromTo") [Comb FuncCall ("Prelude","+") [Var 4,Lit (Intc  1)],Comb FuncCall ("Prelude","+") [Var 4,Var 1]])))),Func ("GraphInductive","newNodes._#selFP14#n") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("GraphInductive","ufold") 3 Public (FuncType (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 2) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TVar 2)))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("GraphInductive","matchAny") [Var 3])] (Let [(5,Comb FuncCall ("GraphInductive","ufold._#selFP16#c") [Var 4])] (Let [(6,Comb FuncCall ("GraphInductive","ufold._#selFP17#g'") [Var 4])] (Case  Rigid (Comb FuncCall ("GraphInductive","isEmpty") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 5],Comb FuncCall ("GraphInductive","ufold") [Var 1,Var 2,Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))))),Func ("GraphInductive","ufold._#selFP16#c") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 806,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]]],TCons ("GraphInductive","Graph") [TVar 806,TVar 807]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 806,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("GraphInductive","ufold._#selFP17#g'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 806,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 807,TCons ("Prelude","Int") []]]],TCons ("GraphInductive","Graph") [TVar 806,TVar 807]]) (TCons ("GraphInductive","Graph") [TVar 806,TVar 807])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("GraphInductive","gmap") 1 Public (FuncType (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","Int") []]]])) (FuncType (TCons ("GraphInductive","Graph") [TVar 1,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 3,TVar 2]))) (Rule [1] (Comb (FuncPartCall 1) ("GraphInductive","ufold") [Comb (FuncPartCall 1) ("GraphInductive","gmap._#lambda17") [Var 1],Comb FuncCall ("GraphInductive","empty") []])),Func ("GraphInductive","gmap._#lambda17") 2 Private (FuncType (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 822,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 830,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 829,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 830,TCons ("Prelude","Int") []]]])) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 822,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 821,TCons ("Prelude","Int") []]]]) (FuncType (TCons ("GraphInductive","Graph") [TVar 829,TVar 830]) (TCons ("GraphInductive","Graph") [TVar 829,TVar 830])))) (Rule [1,2] (Comb (FuncPartCall 1) ("GraphInductive",":&") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2]])),Func ("GraphInductive","nmap") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 2]) (TCons ("GraphInductive","Graph") [TVar 1,TVar 2]))) (Rule [1] (Comb FuncCall ("GraphInductive","gmap") [Comb (FuncPartCall 1) ("GraphInductive","nmap._#lambda18") [Var 1]])),Func ("GraphInductive","nmap._#lambda18") 2 Private (FuncType (FuncType (TVar 841) (TVar 844)) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 841,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 844,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 837,TCons ("Prelude","Int") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb ConsCall ("Prelude","(,,,)") [Var 3,Var 4,Comb FuncCall ("Prelude","apply") [Var 1,Var 5],Var 6])])),Func ("GraphInductive","emap") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("GraphInductive","Graph") [TVar 2,TVar 0]) (TCons ("GraphInductive","Graph") [TVar 2,TVar 1]))) (Rule [1] (Comb FuncCall ("GraphInductive","gmap") [Comb (FuncPartCall 1) ("GraphInductive","emap._#lambda20") [Var 1]])),Func ("GraphInductive","emap.map1.213") 1 Private (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 2]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 2]]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","emap.map1.213._#lambda19") [Var 1]])),Func ("GraphInductive","emap.map1.213._#lambda19") 2 Private (FuncType (FuncType (TVar 853) (TVar 856)) (FuncType (TCons ("Prelude","(,)") [TVar 853,TVar 854]) (TCons ("Prelude","(,)") [TVar 856,TVar 854]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4])])),Func ("GraphInductive","emap._#lambda20") 2 Private (FuncType (FuncType (TVar 865) (TVar 866)) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 865,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 863,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 865,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 866,TCons ("Prelude","Int") []]],TCons ("Prelude","Int") [],TVar 863,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 866,TCons ("Prelude","Int") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb ConsCall ("Prelude","(,,,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","emap.map1.213") [Var 1],Var 3],Var 4,Var 5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive","emap.map1.213") [Var 1],Var 6]])])),Func ("GraphInductive","labUEdges") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TCons ("Prelude","()") []]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","labUEdges._#lambda21") []])),Func ("GraphInductive","labUEdges._#lambda21") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 249,TVar 250]) (TCons ("Prelude","(,,)") [TVar 249,TVar 250,TCons ("Prelude","()") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,,)") [Var 2,Var 3,Comb ConsCall ("Prelude","()") []])])),Func ("GraphInductive","labUNodes") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","()") []]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","labUNodes._#lambda22") []])),Func ("GraphInductive","labUNodes._#lambda22") 1 Private (FuncType (TVar 254) (TCons ("Prelude","(,)") [TVar 254,TCons ("Prelude","()") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude","()") []])),Func ("GraphInductive","showGraph") 1 Public (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GraphInductive","Gr") [2]) (Comb FuncCall ("Prelude","unlines") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GraphInductive","showNode") [],Comb FuncCall ("FiniteMap","fmToList") [Var 2]]])])),Func ("GraphInductive","showNode") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","(,,)") [TVar 1,TVar 2,TVar 3]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","show") [Var 6]]]]])])])),Func ("GraphInductive",".:") 0 Private (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (FuncType (TVar 3) (TVar 0))) (FuncType (TVar 2) (FuncType (TVar 3) (TVar 1))))) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("Prelude",".") [],Comb (FuncPartCall 2) ("Prelude",".") []])),Func ("GraphInductive","fst4") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("GraphInductive","fth4") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TVar 3)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("GraphInductive","flip2") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TVar 1,TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Var 3,Var 2])])),Func ("GraphInductive","context1") 0 Private (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("GraphInductive","fst4") []],Comb (FuncPartCall 2) ("GraphInductive","context") []])),Func ("GraphInductive","context4") 0 Private (FuncType (TCons ("GraphInductive","Graph") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","Int") []]]))) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("GraphInductive",".:") [],Comb (FuncPartCall 1) ("GraphInductive","fth4") []],Comb (FuncPartCall 2) ("GraphInductive","context") []])),Func ("GraphInductive","addSucc") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]]) (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb ConsCall ("Prelude","(,,)") [Var 4,Var 5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 1],Var 6]])])),Func ("GraphInductive","addPred") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]],TVar 2,TVar 3]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]],TVar 2,TVar 3])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 1],Var 4],Var 5,Var 6])])),Func ("GraphInductive","clearSucc") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 4,TVar 0]]]) (TCons ("Prelude","(,,)") [TVar 2,TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 4,TVar 0]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb ConsCall ("Prelude","(,,)") [Var 4,Var 5,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Var 1],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 6]])])),Func ("GraphInductive","clearPred") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TVar 0]],TVar 3,TVar 4]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 2,TVar 0]],TVar 3,TVar 4])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Var 1],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 4],Var 5,Var 6])])),Func ("GraphInductive","updAdj") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]))) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]],TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]]])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 1),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Rigid (Comb FuncCall ("FiniteMap","elemFM") [Var 7,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("GraphInductive","updAdj") [Comb FuncCall ("FiniteMap","updFM") [Var 1,Var 7,Comb FuncCall ("Prelude","apply") [Var 3,Var 6]],Var 5,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 7]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("GraphInductive","sortBy") 1 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb (FuncPartCall 1) ("Sort","mergeSort") [Comb (FuncPartCall 2) ("GraphInductive","sortBy._#lambda23") [Var 1]])),Func ("GraphInductive","sortBy._#lambda23") 3 Private (FuncType (FuncType (TVar 587) (FuncType (TVar 587) (TCons ("Prelude","Ordering") []))) (FuncType (TVar 587) (FuncType (TVar 587) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3])] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","EQ") []],Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","LT") []]])))] [Op ("GraphInductive",".:") InfixrOp 5,Op ("GraphInductive",":&") InfixrOp 5]