CurryProg "FlatCurryTools"
 ["Prelude","FlatCurry","List","Char"]
 []
 [CFunc ("FlatCurryTools","isCharConstant") 1 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("FlatCurry","Lit") [CPComb ("FlatCurry","Charc") [CPVar (1,"_")]]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("FlatCurryTools","isFiniteList") 1 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Var") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("FlatCurry","Lit") [CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("FlatCurry","Comb") [CPVar (2,"_"),CPVar (3,"name"),CPVar (4,"args")]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"args"))) (CSymbol ("Prelude","[]"))),CSymbol ("Prelude","True")),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (4,"args")))) (CLit (CIntc 2))),CApply (CSymbol ("FlatCurryTools","isFiniteList")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (4,"args"))) (CLit (CIntc 1)))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("FlatCurry","Let") [CPVar (5,"_"),CPVar (6,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("FlatCurry","Free") [CPVar (7,"_"),CPVar (8,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("FlatCurry","Or") [CPVar (9,"_"),CPVar (10,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("FlatCurry","Case") [CPVar (11,"_"),CPVar (12,"_"),CPVar (13,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] []]),
  CFunc ("FlatCurryTools","isFuncType") 1 Private (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","TVar") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("FlatCurry","FuncType") [CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPComb ("FlatCurry","TCons") [CPVar (3,"_"),CPVar (4,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] []]),
  CFunc ("FlatCurryTools","isStringConstant") 1 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("FlatCurry","Comb") [CPVar (1,"_"),CPVar (2,"name"),CPVar (3,"args")]) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","null")) (CVar (3,"args"))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (3,"args")))) (CLit (CIntc 2)))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("FlatCurryTools","isCharConstant")) (CApply (CSymbol ("Prelude","head")) (CVar (3,"args"))))) (CApply (CSymbol ("FlatCurryTools","isStringConstant")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (3,"args"))) (CLit (CIntc 1)))))))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("FlatCurryTools","sceBlanks") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","take")) (CVar (0,"b"))) (CApply (CSymbol ("Prelude","repeat")) (CLit (CCharc ' '))))] []]),
  CFunc ("FlatCurryTools","showBracketsIf") 2 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"nested"),CPVar (1,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (0,"nested"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))) (CVar (1,"s")))] []]),
  CFunc ("FlatCurryTools","showCharExpr") 1 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Lit") [CPComb ("FlatCurry","Charc") [CPVar (0,"c")]]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '"')),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\'')),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\n')),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))),(CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (1,"o"))) (CLit (CIntc 32)))) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (1,"o"))) (CLit (CIntc 126))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (1,"o"))) (CLit (CIntc 100)))) (CLit (CIntc 48))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","div")) (CApply (CApply (CSymbol ("Prelude","mod")) (CVar (1,"o"))) (CLit (CIntc 100)))) (CLit (CIntc 10)))) (CLit (CIntc 48))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","mod")) (CVar (1,"o"))) (CLit (CIntc 10)))) (CLit (CIntc 48))))) (CSymbol ("Prelude","[]")))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))] [CLocalPat (CPVar (1,"o")) (CApply (CSymbol ("Prelude","ord")) (CVar (0,"c"))) []]]),
  CFunc ("FlatCurryTools","showCurryCase") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","BranchExpr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))) (CRules CFlex [CRule [CPVar (0,"tf"),CPVar (1,"b"),CPComb ("FlatCurry","Branch") [CPComb ("FlatCurry","Pattern") [CPVar (2,"l"),CPVar (3,"vs")],CPVar (4,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (1,"b")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showPattern")) (CApply (CVar (0,"tf")) (CVar (2,"l")))) (CVar (3,"vs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (0,"tf"))) (CSymbol ("Prelude","False"))) (CVar (1,"b"))) (CVar (4,"e")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))] [CLocalFunc (CFunc ("FlatCurryTools","showPattern") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (5,"c"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CVar (5,"c"))] [],CRule [CPVar (6,"c"),CPComb ("Prelude",":") [CPVar (7,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"c"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (7,"x")))))] [],CRule [CPVar (8,"c"),CPComb ("Prelude",":") [CPVar (9,"x1"),CPComb ("Prelude",":") [CPVar (10,"x2"),CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Char","isAlpha")) (CApply (CSymbol ("Prelude","head")) (CVar (8,"c"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"c"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (9,"x1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (10,"x2")))))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (9,"x1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (10,"x2")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (9,"x1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"c"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (10,"x2")))))))))] [],CRule [CPVar (11,"c"),CPComb ("Prelude",":") [CPVar (12,"x1"),CPComb ("Prelude",":") [CPVar (13,"x2"),CPComb ("Prelude",":") [CPVar (14,"x3"),CPVar (15,"xs")]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (11,"c")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryTools","showCurryVar"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"x1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (13,"x2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (14,"x3"))) (CVar (15,"xs"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (11,"c"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("FlatCurryTools","showCurryElems")) (CSymbol ("FlatCurryTools","showCurryVar"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"x1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (13,"x2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (14,"x3"))) (CVar (15,"xs")))))))))] []]))],CRule [CPVar (5,"tf"),CPVar (6,"b"),CPComb ("FlatCurry","Branch") [CPComb ("FlatCurry","LPattern") [CPVar (7,"l")],CPVar (8,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (6,"b")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryLit")) (CVar (7,"l")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (5,"tf"))) (CSymbol ("Prelude","False"))) (CVar (6,"b"))) (CVar (8,"e")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("FlatCurryTools","showCurryElems") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"format"),CPVar (1,"elems")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"format"))) (CVar (1,"elems")))))] []]),
  CFunc ("FlatCurryTools","showCurryExpr") 4 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPComb ("FlatCurry","Var") [CPVar (3,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (3,"n")))] [],CRule [CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_"),CPComb ("FlatCurry","Lit") [CPVar (7,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurryTools","showCurryLit")) (CVar (7,"l")))] [],CRule [CPVar (8,"tf"),CPVar (9,"_"),CPVar (10,"_"),CPComb ("FlatCurry","Comb") [CPVar (11,"_"),CPVar (12,"cf"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurryTools","showCurryId")) (CApply (CVar (8,"tf")) (CVar (12,"cf"))))] [],CRule [CPVar (13,"tf"),CPVar (14,"nested"),CPVar (15,"b"),CPComb ("FlatCurry","Comb") [CPVar (16,"_"),CPVar (17,"cf"),CPComb ("Prelude",":") [CPVar (18,"e"),CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (14,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryId")) (CApply (CVar (13,"tf")) (CVar (17,"cf"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (13,"tf"))) (CSymbol ("Prelude","True"))) (CVar (15,"b"))) (CVar (18,"e"))))))] [],CRule [CPVar (19,"tf"),CPVar (20,"nested"),CPVar (21,"b"),CPComb ("FlatCurry","Comb") [CPVar (22,"ct"),CPVar (23,"cf"),CPComb ("Prelude",":") [CPVar (24,"e1"),CPComb ("Prelude",":") [CPVar (25,"e2"),CPComb ("Prelude","[]") []]]]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"cf"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (20,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (19,"tf"))) (CSymbol ("Prelude","True"))) (CVar (21,"b"))) (CVar (24,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (19,"tf"))) (CSymbol ("Prelude","True"))) (CVar (21,"b"))) (CVar (25,"e2")))))),(CApply (CSymbol ("Char","isAlpha")) (CApply (CSymbol ("Prelude","head")) (CApply (CSymbol ("Prelude","snd")) (CVar (23,"cf")))),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (20,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (19,"tf")) (CVar (23,"cf")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("FlatCurryTools","showCurryElems")) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (19,"tf"))) (CSymbol ("Prelude","True"))) (CVar (21,"b")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (25,"e2"))) (CSymbol ("Prelude","[]")))))))),(CApply (CSymbol ("FlatCurryTools","isFiniteList")) (CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CVar (22,"ct"))) (CVar (23,"cf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (25,"e2"))) (CSymbol ("Prelude","[]"))))),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FlatCurryTools","isStringConstant")) (CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CVar (22,"ct"))) (CVar (23,"cf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (25,"e2"))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryStringConstant")) (CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CVar (22,"ct"))) (CVar (23,"cf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (25,"e2"))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryFiniteList")) (CVar (19,"tf"))) (CVar (21,"b"))) (CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CVar (22,"ct"))) (CVar (23,"cf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (25,"e2"))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))),(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","snd")) (CVar (23,"cf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (19,"tf"))) (CSymbol ("Prelude","False"))) (CVar (21,"b"))) (CVar (24,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (19,"tf"))) (CSymbol ("Prelude","False"))) (CVar (21,"b"))) (CVar (25,"e2")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (20,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (19,"tf"))) (CSymbol ("Prelude","True"))) (CVar (21,"b"))) (CVar (24,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (19,"tf")) (CVar (23,"cf")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (19,"tf"))) (CSymbol ("Prelude","True"))) (CVar (21,"b"))) (CVar (25,"e2"))))))))] [],CRule [CPVar (26,"tf"),CPVar (27,"nested"),CPVar (28,"b"),CPComb ("FlatCurry","Comb") [CPVar (29,"_"),CPVar (30,"cf"),CPComb ("Prelude",":") [CPVar (31,"e1"),CPComb ("Prelude",":") [CPVar (32,"e2"),CPComb ("Prelude",":") [CPVar (33,"e3"),CPVar (34,"es")]]]]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (30,"cf"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (34,"es"))) (CSymbol ("Prelude","[]"))),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (27,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (28,"b")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (26,"tf"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (28,"b"))) (CLit (CIntc 2)))) (CVar (31,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (28,"b")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (26,"tf"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (28,"b"))) (CLit (CIntc 2)))) (CVar (32,"e2")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (28,"b")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (26,"tf"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (28,"b"))) (CLit (CIntc 2)))) (CVar (33,"e3"))))))))))))))),(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CApply (CSymbol ("Prelude","snd")) (CVar (30,"cf"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (26,"tf"))) (CSymbol ("Prelude","False"))) (CVar (28,"b")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (31,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (32,"e2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (33,"e3"))) (CVar (34,"es"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (27,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryId")) (CApply (CVar (26,"tf")) (CVar (30,"cf"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("FlatCurryTools","showCurryElems")) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (26,"tf"))) (CSymbol ("Prelude","True"))) (CVar (28,"b")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (31,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (32,"e2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (33,"e3"))) (CVar (34,"es")))))))))] [],CRule [CPVar (35,"tf"),CPVar (36,"nested"),CPVar (37,"b"),CPComb ("FlatCurry","Let") [CPVar (38,"bindings"),CPVar (39,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (36,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (37,"b")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (37,"b"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (40,"x"),CPVar (41,"e")]] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCurryVar")) (CVar (40,"x")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (35,"tf"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (37,"b"))) (CLit (CIntc 4)))) (CVar (41,"e"))))))) (CVar (38,"bindings")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (37,"b")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (35,"tf"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (37,"b"))) (CLit (CIntc 4)))) (CVar (39,"exp")))))))))] [],CRule [CPVar (42,"tf"),CPVar (43,"nested"),CPVar (44,"b"),CPComb ("FlatCurry","Free") [CPComb ("Prelude","[]") [],CPVar (45,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (42,"tf"))) (CVar (43,"nested"))) (CVar (44,"b"))) (CVar (45,"e")))] [],CRule [CPVar (46,"tf"),CPVar (47,"nested"),CPVar (48,"b"),CPComb ("FlatCurry","Free") [CPComb ("Prelude",":") [CPVar (49,"x"),CPVar (50,"xs")],CPVar (51,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (47,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryTools","showCurryVar"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (49,"x"))) (CVar (50,"xs"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (46,"tf"))) (CSymbol ("Prelude","False"))) (CVar (48,"b"))) (CVar (51,"e")))))))] [],CRule [CPVar (52,"tf"),CPVar (53,"nested"),CPVar (54,"b"),CPComb ("FlatCurry","Or") [CPVar (55,"e1"),CPVar (56,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (53,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (52,"tf"))) (CSymbol ("Prelude","True"))) (CVar (54,"b"))) (CVar (55,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (52,"tf"))) (CSymbol ("Prelude","True"))) (CVar (54,"b"))) (CVar (56,"e2"))))))] [],CRule [CPVar (57,"tf"),CPVar (58,"nested"),CPVar (59,"b"),CPComb ("FlatCurry","Case") [CPVar (60,"ctype"),CPVar (61,"e"),CPVar (62,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (58,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (60,"ctype"))) (CSymbol ("FlatCurry","Rigid")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (57,"tf"))) (CSymbol ("Prelude","True"))) (CVar (59,"b"))) (CVar (61,"e")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showCurryElems")) (CApply (CApply (CSymbol ("FlatCurryTools","showCurryCase")) (CVar (57,"tf"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (59,"b"))) (CLit (CIntc 2))))) (CVar (62,"cs")))) (CApply (CSymbol ("FlatCurryTools","sceBlanks")) (CVar (59,"b"))))))))] []]),
  CFunc ("FlatCurryTools","showCurryFiniteList") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("FlatCurry","Comb") [CPVar (2,"_"),CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (3,"tf"),CPVar (4,"b"),CPComb ("FlatCurry","Comb") [CPVar (5,"_"),CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (6,"e1"),CPComb ("Prelude",":") [CPVar (7,"e2"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryExpr")) (CVar (3,"tf"))) (CSymbol ("Prelude","False"))) (CVar (4,"b"))) (CVar (6,"e1")))) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryFiniteList")) (CVar (3,"tf"))) (CVar (4,"b"))) (CVar (7,"e2"))))] []]),
  CFunc ("FlatCurryTools","showCurryId") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CApply (CSymbol ("Char","isAlpha")) (CApply (CSymbol ("Prelude","head")) (CVar (0,"name"))),CVar (0,"name")),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))),CVar (0,"name")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatCurryTools","showCurryLit") 1 Private (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Intc") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","show")) (CVar (0,"i")))] [],CRule [CPComb ("FlatCurry","Floatc") [CPVar (1,"f")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","show")) (CVar (1,"f")))] [],CRule [CPComb ("FlatCurry","Charc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","show")) (CVar (2,"c")))] []]),
  CFunc ("FlatCurryTools","showCurryStringConstant") 1 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Comb") [CPVar (0,"_"),CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("FlatCurry","Comb") [CPVar (1,"_"),CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (2,"e1"),CPComb ("Prelude",":") [CPVar (3,"e2"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showCharExpr")) (CVar (2,"e1")))) (CApply (CSymbol ("FlatCurryTools","showCurryStringConstant")) (CVar (3,"e2"))))] []]),
  CFunc ("FlatCurryTools","showCurryType") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("FlatCurry","TVar") [CPVar (2,"i")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (2,"i"))) (CLit (CIntc 5)))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CApply (CSymbol ("Prelude","+")) (CLit (CIntc 97))) (CVar (2,"i"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CSymbol ("Prelude","show")) (CVar (2,"i")))))] [],CRule [CPVar (3,"tf"),CPVar (4,"nested"),CPComb ("FlatCurry","FuncType") [CPVar (5,"t1"),CPVar (6,"t2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (4,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryType")) (CVar (3,"tf"))) (CApply (CSymbol ("FlatCurryTools","isFuncType")) (CVar (5,"t1")))) (CVar (5,"t1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryType")) (CVar (3,"tf"))) (CSymbol ("Prelude","False"))) (CVar (6,"t2"))))))] [],CRule [CPVar (7,"tf"),CPVar (8,"nested"),CPComb ("FlatCurry","TCons") [CPVar (9,"tc"),CPVar (10,"ts")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"ts"))) (CSymbol ("Prelude","[]")),CApply (CVar (7,"tf")) (CVar (9,"tc"))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (9,"tc"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (10,"ts")))) (CApply (CApply (CSymbol ("FlatCurry","TCons")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (9,"tc"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryType")) (CVar (7,"tf"))) (CSymbol ("Prelude","False"))) (CApply (CSymbol ("Prelude","head")) (CVar (10,"ts"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))),(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CApply (CSymbol ("Prelude","snd")) (CVar (9,"tc"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("FlatCurryTools","showCurryType")) (CVar (7,"tf"))) (CSymbol ("Prelude","False")))) (CVar (10,"ts")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("FlatCurryTools","showBracketsIf")) (CVar (8,"nested"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (7,"tf")) (CVar (9,"tc")))) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPVar (11,"t")] (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CApply (CSymbol ("FlatCurryTools","showCurryType")) (CVar (7,"tf"))) (CSymbol ("Prelude","True"))) (CVar (11,"t")))))) (CVar (10,"ts")))))] []]),
  CFunc ("FlatCurryTools","showCurryVar") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))] []]),
  CFunc ("FlatCurryTools","showFlatBranch") 1 Private (CFuncType (CTCons ("FlatCurry","BranchExpr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Branch") [CPVar (0,"p"),CPVar (1,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatPattern")) (CVar (0,"p")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (1,"e")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("FlatCurryTools","showFlatCombType") 1 Private (CFuncType (CTCons ("FlatCurry","CombType") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","FuncCall") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))] [],CRule [CPComb ("FlatCurry","ConsCall") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))] [],CRule [CPComb ("FlatCurry","FuncPartCall") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"n")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","ConsPartCall") [CPVar (1,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"n")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryTools","showFlatCons") 1 Private (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Cons") [CPVar (0,"cname"),CPVar (1,"arity"),CPVar (2,"vis"),CPVar (3,"types")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"cname")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"arity")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatVisibility")) (CVar (2,"vis")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatTypeExpr"))) (CVar (3,"types")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("FlatCurryTools","showFlatExpr") 1 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Var") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"n")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","Lit") [CPVar (1,"l")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatLit")) (CVar (1,"l")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","Comb") [CPVar (2,"ctype"),CPVar (3,"cf"),CPVar (4,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatCombType")) (CVar (2,"ctype")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (3,"cf")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatExpr"))) (CVar (4,"es")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))] [],CRule [CPComb ("FlatCurry","Let") [CPVar (5,"bindings"),CPVar (6,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatBinding"))) (CVar (5,"bindings")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (6,"exp")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [CLocalFunc (CFunc ("FlatCurryTools","showFlatBinding") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("FlatCurry","Expr") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (7,"x"),CPVar (8,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (7,"x")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (8,"e")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] []]))],CRule [CPComb ("FlatCurry","Free") [CPVar (7,"xs"),CPVar (8,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("Prelude","show"))) (CVar (7,"xs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (8,"e")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("FlatCurry","Or") [CPVar (9,"e1"),CPVar (10,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (9,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (10,"e2")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPComb ("FlatCurry","Case") [CPComb ("FlatCurry","Rigid") [],CPVar (11,"e"),CPVar (12,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (11,"e")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatBranch"))) (CVar (12,"bs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("FlatCurry","Case") [CPComb ("FlatCurry","Flex") [],CPVar (13,"e"),CPVar (14,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (13,"e")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatBranch"))) (CVar (14,"bs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("FlatCurryTools","showFlatFixity") 1 Private (CFuncType (CTCons ("FlatCurry","Fixity") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","InfixOp") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))] [],CRule [CPComb ("FlatCurry","InfixlOp") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))] [],CRule [CPComb ("FlatCurry","InfixrOp") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))] []]),
  CFunc ("FlatCurryTools","showFlatFunc") 1 Public (CFuncType (CTCons ("FlatCurry","FuncDecl") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Func") [CPVar (0,"name"),CPVar (1,"arity"),CPVar (2,"vis"),CPVar (3,"ftype"),CPVar (4,"rl")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"arity")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatVisibility")) (CVar (2,"vis")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatTypeExpr")) (CVar (3,"ftype")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatRule")) (CVar (4,"rl")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))))))] []]),
  CFunc ("FlatCurryTools","showFlatList") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"format"),CPVar (1,"elems")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatListElems")) (CVar (0,"format"))) (CVar (1,"elems")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("FlatCurryTools","showFlatListElems") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"format"),CPVar (1,"elems")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"format"))) (CVar (1,"elems")))))] []]),
  CFunc ("FlatCurryTools","showFlatLit") 1 Private (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Intc") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","Floatc") [CPVar (1,"f")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"f")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","Charc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">=")) (CApply (CSymbol ("Prelude","ord")) (CVar (2,"c")))) (CLit (CIntc 32)))) (CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","ord")) (CVar (2,"c")))) (CLit (CIntc 127))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CApply (CSymbol ("Prelude","ord")) (CVar (2,"c"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("FlatCurryTools","showFlatOp") 1 Private (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Op") [CPVar (0,"name"),CPVar (1,"fix"),CPVar (2,"prec")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatFixity")) (CVar (1,"fix")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (2,"prec")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("FlatCurryTools","showFlatPattern") 1 Private (CFuncType (CTCons ("FlatCurry","Pattern") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Pattern") [CPVar (0,"qn"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"qn")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("Prelude","show"))) (CVar (1,"xs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("FlatCurry","LPattern") [CPVar (2,"lit")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatLit")) (CVar (2,"lit")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryTools","showFlatProg") 1 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Prog") [CPVar (0,"modname"),CPVar (1,"imports"),CPVar (2,"types"),CPVar (3,"funcs"),CPVar (4,"ops")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"modname")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"imports"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatListElems")) (CSymbol ("Prelude","show"))) (CVar (1,"imports")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"types"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatListElems")) (CSymbol ("FlatCurryTools","showFlatType"))) (CVar (2,"types")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatListElems")) (CSymbol ("FlatCurryTools","showFlatFunc"))) (CVar (3,"funcs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatOp"))) (CVar (4,"ops")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))] []]),
  CFunc ("FlatCurryTools","showFlatRule") 1 Private (CFuncType (CTCons ("FlatCurry","Rule") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Rule") [CPVar (0,"params"),CPVar (1,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("Prelude","show"))) (CVar (0,"params")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatExpr")) (CVar (1,"expr")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("FlatCurry","External") [CPVar (2,"name")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (2,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryTools","showFlatType") 1 Public (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Type") [CPVar (0,"name"),CPVar (1,"vis"),CPVar (2,"tpars"),CPVar (3,"consdecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatVisibility")) (CVar (1,"vis")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("Prelude","show"))) (CVar (2,"tpars")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatCons"))) (CVar (3,"consdecls")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))] [],CRule [CPComb ("FlatCurry","TypeSyn") [CPVar (4,"name"),CPVar (5,"vis"),CPVar (6,"tpars"),CPVar (7,"texp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (4,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatVisibility")) (CVar (5,"vis")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("Prelude","show"))) (CVar (6,"tpars")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatTypeExpr")) (CVar (7,"texp")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("FlatCurryTools","showFlatTypeExpr") 1 Private (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","FuncType") [CPVar (0,"t1"),CPVar (1,"t2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatTypeExpr")) (CVar (0,"t1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryTools","showFlatTypeExpr")) (CVar (1,"t2")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPComb ("FlatCurry","TCons") [CPVar (2,"tc"),CPVar (3,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (2,"tc")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FlatCurryTools","showFlatList")) (CSymbol ("FlatCurryTools","showFlatTypeExpr"))) (CVar (3,"ts")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("FlatCurry","TVar") [CPVar (4,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (4,"n")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryTools","showFlatVisibility") 1 Private (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","Public") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))] [],CRule [CPComb ("FlatCurry","Private") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))] []])]
 []
