Module "CurryStringClassifier"
(Just (Exporting (29,10) [(Export (QualIdent Nothing (Ident "Tokens" 0))),(ExportTypeAll (QualIdent Nothing (Ident "Token" 0))),(Export (QualIdent Nothing (Ident "scan" 0))),(Export (QualIdent Nothing (Ident "plainCode" 0))),(Export (QualIdent Nothing (Ident "unscan" 0))),(Export (QualIdent Nothing (Ident "isSmallComment" 0))),(Export (QualIdent Nothing (Ident "isBigComment" 0))),(Export (QualIdent Nothing (Ident "isComment" 0))),(Export (QualIdent Nothing (Ident "isText" 0))),(Export (QualIdent Nothing (Ident "isLetter" 0))),(Export (QualIdent Nothing (Ident "isCode" 0))),(Export (QualIdent Nothing (Ident "isModuleHead" 0))),(Export (QualIdent Nothing (Ident "isMeta" 0))),(Export (QualIdent Nothing (Ident "readScan" 0))),(Export (QualIdent Nothing (Ident "testScan" 0)))]))
[(ImportDecl (1,1) "Prelude" False Nothing Nothing)
,(ImportDecl (34,1) "Char" False Nothing (Just (Importing (34,12) [(Import (Ident "isDigit" 0)),(Import (Ident "isSpace" 0))])))
,(DataDecl (37,1) (Ident "Token" 0) [] [(ConstrDecl (37,15) [] (Ident "SmallComment" 0) [(ConstructorType (QualIdent Nothing (Ident "String" 0)) [])]),(ConstrDecl (38,15) [] (Ident "BigComment" 0) [(ConstructorType (QualIdent Nothing (Ident "String" 0)) [])]),(ConstrDecl (39,15) [] (Ident "Text" 0) [(ConstructorType (QualIdent Nothing (Ident "String" 0)) [])]),(ConstrDecl (40,15) [] (Ident "Letter" 0) [(ConstructorType (QualIdent Nothing (Ident "String" 0)) [])]),(ConstrDecl (41,15) [] (Ident "Code" 0) [(ConstructorType (QualIdent Nothing (Ident "String" 0)) [])]),(ConstrDecl (42,15) [] (Ident "ModuleHead" 0) [(ConstructorType (QualIdent Nothing (Ident "String" 0)) [])]),(ConstrDecl (43,15) [] (Ident "Meta" 0) [(ConstructorType (QualIdent Nothing (Ident "String" 0)) [])])])
,(TypeDecl (45,1) (Ident "Tokens" 0) [] (ListType (ConstructorType (QualIdent Nothing (Ident "Token" 0)) [])))
,(FunctionDecl (49,1) (Ident "isSmallComment" 0) [(Equation (49,1) (FunLhs (Ident "isSmallComment" 0) [(VariablePattern (Ident "x" 2))]) (SimpleRhs (49,20) (Case (Variable (QualIdent Nothing (Ident "x" 2))) [(Alt (50,21) (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0)) [(VariablePattern (Ident "_" 5))]) (SimpleRhs (50,39) (Constructor (QualIdent (Just "Prelude") (Ident "True" 0))) [])),(Alt (51,21) (VariablePattern (Ident "_" 8)) (SimpleRhs (51,26) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0))) []))]) []))])
,(FunctionDecl (54,1) (Ident "isBigComment" 0) [(Equation (54,1) (FunLhs (Ident "isBigComment" 0) [(VariablePattern (Ident "x" 10))]) (SimpleRhs (54,18) (Case (Variable (QualIdent Nothing (Ident "x" 10))) [(Alt (55,21) (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0)) [(VariablePattern (Ident "_" 13))]) (SimpleRhs (55,37) (Constructor (QualIdent (Just "Prelude") (Ident "True" 0))) [])),(Alt (56,21) (VariablePattern (Ident "_" 16)) (SimpleRhs (56,26) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0))) []))]) []))])
,(FunctionDecl (59,1) (Ident "isComment" 0) [(Equation (59,1) (FunLhs (Ident "isComment" 0) [(VariablePattern (Ident "x" 18))]) (SimpleRhs (59,15) (InfixApply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "isSmallComment" 0))) (Variable (QualIdent Nothing (Ident "x" 18)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "isBigComment" 0))) (Variable (QualIdent Nothing (Ident "x" 18))))) []))])
,(FunctionDecl (62,1) (Ident "isText" 0) [(Equation (62,1) (FunLhs (Ident "isText" 0) [(VariablePattern (Ident "x" 20))]) (SimpleRhs (62,12) (Case (Variable (QualIdent Nothing (Ident "x" 20))) [(Alt (63,21) (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0)) [(VariablePattern (Ident "_" 23))]) (SimpleRhs (63,31) (Constructor (QualIdent (Just "Prelude") (Ident "True" 0))) [])),(Alt (64,21) (VariablePattern (Ident "_" 26)) (SimpleRhs (64,26) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0))) []))]) []))])
,(FunctionDecl (67,1) (Ident "isLetter" 0) [(Equation (67,1) (FunLhs (Ident "isLetter" 0) [(VariablePattern (Ident "x" 28))]) (SimpleRhs (67,14) (Case (Variable (QualIdent Nothing (Ident "x" 28))) [(Alt (68,21) (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Letter" 0)) [(VariablePattern (Ident "_" 31))]) (SimpleRhs (68,33) (Constructor (QualIdent (Just "Prelude") (Ident "True" 0))) [])),(Alt (69,21) (VariablePattern (Ident "_" 34)) (SimpleRhs (69,26) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0))) []))]) []))])
,(FunctionDecl (72,1) (Ident "isCode" 0) [(Equation (72,1) (FunLhs (Ident "isCode" 0) [(VariablePattern (Ident "x" 36))]) (SimpleRhs (72,12) (Case (Variable (QualIdent Nothing (Ident "x" 36))) [(Alt (73,21) (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "_" 39))]) (SimpleRhs (73,31) (Constructor (QualIdent (Just "Prelude") (Ident "True" 0))) [])),(Alt (74,21) (VariablePattern (Ident "_" 42)) (SimpleRhs (74,26) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0))) []))]) []))])
,(FunctionDecl (77,1) (Ident "isModuleHead" 0) [(Equation (77,1) (FunLhs (Ident "isModuleHead" 0) [(VariablePattern (Ident "x" 44))]) (SimpleRhs (77,18) (Case (Variable (QualIdent Nothing (Ident "x" 44))) [(Alt (78,21) (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "ModuleHead" 0)) [(VariablePattern (Ident "_" 47))]) (SimpleRhs (78,37) (Constructor (QualIdent (Just "Prelude") (Ident "True" 0))) [])),(Alt (79,21) (VariablePattern (Ident "_" 50)) (SimpleRhs (79,26) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0))) []))]) []))])
,(FunctionDecl (82,1) (Ident "isMeta" 0) [(Equation (82,1) (FunLhs (Ident "isMeta" 0) [(VariablePattern (Ident "x" 52))]) (SimpleRhs (82,12) (Case (Variable (QualIdent Nothing (Ident "x" 52))) [(Alt (83,21) (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0)) [(VariablePattern (Ident "_" 55))]) (SimpleRhs (83,31) (Constructor (QualIdent (Just "Prelude") (Ident "True" 0))) [])),(Alt (84,21) (VariablePattern (Ident "_" 58)) (SimpleRhs (84,26) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0))) []))]) []))])
,(TypeSig (86,1) [(Ident "weaveIntoCode" 0)] (ArrowType (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) [])) (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []))))
,(FunctionDecl (87,1) (Ident "weaveIntoCode" 0) [(Equation (87,1) (FunLhs (Ident "weaveIntoCode" 0) [(VariablePattern (Ident "f" 60)),(VariablePattern (Ident "ts" 60))]) (SimpleRhs (88,4) (Let [(PatternDecl (88,8) (TuplePattern [(VariablePattern (Ident "cs" 62)),(VariablePattern (Ident "ncs" 62))]) (SimpleRhs (88,19) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unweaveCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 60)))) []))] (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "weave" 0))) (Tuple [(Apply (Variable (QualIdent Nothing (Ident "f" 60))) (Variable (QualIdent Nothing (Ident "cs" 62)))),(Variable (QualIdent Nothing (Ident "ncs" 62)))]))) []))])
,(TypeSig (90,1) [(Ident "unweaveCode" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (TupleType [(ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []),(ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) [])])))
,(FunctionDecl (91,1) (Ident "unweaveCode" 0) [(Equation (91,1) (FunLhs (Ident "unweaveCode" 0) [(ListPattern [])]) (SimpleRhs (91,18) (Tuple [(List []),(List [])]) [])),(Equation (92,1) (FunLhs (Ident "unweaveCode" 0) [(ParenPattern (InfixPattern (VariablePattern (Ident "t" 66)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 66))))]) (SimpleRhs (92,22) (Let [(PatternDecl (92,26) (TuplePattern [(VariablePattern (Ident "cs" 68)),(VariablePattern (Ident "ncs" 68))]) (SimpleRhs (92,37) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unweaveCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 66)))) []))] (IfThenElse (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "isCode" 0))) (Variable (QualIdent Nothing (Ident "t" 66)))) (Tuple [(InfixApply (Variable (QualIdent Nothing (Ident "t" 66))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 68)))),(Variable (QualIdent Nothing (Ident "ncs" 68)))]) (Tuple [(Variable (QualIdent Nothing (Ident "cs" 68))),(InfixApply (Variable (QualIdent Nothing (Ident "t" 66))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ncs" 68))))]))) []))])
,(FunctionDecl (95,1) (Ident "weave" 0) [(Equation (95,1) (FunLhs (Ident "weave" 0) [(VariablePattern (Ident "xys" 70))]) (SimpleRhs (95,13) (Case (Variable (QualIdent Nothing (Ident "xys" 70))) [(Alt (96,8) (TuplePattern [(ListPattern []),(ListPattern [])]) (SimpleRhs (96,19) (List []) [])),(Alt (97,8) (TuplePattern [(ListPattern []),(ListPattern [(VariablePattern (Ident "y" 74))])]) (SimpleRhs (97,20) (List [(Variable (QualIdent Nothing (Ident "y" 74)))]) [])),(Alt (98,8) (TuplePattern [(ListPattern [(VariablePattern (Ident "x" 76))]),(ListPattern [])]) (SimpleRhs (98,20) (List [(Variable (QualIdent Nothing (Ident "x" 76)))]) [])),(Alt (99,8) (TuplePattern [(InfixPattern (VariablePattern (Ident "x" 78)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "xs" 78))),(InfixPattern (VariablePattern (Ident "y" 78)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ys" 78)))]) (SimpleRhs (99,23) (InfixApply (Variable (QualIdent Nothing (Ident "x" 78))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "y" 78))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "weave" 0))) (Tuple [(Variable (QualIdent Nothing (Ident "xs" 78))),(Variable (QualIdent Nothing (Ident "ys" 78)))])))) []))]) []))])
,(TypeSig (108,1) [(Ident "scan" 0)] (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) [])))
,(FunctionDecl (109,1) (Ident "scan" 0) [(Equation (109,1) (FunLhs (Ident "scan" 0) [(VariablePattern (Ident "s" 80))]) (SimpleRhs (109,10) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Variable (QualIdent (Just "Prelude") (Ident "id" 0)))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Literal (Int (Ident "_" 82) 1))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "x" 81)))))) (Variable (QualIdent Nothing (Ident "x" 81)))) (Variable (QualIdent Nothing (Ident "s" 80)))))) [(ExtraVariables (109,54) [(Ident "x" 81)])]))])
,(TypeSig (111,1) [(Ident "stateScan" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Int" 0)) []) (ArrowType (ConstructorType (QualIdent Nothing (Ident "Token" 0)) []) (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []))))))
,(FunctionDecl (112,1) (Ident "stateScan" 0) [(Equation (112,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "_" 84)),(VariablePattern (Ident "token" 83)),(VariablePattern (Ident "x" 83)),(LiteralPattern (String ""))]) (GuardedRhs [(CondExpr (112,25) (InfixApply (Variable (QualIdent Nothing (Ident "x" 83))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String ""))) (List [(Variable (QualIdent Nothing (Ident "token" 83)))]))] [])),(Equation (113,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "_" 87)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "co" 86))])),(VariablePattern (Ident "x" 86)),(ListPattern [(VariablePattern (Ident "c" 86))])]) (GuardedRhs [(CondExpr (113,29) (InfixApply (Variable (QualIdent Nothing (Ident "x" 86))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (List [(Variable (QualIdent Nothing (Ident "c" 86)))])) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeCode" 0))) (Variable (QualIdent Nothing (Ident "co" 86)))) (List [])))] [])),(Equation (114,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "_" 90)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0)) [(VariablePattern (Ident "t" 89))])),(VariablePattern (Ident "x" 89)),(ListPattern [(VariablePattern (Ident "c" 89))])]) (GuardedRhs [(CondExpr (115,3) (InfixApply (Variable (QualIdent Nothing (Ident "x" 89))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String ""))) (IfThenElse (InfixApply (Variable (QualIdent Nothing (Ident "c" 89))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '"'))) (List [(Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0))) (Variable (QualIdent Nothing (Ident "t" 89))))]) (Apply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (Literal (String "File ended while scanning string.")))))] [])),(Equation (117,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "_" 93)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0)) [(VariablePattern (Ident "_" 94))])),(VariablePattern (Ident "x" 92)),(ListPattern [(VariablePattern (Ident "_" 95))])]) (GuardedRhs [(CondExpr (118,3) (InfixApply (Variable (QualIdent Nothing (Ident "x" 92))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String ""))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (Literal (String "File ended while expecting -}"))))] [])),(Equation (119,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "_" 98)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0)) [(VariablePattern (Ident "_" 99))])),(VariablePattern (Ident "x" 97)),(ListPattern [(VariablePattern (Ident "_" 100))])]) (GuardedRhs [(CondExpr (120,3) (InfixApply (Variable (QualIdent Nothing (Ident "x" 97))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String ""))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (Literal (String "File ended while expecting +}"))))] [])),(Equation (121,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "line" 102)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "co" 102))])),(VariablePattern (Ident "x" 102)),(ParenPattern (InfixPattern (VariablePattern (Ident "c" 102)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "c'" 102)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "cs" 102)))))]) (GuardedRhs [(CondExpr (122,3) (InfixApply (Variable (QualIdent Nothing (Ident "c" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '"'))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String "")))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Paren (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeCode" 0))) (Variable (QualIdent Nothing (Ident "co" 102)))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 102))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 102))))))))))),(CondExpr (124,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '-'))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c'" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '-')))) (Let [(PatternDecl (125,9) (TuplePattern [(VariablePattern (Ident "comment" 104)),(VariablePattern (Ident "rest" 104))]) (SimpleRhs (125,26) (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "span" 0))) (RightSection (InfixOp (QualIdent (Just "Prelude") (Ident "/=" 0))) (Literal (Char '\n')))) (Variable (QualIdent Nothing (Ident "cs" 102)))) []))] (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String "")))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeCode" 0))) (Variable (QualIdent Nothing (Ident "co" 102)))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0))) (Variable (QualIdent Nothing (Ident "comment" 104)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Variable (QualIdent Nothing (Ident "rest" 104))))))))))),(CondExpr (129,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '{'))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c'" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '-')))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String "")))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeCode" 0))) (Variable (QualIdent Nothing (Ident "co" 102)))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Variable (QualIdent Nothing (Ident "cs" 102)))))))),(CondExpr (131,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '{'))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c'" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '+')))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String "")))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeCode" 0))) (Variable (QualIdent Nothing (Ident "co" 102)))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Variable (QualIdent Nothing (Ident "cs" 102)))))))),(CondExpr (133,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c'" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\''))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "elem" 0))) (Variable (QualIdent Nothing (Ident "c" 102)))) (Paren (InfixApply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "infixIDs" 0))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Variable (QualIdent (Just "CurryStringClassifier") (Ident "delimiters" 0))))))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (List [(Variable (QualIdent Nothing (Ident "c" 102)))]))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (InfixApply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeCode" 0))) (Variable (QualIdent Nothing (Ident "co" 102)))) (InfixOp (QualIdent (Just "Prelude") (Ident "$" 0))) (Case (Variable (QualIdent Nothing (Ident "cs" 102))) [(Alt (136,8) (InfixPattern (LiteralPattern (Char '\\')) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "l" 106)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (LiteralPattern (Char '\'')) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "rest" 106))))) (SimpleRhs (136,28) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Letter" 0))) (List [(Literal (Char '\\')),(Variable (QualIdent Nothing (Ident "l" 106)))])) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Variable (QualIdent Nothing (Ident "rest" 106)))))) [])),(Alt (137,8) (InfixPattern (LiteralPattern (Char '\\')) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "a" 108)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "b" 108)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "d" 108)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (LiteralPattern (Char '\'')) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "rest" 108))))))) (SimpleRhs (138,10) (IfThenElse (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "all" 0))) (Variable (QualIdent (Just "Char") (Ident "isDigit" 0)))) (List [(Variable (QualIdent Nothing (Ident "a" 108))),(Variable (QualIdent Nothing (Ident "b" 108))),(Variable (QualIdent Nothing (Ident "d" 108)))])) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Letter" 0))) (List [(Literal (Char '\\')),(Variable (QualIdent Nothing (Ident "a" 108))),(Variable (QualIdent Nothing (Ident "b" 108))),(Variable (QualIdent Nothing (Ident "d" 108)))])) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Variable (QualIdent Nothing (Ident "rest" 108)))))) (InfixApply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (InfixOp (QualIdent (Just "Prelude") (Ident "$" 0))) (InfixApply (Literal (String "Improperly terminated character found in line ")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "show" 0))) (Variable (QualIdent Nothing (Ident "line" 102))))))) [])),(Alt (142,8) (InfixPattern (VariablePattern (Ident "l" 110)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (LiteralPattern (Char '\'')) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "rest" 110)))) (SimpleRhs (142,28) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Letter" 0))) (List [(Variable (QualIdent Nothing (Ident "l" 110)))])) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Variable (QualIdent Nothing (Ident "rest" 110)))))) [])),(Alt (143,8) (VariablePattern (Ident "_" 113)) (SimpleRhs (143,13) (InfixApply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (InfixOp (QualIdent (Just "Prelude") (Ident "$" 0))) (InfixApply (Literal (String "Improperly terminated character in line ")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "show" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))))) []))])))),(CondExpr (144,3) (InfixApply (Variable (QualIdent Nothing (Ident "c" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\n'))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 102))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "line" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Literal (Int (Ident "_" 115) 1))))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "co" 102)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 102))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 102)))))))),(CondExpr (146,3) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 102))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 102))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 103)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 102)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "co" 102)))))) (Variable (QualIdent Nothing (Ident "y" 103)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 102))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 102))))))))] [(ExtraVariables (149,5) [(Ident "y" 103)])])),(Equation (150,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "line" 116)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0)) [(VariablePattern (Ident "co" 116))])),(VariablePattern (Ident "x" 116)),(ParenPattern (InfixPattern (VariablePattern (Ident "c" 116)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "c'" 116)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "cs" 116)))))]) (GuardedRhs [(CondExpr (151,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 116))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '-'))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c'" 116))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '}')))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 116))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String "")))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0))) (Variable (QualIdent Nothing (Ident "co" 116)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 116)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "y" 117)))))) (Variable (QualIdent Nothing (Ident "y" 117)))) (Variable (QualIdent Nothing (Ident "cs" 116)))))))),(CondExpr (153,3) (InfixApply (Variable (QualIdent Nothing (Ident "c" 116))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\n'))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 116))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 116))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 117)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "line" 116))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Literal (Int (Ident "_" 118) 1))))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0))) (Variable (QualIdent Nothing (Ident "co" 116)))))) (Variable (QualIdent Nothing (Ident "y" 117)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 116))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 116)))))))),(CondExpr (155,3) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 116))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 116))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 117)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 116)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0))) (Variable (QualIdent Nothing (Ident "co" 116)))))) (Variable (QualIdent Nothing (Ident "y" 117)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 116))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 116))))))))] [(ExtraVariables (158,4) [(Ident "y" 117)])])),(Equation (159,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "line" 119)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0)) [(VariablePattern (Ident "co" 119))])),(VariablePattern (Ident "x" 119)),(ParenPattern (InfixPattern (VariablePattern (Ident "c" 119)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "c'" 119)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "cs" 119)))))]) (GuardedRhs [(CondExpr (160,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 119))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '+'))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c'" 119))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '}')))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 119))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String "")))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0))) (Variable (QualIdent Nothing (Ident "co" 119)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 119)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "y" 120)))))) (Variable (QualIdent Nothing (Ident "y" 120)))) (Variable (QualIdent Nothing (Ident "cs" 119)))))))),(CondExpr (162,3) (InfixApply (Variable (QualIdent Nothing (Ident "c" 119))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\n'))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 119))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 119))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 120)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "line" 119))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Literal (Int (Ident "_" 121) 1))))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0))) (Variable (QualIdent Nothing (Ident "co" 119)))))) (Variable (QualIdent Nothing (Ident "y" 120)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 119))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 119)))))))),(CondExpr (164,3) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 119))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 119))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 120)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 119)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0))) (Variable (QualIdent Nothing (Ident "co" 119)))))) (Variable (QualIdent Nothing (Ident "y" 120)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 119))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 119))))))))] [(ExtraVariables (167,4) [(Ident "y" 120)])])),(Equation (168,1) (FunLhs (Ident "stateScan" 0) [(VariablePattern (Ident "line" 122)),(ParenPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0)) [(VariablePattern (Ident "t" 122))])),(VariablePattern (Ident "x" 122)),(ParenPattern (InfixPattern (VariablePattern (Ident "c" 122)) (QualIdent Nothing (Ident ":" 0)) (InfixPattern (VariablePattern (Ident "c'" 122)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "cs" 122)))))]) (GuardedRhs [(CondExpr (169,3) (InfixApply (Variable (QualIdent Nothing (Ident "c" 122))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '"'))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 122))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (Literal (String "")))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0))) (Variable (QualIdent Nothing (Ident "t" 122)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 122)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "y" 123)))))) (Variable (QualIdent Nothing (Ident "y" 123)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 122))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 122)))))))))),(CondExpr (170,3) (InfixApply (Variable (QualIdent Nothing (Ident "c" 122))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\\'))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 122))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 122))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c'" 122))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 123))))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 122)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0))) (Variable (QualIdent Nothing (Ident "t" 122)))))) (Variable (QualIdent Nothing (Ident "y" 123)))) (Variable (QualIdent Nothing (Ident "cs" 122)))))),(CondExpr (171,3) (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "elem" 0))) (Variable (QualIdent Nothing (Ident "c" 122)))) (Variable (QualIdent (Just "CurryStringClassifier") (Ident "toBeEscaped" 0)))) (InfixApply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (InfixOp (QualIdent (Just "Prelude") (Ident "$" 0))) (InfixApply (Literal (String "unescaped ")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 122))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (InfixApply (Literal (String " encountered in line ")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "show" 0))) (Variable (QualIdent Nothing (Ident "line" 122))))))))),(CondExpr (173,3) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (InfixApply (Paren (InfixApply (Variable (QualIdent Nothing (Ident "x" 122))) (InfixOp (QualIdent (Just "Prelude") (Ident "=:=" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "c" 122))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "y" 123)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&>" 0))) (Apply (Apply (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "stateScan" 0))) (Variable (QualIdent Nothing (Ident "line" 122)))) (Paren (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0))) (Variable (QualIdent Nothing (Ident "t" 122)))))) (Variable (QualIdent Nothing (Ident "y" 123)))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "c'" 122))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "cs" 122))))))))] [(ExtraVariables (175,4) [(Ident "y" 123)])]))])
,(TypeSig (177,1) [(Ident "modHead" 0)] (ArrowType (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []))) (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []))))
,(FunctionDecl (178,1) (Ident "modHead" 0) [(Equation (178,1) (FunLhs (Ident "modHead" 0) [(VariablePattern (Ident "fs" 124)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "c" 124))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 124))))]) (SimpleRhs (179,5) (Case (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "break" 0))) (Paren (Lambda [(VariablePattern (Ident "x" 126))] (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "x" 126))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\n'))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "x" 126))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\r'))))))) (Variable (QualIdent Nothing (Ident "c" 124)))) [(Alt (180,7) (TuplePattern [(LiteralPattern (String "")),(LiteralPattern (String ""))]) (SimpleRhs (180,23) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Variable (QualIdent Nothing (Ident "fs" 124)))) (Variable (QualIdent Nothing (Ident "ts" 124)))) [])),(Alt (181,7) (TuplePattern [(LiteralPattern (String "")),(InfixPattern (VariablePattern (Ident "n" 129)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "rest" 129)))]) (SimpleRhs (181,23) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "fs" 124))) (InfixOp (QualIdent (Just "Prelude") (Ident "." 0))) (LeftSection (Variable (QualIdent Nothing (Ident "n" 129))) (InfixConstr (QualIdent Nothing (Ident ":" 0))))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "rest" 129)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 124)))))) [])),(Alt (182,7) (TuplePattern [(VariablePattern (Ident "line" 131)),(LiteralPattern (String ""))]) (SimpleRhs (182,23) (IfThenElse (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "any" 0))) (Paren (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "lineBeginsWith" 0))) (Variable (QualIdent Nothing (Ident "line" 131)))))) (Variable (QualIdent (Just "CurryStringClassifier") (Ident "headers" 0)))) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "ModuleHead" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 124))) (Variable (QualIdent Nothing (Ident "line" 131)))))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHeadInLine" 0))) (Variable (QualIdent (Just "Prelude") (Ident "id" 0)))) (Variable (QualIdent Nothing (Ident "ts" 124)))))) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 124))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "c" 124)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 124))))))) [])),(Alt (185,7) (TuplePattern [(VariablePattern (Ident "line" 133)),(InfixPattern (VariablePattern (Ident "n" 133)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "rest" 133)))]) (SimpleRhs (185,23) (IfThenElse (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "any" 0))) (Paren (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "lineBeginsWith" 0))) (Variable (QualIdent Nothing (Ident "line" 133)))))) (Variable (QualIdent (Just "CurryStringClassifier") (Ident "headers" 0)))) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "fs" 124))) (InfixOp (QualIdent (Just "Prelude") (Ident "." 0))) (InfixApply (LeftSection (Variable (QualIdent Nothing (Ident "line" 133))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0)))) (InfixOp (QualIdent (Just "Prelude") (Ident "." 0))) (LeftSection (Variable (QualIdent Nothing (Ident "n" 133))) (InfixConstr (QualIdent Nothing (Ident ":" 0)))))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "rest" 133)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 124)))))) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 124))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "c" 124)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 124))))))) []))]) [])),(Equation (188,1) (FunLhs (Ident "modHead" 0) [(VariablePattern (Ident "fs" 135)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0)) [(VariablePattern (Ident "c" 135))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 135))))]) (SimpleRhs (188,34) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 135))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0))) (Variable (QualIdent Nothing (Ident "c" 135)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Variable (QualIdent (Just "Prelude") (Ident "id" 0)))) (Variable (QualIdent Nothing (Ident "ts" 135)))))))) [])),(Equation (189,1) (FunLhs (Ident "modHead" 0) [(VariablePattern (Ident "fs" 137)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0)) [(VariablePattern (Ident "c" 137))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 137))))]) (SimpleRhs (189,37) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 137))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0))) (Variable (QualIdent Nothing (Ident "c" 137)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Variable (QualIdent (Just "Prelude") (Ident "id" 0)))) (Variable (QualIdent Nothing (Ident "ts" 137)))))))) [])),(Equation (190,1) (FunLhs (Ident "modHead" 0) [(VariablePattern (Ident "fs" 139)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0)) [(VariablePattern (Ident "c" 139))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 139))))]) (SimpleRhs (190,29) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 139))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0))) (Variable (QualIdent Nothing (Ident "c" 139)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 139)))))) [])),(Equation (191,1) (FunLhs (Ident "modHead" 0) [(VariablePattern (Ident "fs" 141)),(ListPattern [])]) (SimpleRhs (191,17) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 141))) (Literal (String ""))))) (List [])) []))])
,(TypeSig (193,1) [(Ident "modHeadInLine" 0)] (ArrowType (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []))) (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []))))
,(FunctionDecl (194,1) (Ident "modHeadInLine" 0) [(Equation (194,1) (FunLhs (Ident "modHeadInLine" 0) [(VariablePattern (Ident "fs" 143)),(ListPattern [])]) (SimpleRhs (194,23) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 143))) (Literal (String ""))))) (List [])) [])),(Equation (195,1) (FunLhs (Ident "modHeadInLine" 0) [(VariablePattern (Ident "fs" 145)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "c" 145))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 145))))]) (SimpleRhs (196,5) (Case (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "break" 0))) (Paren (Lambda [(VariablePattern (Ident "x" 147))] (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "x" 147))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\n'))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "x" 147))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\r'))))))) (Variable (QualIdent Nothing (Ident "c" 145)))) [(Alt (197,7) (TuplePattern [(VariablePattern (Ident "line" 148)),(InfixPattern (VariablePattern (Ident "n" 148)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "rest" 148)))]) (SimpleRhs (197,24) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Paren (InfixApply (Variable (QualIdent Nothing (Ident "fs" 145))) (InfixOp (QualIdent (Just "Prelude") (Ident "." 0))) (InfixApply (LeftSection (Variable (QualIdent Nothing (Ident "line" 148))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0)))) (InfixOp (QualIdent (Just "Prelude") (Ident "." 0))) (LeftSection (Variable (QualIdent Nothing (Ident "n" 148))) (InfixConstr (QualIdent Nothing (Ident ":" 0)))))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "rest" 148)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 145)))))) [])),(Alt (198,7) (VariablePattern (Ident "_" 151)) (SimpleRhs (198,12) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHead" 0))) (Variable (QualIdent Nothing (Ident "fs" 145)))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "c" 145)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 145)))))) []))]) [])),(Equation (199,1) (FunLhs (Ident "modHeadInLine" 0) [(VariablePattern (Ident "fs" 153)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0)) [(VariablePattern (Ident "c" 153))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 153))))]) (SimpleRhs (200,3) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 153))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0))) (Variable (QualIdent Nothing (Ident "c" 153)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHeadInLine" 0))) (Variable (QualIdent (Just "Prelude") (Ident "id" 0)))) (Variable (QualIdent Nothing (Ident "ts" 153)))))))) [])),(Equation (201,1) (FunLhs (Ident "modHeadInLine" 0) [(VariablePattern (Ident "fs" 155)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0)) [(VariablePattern (Ident "c" 155))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 155))))]) (SimpleRhs (202,3) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 155))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0))) (Variable (QualIdent Nothing (Ident "c" 155)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Paren (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "modHeadInLine" 0))) (Variable (QualIdent (Just "Prelude") (Ident "id" 0)))) (Variable (QualIdent Nothing (Ident "ts" 155)))))))) [])),(Equation (203,1) (FunLhs (Ident "modHeadInLine" 0) [(VariablePattern (Ident "fs" 157)),(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0)) [(VariablePattern (Ident "c" 157))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 157))))]) (SimpleRhs (203,34) (Apply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "maybeMo" 0))) (Paren (Apply (Variable (QualIdent Nothing (Ident "fs" 157))) (Literal (String ""))))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0))) (Variable (QualIdent Nothing (Ident "c" 157)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 157)))))) []))])
,(TypeSig (205,1) [(Ident "headers" 0)] (ListType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []))))
,(FunctionDecl (206,1) (Ident "headers" 0) [(Equation (206,1) (FunLhs (Ident "headers" 0) []) (SimpleRhs (206,11) (List [(Literal (String " ")),(Literal (String "import")),(Literal (String "infix")),(Literal (String "infixl")),(Literal (String "infixr")),(Literal (String "module"))]) []))])
,(TypeSig (208,1) [(Ident "lineBeginsWith" 0)] (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) []))))
,(FunctionDecl (209,1) (Ident "lineBeginsWith" 0) [(Equation (209,1) (FunLhs (Ident "lineBeginsWith" 0) [(VariablePattern (Ident "line" 161)),(VariablePattern (Ident "s" 161))]) (GuardedRhs [(CondExpr (209,23) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "length" 0))) (Variable (QualIdent Nothing (Ident "line" 161)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<" 0))) (Variable (QualIdent Nothing (Ident "lens" 162)))) (Constructor (QualIdent (Just "Prelude") (Ident "False" 0)))),(CondExpr (210,23) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "line" 161))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Variable (QualIdent Nothing (Ident "s" 161)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (Let [(PatternDecl (212,29) (TuplePattern [(VariablePattern (Ident "s'" 164)),(VariablePattern (Ident "rest" 164))]) (SimpleRhs (212,41) (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "splitAt" 0))) (Paren (Apply (Variable (QualIdent (Just "Prelude") (Ident "length" 0))) (Variable (QualIdent Nothing (Ident "s" 161)))))) (Variable (QualIdent Nothing (Ident "line" 161)))) []))] (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "s" 161))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Variable (QualIdent Nothing (Ident "s'" 164)))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (Paren (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "null" 0))) (Variable (QualIdent Nothing (Ident "rest" 164)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "isSep" 0))) (Paren (Apply (Variable (QualIdent (Just "Prelude") (Ident "head" 0))) (Variable (QualIdent Nothing (Ident "rest" 164))))))))))))] [(PatternDecl (215,5) (VariablePattern (Ident "lens" 162)) (SimpleRhs (215,12) (Apply (Variable (QualIdent (Just "Prelude") (Ident "length" 0))) (Variable (QualIdent Nothing (Ident "s" 161)))) []))]))])
,(TypeSig (218,1) [(Ident "isSep" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (219,1) (Ident "isSep" 0) [(Equation (219,1) (FunLhs (Ident "isSep" 0) [(VariablePattern (Ident "c" 166))]) (SimpleRhs (219,11) (InfixApply (Apply (Variable (QualIdent (Just "Char") (Ident "isSpace" 0))) (Variable (QualIdent Nothing (Ident "c" 166)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "elem" 0))) (Variable (QualIdent Nothing (Ident "c" 166)))) (Variable (QualIdent (Just "CurryStringClassifier") (Ident "infixIDs" 0)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "elem" 0))) (Variable (QualIdent Nothing (Ident "c" 166)))) (Literal (String "([{"))))) []))])
,(TypeSig (221,1) [(Ident "infixIDs" 0)] (ConstructorType (QualIdent Nothing (Ident "String" 0)) []))
,(FunctionDecl (222,1) (Ident "infixIDs" 0) [(Equation (222,1) (FunLhs (Ident "infixIDs" 0) []) (SimpleRhs (222,13) (Literal (String "~!@#$%^&*+-=<>?./|\\:")) []))])
,(TypeSig (224,1) [(Ident "delimiters" 0)] (ConstructorType (QualIdent Nothing (Ident "String" 0)) []))
,(FunctionDecl (225,1) (Ident "delimiters" 0) [(Equation (225,1) (FunLhs (Ident "delimiters" 0) []) (SimpleRhs (225,14) (Literal (String " ([{,}])")) []))])
,(TypeSig (227,1) [(Ident "toBeEscaped" 0)] (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])))
,(FunctionDecl (228,1) (Ident "toBeEscaped" 0) [(Equation (228,1) (FunLhs (Ident "toBeEscaped" 0) []) (SimpleRhs (228,15) (Literal (String "\\\n\r\t\"")) []))])
,(TypeSig (230,1) [(Ident "maybeCode" 0)] (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []))))
,(FunctionDecl (231,1) (Ident "maybeCode" 0) [(Equation (231,1) (FunLhs (Ident "maybeCode" 0) [(VariablePattern (Ident "s" 174)),(VariablePattern (Ident "ts" 174))]) (SimpleRhs (231,44) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "s" 174)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts" 174)))) []))])
,(FunctionDecl (233,1) (Ident "maybeMo" 0) [(Equation (233,1) (FunLhs (Ident "maybeMo" 0) [(VariablePattern (Ident "s" 176)),(VariablePattern (Ident "ts" 176))]) (SimpleRhs (233,16) (IfThenElse (InfixApply (Variable (QualIdent Nothing (Ident "s" 176))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (String ""))) (Variable (QualIdent Nothing (Ident "ts" 176))) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "ModuleHead" 0))) (Variable (QualIdent Nothing (Ident "s" 176)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Case (Variable (QualIdent Nothing (Ident "ts" 176))) [(Alt (234,3) (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "c" 178))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts'" 178))) (SimpleRhs (234,17) (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Paren (InfixApply (Literal (Char '\n')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "c" 178)))))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts'" 178)))) [])),(Alt (235,3) (VariablePattern (Ident "_" 181)) (SimpleRhs (235,8) (Variable (QualIdent Nothing (Ident "ts" 176))) []))]))) []))])
,(TypeSig (240,1) [(Ident "plainCode" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (ConstructorType (QualIdent Nothing (Ident "String" 0)) [])))
,(FunctionDecl (241,1) (Ident "plainCode" 0) [(Equation (241,1) (FunLhs (Ident "plainCode" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "ModuleHead" 0)) [(VariablePattern (Ident "s" 183))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 183))))]) (SimpleRhs (241,31) (Case (Variable (QualIdent Nothing (Ident "ts" 183))) [(Alt (242,29) (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "c" 185))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts'" 185))) (SimpleRhs (242,45) (InfixApply (Variable (QualIdent Nothing (Ident "s" 183))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Apply (Apply (Variable (QualIdent (Just "Prelude") (Ident "drop" 0))) (Literal (Int (Ident "_" 187) 1))) (Variable (QualIdent Nothing (Ident "c" 185)))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts'" 185)))))) [])),(Alt (243,29) (VariablePattern (Ident "_" 189)) (SimpleRhs (243,34) (InfixApply (Variable (QualIdent Nothing (Ident "s" 183))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 183))))) []))]) [])),(Equation (244,1) (FunLhs (Ident "plainCode" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "s" 191))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 191))))]) (SimpleRhs (244,25) (InfixApply (Variable (QualIdent Nothing (Ident "s" 191))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 191))))) [])),(Equation (245,1) (FunLhs (Ident "plainCode" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0)) [(VariablePattern (Ident "s" 193))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 193))))]) (SimpleRhs (245,25) (InfixApply (Literal (Char '"')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 193))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Literal (Char '"')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 193))))))) [])),(Equation (246,1) (FunLhs (Ident "plainCode" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Letter" 0)) [(VariablePattern (Ident "s" 195))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 195))))]) (SimpleRhs (246,27) (InfixApply (Literal (Char '\'')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 195))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Literal (Char '\'')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 195))))))) [])),(Equation (247,1) (FunLhs (Ident "plainCode" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0)) [(VariablePattern (Ident "_" 198))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 197))))]) (SimpleRhs (247,31) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 197)))) [])),(Equation (248,1) (FunLhs (Ident "plainCode" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0)) [(VariablePattern (Ident "_" 201))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 200))))]) (SimpleRhs (248,33) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 200)))) [])),(Equation (249,1) (FunLhs (Ident "plainCode" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0)) [(VariablePattern (Ident "s" 203))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 203))))]) (SimpleRhs (249,25) (InfixApply (Literal (String "{+")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 203))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Literal (String "+}")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "plainCode" 0))) (Variable (QualIdent Nothing (Ident "ts" 203))))))) [])),(Equation (250,1) (FunLhs (Ident "plainCode" 0) [(ListPattern [])]) (SimpleRhs (250,16) (Literal (String "")) []))])
,(TypeSig (256,1) [(Ident "unscan" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) []) (ConstructorType (QualIdent Nothing (Ident "String" 0)) [])))
,(FunctionDecl (257,1) (Ident "unscan" 0) [(Equation (257,1) (FunLhs (Ident "unscan" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "ModuleHead" 0)) [(VariablePattern (Ident "s" 207))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 207))))]) (SimpleRhs (257,28) (InfixApply (Variable (QualIdent Nothing (Ident "s" 207))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Case (Variable (QualIdent Nothing (Ident "ts" 207))) [(Alt (258,33) (ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(ParenPattern (InfixPattern (VariablePattern (Ident "_" 210)) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "c" 209))))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts'" 209)))) (SimpleRhs (258,53) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Paren (InfixApply (Apply (Constructor (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0))) (Variable (QualIdent Nothing (Ident "c" 209)))) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Variable (QualIdent Nothing (Ident "ts'" 209)))))) [])),(Alt (259,33) (VariablePattern (Ident "_" 213)) (SimpleRhs (259,38) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Variable (QualIdent Nothing (Ident "ts" 207)))) []))])) [])),(Equation (260,1) (FunLhs (Ident "unscan" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Code" 0)) [(VariablePattern (Ident "s" 215))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 215))))]) (SimpleRhs (260,22) (InfixApply (Variable (QualIdent Nothing (Ident "s" 215))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Variable (QualIdent Nothing (Ident "ts" 215))))) [])),(Equation (261,1) (FunLhs (Ident "unscan" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Text" 0)) [(VariablePattern (Ident "s" 217))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 217))))]) (SimpleRhs (261,22) (InfixApply (Literal (Char '"')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 217))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Literal (Char '"')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Variable (QualIdent Nothing (Ident "ts" 217))))))) [])),(Equation (262,1) (FunLhs (Ident "unscan" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Letter" 0)) [(VariablePattern (Ident "s" 219))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 219))))]) (SimpleRhs (262,24) (InfixApply (Literal (Char '\'')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 219))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Literal (Char '\'')) (InfixConstr (QualIdent Nothing (Ident ":" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Variable (QualIdent Nothing (Ident "ts" 219))))))) [])),(Equation (263,1) (FunLhs (Ident "unscan" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "BigComment" 0)) [(VariablePattern (Ident "s" 221))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 221))))]) (SimpleRhs (263,28) (InfixApply (Literal (String "{-")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 221))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Literal (String "-}")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Variable (QualIdent Nothing (Ident "ts" 221))))))) [])),(Equation (264,1) (FunLhs (Ident "unscan" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "SmallComment" 0)) [(VariablePattern (Ident "s" 223))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 223))))]) (SimpleRhs (264,30) (InfixApply (Literal (String "--")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 223))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Variable (QualIdent Nothing (Ident "ts" 223)))))) [])),(Equation (265,1) (FunLhs (Ident "unscan" 0) [(ParenPattern (InfixPattern (ConstructorPattern (QualIdent (Just "CurryStringClassifier") (Ident "Meta" 0)) [(VariablePattern (Ident "s" 225))]) (QualIdent Nothing (Ident ":" 0)) (VariablePattern (Ident "ts" 225))))]) (SimpleRhs (265,22) (InfixApply (Literal (String "{+")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "s" 225))) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (InfixApply (Literal (String "+}")) (InfixOp (QualIdent (Just "Prelude") (Ident "++" 0))) (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Variable (QualIdent Nothing (Ident "ts" 225))))))) [])),(Equation (266,1) (FunLhs (Ident "unscan" 0) [(ListPattern [])]) (SimpleRhs (266,13) (Literal (String "")) []))])
,(TypeSig (269,1) [(Ident "readScan" 0)] (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ConstructorType (QualIdent Nothing (Ident "IO" 0)) [(ConstructorType (QualIdent Nothing (Ident "Tokens" 0)) [])])))
,(FunctionDecl (270,1) (Ident "readScan" 0) [(Equation (270,1) (FunLhs (Ident "readScan" 0) [(VariablePattern (Ident "fn" 229))]) (SimpleRhs (270,15) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "readFile" 0))) (Variable (QualIdent Nothing (Ident "fn" 229)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">>=" 0))) (InfixApply (Variable (QualIdent (Just "Prelude") (Ident "return" 0))) (InfixOp (QualIdent (Just "Prelude") (Ident "." 0))) (Variable (QualIdent (Just "CurryStringClassifier") (Ident "scan" 0))))) []))])
,(TypeSig (274,1) [(Ident "testScan" 0)] (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ConstructorType (QualIdent Nothing (Ident "IO" 0)) [(TupleType [])])))
,(FunctionDecl (275,1) (Ident "testScan" 0) [(Equation (275,1) (FunLhs (Ident "testScan" 0) [(VariablePattern (Ident "fn" 231))]) (SimpleRhs (275,15) (Do [(StmtBind (VariablePattern (Ident "c" 233)) (Apply (Variable (QualIdent (Just "Prelude") (Ident "readFile" 0))) (Variable (QualIdent Nothing (Ident "fn" 231)))))] (Apply (Variable (QualIdent (Just "Prelude") (Ident "print" 0))) (Paren (InfixApply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Paren (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "scan" 0))) (Variable (QualIdent Nothing (Ident "c" 233)))))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Variable (QualIdent Nothing (Ident "c" 233))))))) []))])
,(TypeSig (278,1) [(Ident "testWeave" 0)] (ArrowType (ListType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])) (ConstructorType (QualIdent Nothing (Ident "IO" 0)) [(TupleType [])])))
,(FunctionDecl (279,1) (Ident "testWeave" 0) [(Equation (279,1) (FunLhs (Ident "testWeave" 0) [(VariablePattern (Ident "fn" 234))]) (SimpleRhs (279,16) (Do [(StmtBind (VariablePattern (Ident "c" 236)) (Apply (Variable (QualIdent (Just "Prelude") (Ident "readFile" 0))) (Variable (QualIdent Nothing (Ident "fn" 234)))))] (Apply (Variable (QualIdent (Just "Prelude") (Ident "print" 0))) (Paren (InfixApply (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unscan" 0))) (Paren (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "weave" 0))) (Paren (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "unweaveCode" 0))) (Paren (Apply (Variable (QualIdent (Just "CurryStringClassifier") (Ident "scan" 0))) (Variable (QualIdent Nothing (Ident "c" 236)))))))))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Variable (QualIdent Nothing (Ident "c" 236))))))) []))])
]
