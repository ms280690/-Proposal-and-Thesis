Prog "RedBlackTree" ["Prelude"] [Type ("RedBlackTree","RedBlackTree") Public [0] [Cons ("RedBlackTree","RedBlackTree") 4 Private [FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),TCons ("RedBlackTree","Tree") [TVar 0]]],Type ("RedBlackTree","Color") Private [] [Cons ("RedBlackTree","Red") 0 Private [],Cons ("RedBlackTree","Black") 0 Private [],Cons ("RedBlackTree","DoublyBlack") 0 Private []],Type ("RedBlackTree","Tree") Private [0] [Cons ("RedBlackTree","Tree") 4 Private [TCons ("RedBlackTree","Color") [],TVar 0,TCons ("RedBlackTree","Tree") [TVar 0],TCons ("RedBlackTree","Tree") [TVar 0]],Cons ("RedBlackTree","Empty") 0 Private []]] [Func ("RedBlackTree","empty") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (TCons ("RedBlackTree","RedBlackTree") [TVar 0])))) (Rule [1,2,3] (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 1,Var 2,Var 3,Comb ConsCall ("RedBlackTree","Empty") []])),Func ("RedBlackTree","isEmpty") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Comb ConsCall ("Prelude","False") [])])])),Func ("RedBlackTree","newTreeLike") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 2,Var 3,Var 4,Comb ConsCall ("RedBlackTree","Empty") []])])),Func ("RedBlackTree","lookup") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb FuncCall ("RedBlackTree","lookupTree") [Var 4,Var 5,Var 1,Var 6])])),Func ("RedBlackTree","lookupTree") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("RedBlackTree","Tree") [5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","lookupTree") [Var 1,Var 2,Var 3,Var 7]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","lookupTree") [Var 1,Var 2,Var 3,Var 8]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("RedBlackTree","update") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 3,Var 4,Var 5,Comb FuncCall ("RedBlackTree","updateTree") [Var 3,Var 5,Var 1,Var 6]])])),Func ("RedBlackTree","updateTree") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("RedBlackTree","updateTree.upd.35") [Var 3,Var 1,Var 2,Var 4])] (Let [(6,Comb FuncCall ("RedBlackTree","updateTree._#selFP3#e2") [Var 5])] (Let [(7,Comb FuncCall ("RedBlackTree","updateTree._#selFP4#l") [Var 5])] (Let [(8,Comb FuncCall ("RedBlackTree","updateTree._#selFP5#r") [Var 5])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 6,Var 7,Var 8])))))),Func ("RedBlackTree","updateTree.upd.35") 4 Private (FuncType (TVar 183) (FuncType (FuncType (TVar 183) (FuncType (TVar 183) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 183) (FuncType (TVar 183) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("RedBlackTree","Tree") [TVar 183]) (TCons ("RedBlackTree","Tree") [TVar 183]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 1,Comb ConsCall ("RedBlackTree","Empty") [],Comb ConsCall ("RedBlackTree","Empty") []]),Branch (Pattern ("RedBlackTree","Tree") [5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 1,Var 7,Var 8]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 1],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","balanceL") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Comb FuncCall ("RedBlackTree","updateTree.upd.35") [Var 1,Var 2,Var 3,Var 7],Var 8]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","balanceR") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Var 7,Comb FuncCall ("RedBlackTree","updateTree.upd.35") [Var 1,Var 2,Var 3,Var 8]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("RedBlackTree","updateTree._#selFP3#e2") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 183]) (TVar 183)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 3)])),Func ("RedBlackTree","updateTree._#selFP4#l") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 183]) (TCons ("RedBlackTree","Tree") [TVar 183])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 4)])),Func ("RedBlackTree","updateTree._#selFP5#r") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 183]) (TCons ("RedBlackTree","Tree") [TVar 183])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 5)])),Func ("RedBlackTree","delete") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 3,Var 4,Var 5,Comb FuncCall ("RedBlackTree","delete.blackenRoot.44") [Comb FuncCall ("RedBlackTree","deleteTree") [Var 4,Var 5,Var 1,Var 6]]])])),Func ("RedBlackTree","delete.blackenRoot.44") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 3,Var 4,Var 5])])),Func ("RedBlackTree","deleteTree") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","deleteTree.addColor.56") [Var 5,Var 8]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","deleteTree.addColor.56") [Var 5,Var 7]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("RedBlackTree","deleteTree.rightMost.56") [Var 7])] (Comb FuncCall ("RedBlackTree","delBalanceL") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 9,Comb FuncCall ("RedBlackTree","deleteTree") [Var 1,Var 2,Var 9,Var 7],Var 8]]))])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","delBalanceL") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Comb FuncCall ("RedBlackTree","deleteTree") [Var 1,Var 2,Var 3,Var 7],Var 8]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","delBalanceR") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Var 7,Comb FuncCall ("RedBlackTree","deleteTree") [Var 1,Var 2,Var 3,Var 8]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("RedBlackTree","deleteTree.addColor.56") 2 Private (FuncType (TCons ("RedBlackTree","Color") []) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Red") []) (Var 2),Branch (Pattern ("RedBlackTree","Black") []) (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [3,4,5,6]) (Case  Flex (Var 3) [Branch (Pattern ("RedBlackTree","Red") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 4,Var 5,Var 6]),Branch (Pattern ("RedBlackTree","Black") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","DoublyBlack") [],Var 4,Var 5,Var 6])])])])),Func ("RedBlackTree","deleteTree.rightMost.56") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("RedBlackTree","deleteTree.rightMost.56") [Var 5])])])),Func ("RedBlackTree","tree2list") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Comb FuncCall ("RedBlackTree","tree2listTree") [Var 5])])),Func ("RedBlackTree","tree2listTree") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("RedBlackTree","tree2listTree.t2l.77") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("RedBlackTree","tree2listTree.t2l.77") 2 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Var 2),Branch (Pattern ("RedBlackTree","Tree") [3,4,5,6]) (Comb FuncCall ("RedBlackTree","tree2listTree.t2l.77") [Var 5,Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("RedBlackTree","tree2listTree.t2l.77") [Var 6,Var 2]]])])),Func ("RedBlackTree","sort") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("RedBlackTree","tree2list") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("RedBlackTree","update") [],Comb FuncCall ("RedBlackTree","empty") [Comb (FuncPartCall 2) ("RedBlackTree","sort._#lambda2") [],Comb (FuncPartCall 2) ("Prelude","==") [],Var 1],Var 2]])),Func ("RedBlackTree","sort._#lambda2") 2 Private (FuncType (TVar 520) (FuncType (TVar 520) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") [])),Func ("RedBlackTree","setInsertEquivalence") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 1,Var 4,Var 5,Var 6])])),Func ("RedBlackTree","rbt") 1 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Var 5)])),Func ("RedBlackTree","isBlack") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Black") []])])),Func ("RedBlackTree","isRed") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Red") []])])),Func ("RedBlackTree","isDoublyBlack") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","DoublyBlack") []])])),Func ("RedBlackTree","element") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 3)])),Func ("RedBlackTree","left") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 4)])),Func ("RedBlackTree","right") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 5)])),Func ("RedBlackTree","singleBlack") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","DoublyBlack") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 3,Var 4,Var 5])])])),Func ("RedBlackTree","balanceL") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","left") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(3,Var 1)] (Let [(4,Comb FuncCall ("RedBlackTree","balanceL._#selFP7#z") [Var 3])] (Let [(5,Comb FuncCall ("RedBlackTree","balanceL._#selFP8#y") [Var 3])] (Let [(6,Comb FuncCall ("RedBlackTree","balanceL._#selFP9#x") [Var 3])] (Let [(7,Comb FuncCall ("RedBlackTree","balanceL._#selFP10#a") [Var 3])] (Let [(8,Comb FuncCall ("RedBlackTree","balanceL._#selFP11#b") [Var 3])] (Let [(9,Comb FuncCall ("RedBlackTree","balanceL._#selFP12#c") [Var 3])] (Let [(10,Comb FuncCall ("RedBlackTree","balanceL._#selFP13#d") [Var 3])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 5,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 6,Var 7,Var 8],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 4,Var 9,Var 10]]))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(11,Var 1)] (Let [(12,Comb FuncCall ("RedBlackTree","balanceL._#selFP15#z") [Var 11])] (Let [(13,Comb FuncCall ("RedBlackTree","balanceL._#selFP16#x") [Var 11])] (Let [(14,Comb FuncCall ("RedBlackTree","balanceL._#selFP17#a") [Var 11])] (Let [(15,Comb FuncCall ("RedBlackTree","balanceL._#selFP18#y") [Var 11])] (Let [(16,Comb FuncCall ("RedBlackTree","balanceL._#selFP19#b") [Var 11])] (Let [(17,Comb FuncCall ("RedBlackTree","balanceL._#selFP20#c") [Var 11])] (Let [(18,Comb FuncCall ("RedBlackTree","balanceL._#selFP21#d") [Var 11])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 15,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 13,Var 14,Var 16],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 12,Var 17,Var 18]]))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("RedBlackTree","balanceL._#selFP7#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TVar 88)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceL._#selFP8#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TVar 88)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceL._#selFP9#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TVar 88)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceL._#selFP10#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceL._#selFP11#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceL._#selFP12#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","balanceL._#selFP13#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","balanceL._#selFP15#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TVar 88)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceL._#selFP16#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TVar 88)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceL._#selFP17#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","balanceL._#selFP18#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TVar 88)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceL._#selFP19#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceL._#selFP20#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceL._#selFP21#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 88]) (TCons ("RedBlackTree","Tree") [TVar 88])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","balanceR") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","right") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(3,Var 1)] (Let [(4,Comb FuncCall ("RedBlackTree","balanceR._#selFP23#x") [Var 3])] (Let [(5,Comb FuncCall ("RedBlackTree","balanceR._#selFP24#a") [Var 3])] (Let [(6,Comb FuncCall ("RedBlackTree","balanceR._#selFP25#y") [Var 3])] (Let [(7,Comb FuncCall ("RedBlackTree","balanceR._#selFP26#b") [Var 3])] (Let [(8,Comb FuncCall ("RedBlackTree","balanceR._#selFP27#z") [Var 3])] (Let [(9,Comb FuncCall ("RedBlackTree","balanceR._#selFP28#c") [Var 3])] (Let [(10,Comb FuncCall ("RedBlackTree","balanceR._#selFP29#d") [Var 3])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 6,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 4,Var 5,Var 7],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 8,Var 9,Var 10]]))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(11,Var 1)] (Let [(12,Comb FuncCall ("RedBlackTree","balanceR._#selFP31#x") [Var 11])] (Let [(13,Comb FuncCall ("RedBlackTree","balanceR._#selFP32#a") [Var 11])] (Let [(14,Comb FuncCall ("RedBlackTree","balanceR._#selFP33#z") [Var 11])] (Let [(15,Comb FuncCall ("RedBlackTree","balanceR._#selFP34#y") [Var 11])] (Let [(16,Comb FuncCall ("RedBlackTree","balanceR._#selFP35#b") [Var 11])] (Let [(17,Comb FuncCall ("RedBlackTree","balanceR._#selFP36#c") [Var 11])] (Let [(18,Comb FuncCall ("RedBlackTree","balanceR._#selFP37#d") [Var 11])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 15,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 12,Var 13,Var 16],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 14,Var 17,Var 18]]))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("RedBlackTree","balanceR._#selFP23#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TVar 131)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceR._#selFP24#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","balanceR._#selFP25#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TVar 131)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceR._#selFP26#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","balanceR._#selFP27#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TVar 131)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceR._#selFP28#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceR._#selFP29#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceR._#selFP31#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TVar 131)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceR._#selFP32#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","balanceR._#selFP33#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TVar 131)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceR._#selFP34#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TVar 131)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceR._#selFP35#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceR._#selFP36#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceR._#selFP37#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 131]) (TCons ("RedBlackTree","Tree") [TVar 131])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","delBalanceL") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Rigid (Comb FuncCall ("RedBlackTree","isDoublyBlack") [Comb FuncCall ("RedBlackTree","left") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","reviseLeft") [Var 1]),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("RedBlackTree","reviseLeft") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","right") [Var 1])] (Let [(3,Comb FuncCall ("RedBlackTree","isBlack") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Var 1)] (Let [(5,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP39#col") [Var 4])] (Let [(6,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP40#x") [Var 4])] (Let [(7,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP41#a") [Var 4])] (Let [(8,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP42#z") [Var 4])] (Let [(9,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP43#y") [Var 4])] (Let [(10,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP44#b") [Var 4])] (Let [(11,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP45#c") [Var 4])] (Let [(12,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP46#d") [Var 4])] (Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 9,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 6,Comb FuncCall ("RedBlackTree","singleBlack") [Var 7],Var 10],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 8,Var 11,Var 12]])))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(13,Var 1)] (Let [(14,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP48#col") [Var 13])] (Let [(15,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP49#x") [Var 13])] (Let [(16,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP50#a") [Var 13])] (Let [(17,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP51#y") [Var 13])] (Let [(18,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP52#b") [Var 13])] (Let [(19,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP53#z") [Var 13])] (Let [(20,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP54#c") [Var 13])] (Let [(21,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP55#d") [Var 13])] (Comb ConsCall ("RedBlackTree","Tree") [Var 14,Var 17,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 15,Comb FuncCall ("RedBlackTree","singleBlack") [Var 16],Var 18],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 19,Var 20,Var 21]])))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(22,Var 1)] (Let [(23,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP57#col") [Var 22])] (Let [(24,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP58#x") [Var 22])] (Let [(25,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP59#a") [Var 22])] (Let [(26,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP60#y") [Var 22])] (Let [(27,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP61#b") [Var 22])] (Let [(28,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP62#c") [Var 22])] (Comb ConsCall ("RedBlackTree","Tree") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Comb ConsCall ("RedBlackTree","Red") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("RedBlackTree","Black") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("RedBlackTree","DoublyBlack") [])],Var 24,Comb FuncCall ("RedBlackTree","singleBlack") [Var 25],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 26,Var 27,Var 28]])))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(29,Var 1)] (Let [(30,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP64#x") [Var 29])] (Let [(31,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP65#a") [Var 29])] (Let [(32,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP66#y") [Var 29])] (Let [(33,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP67#b") [Var 29])] (Let [(34,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP68#c") [Var 29])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 32,Comb FuncCall ("RedBlackTree","reviseLeft") [Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 30,Var 31,Var 33]],Var 34]))))))),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])))),Func ("RedBlackTree","reviseLeft._#selFP39#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseLeft._#selFP40#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseLeft._#selFP41#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","reviseLeft._#selFP42#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseLeft._#selFP43#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseLeft._#selFP44#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseLeft._#selFP45#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseLeft._#selFP46#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","reviseLeft._#selFP48#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseLeft._#selFP49#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseLeft._#selFP50#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","reviseLeft._#selFP51#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseLeft._#selFP52#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","reviseLeft._#selFP53#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseLeft._#selFP54#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseLeft._#selFP55#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseLeft._#selFP57#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 2)])])),Func ("RedBlackTree","reviseLeft._#selFP58#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseLeft._#selFP59#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 4)])])),Func ("RedBlackTree","reviseLeft._#selFP60#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseLeft._#selFP61#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseLeft._#selFP62#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","reviseLeft._#selFP64#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseLeft._#selFP65#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 4)])])),Func ("RedBlackTree","reviseLeft._#selFP66#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TVar 249)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseLeft._#selFP67#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseLeft._#selFP68#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 249]) (TCons ("RedBlackTree","Tree") [TVar 249])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","delBalanceR") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Rigid (Comb FuncCall ("RedBlackTree","isDoublyBlack") [Comb FuncCall ("RedBlackTree","right") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","reviseRight") [Var 1]),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("RedBlackTree","reviseRight") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","left") [Var 1])] (Let [(3,Comb FuncCall ("RedBlackTree","isBlack") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Var 1)] (Let [(5,Comb FuncCall ("RedBlackTree","reviseRight._#selFP70#col") [Var 4])] (Let [(6,Comb FuncCall ("RedBlackTree","reviseRight._#selFP71#x") [Var 4])] (Let [(7,Comb FuncCall ("RedBlackTree","reviseRight._#selFP72#y") [Var 4])] (Let [(8,Comb FuncCall ("RedBlackTree","reviseRight._#selFP73#z") [Var 4])] (Let [(9,Comb FuncCall ("RedBlackTree","reviseRight._#selFP74#d") [Var 4])] (Let [(10,Comb FuncCall ("RedBlackTree","reviseRight._#selFP75#c") [Var 4])] (Let [(11,Comb FuncCall ("RedBlackTree","reviseRight._#selFP76#b") [Var 4])] (Let [(12,Comb FuncCall ("RedBlackTree","reviseRight._#selFP77#a") [Var 4])] (Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 7,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 8,Var 9,Var 10],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 6,Var 11,Comb FuncCall ("RedBlackTree","singleBlack") [Var 12]]])))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(13,Var 1)] (Let [(14,Comb FuncCall ("RedBlackTree","reviseRight._#selFP79#col") [Var 13])] (Let [(15,Comb FuncCall ("RedBlackTree","reviseRight._#selFP80#x") [Var 13])] (Let [(16,Comb FuncCall ("RedBlackTree","reviseRight._#selFP81#z") [Var 13])] (Let [(17,Comb FuncCall ("RedBlackTree","reviseRight._#selFP82#d") [Var 13])] (Let [(18,Comb FuncCall ("RedBlackTree","reviseRight._#selFP83#y") [Var 13])] (Let [(19,Comb FuncCall ("RedBlackTree","reviseRight._#selFP84#c") [Var 13])] (Let [(20,Comb FuncCall ("RedBlackTree","reviseRight._#selFP85#b") [Var 13])] (Let [(21,Comb FuncCall ("RedBlackTree","reviseRight._#selFP86#a") [Var 13])] (Comb ConsCall ("RedBlackTree","Tree") [Var 14,Var 18,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 16,Var 17,Var 19],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 15,Var 20,Comb FuncCall ("RedBlackTree","singleBlack") [Var 21]]])))))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(22,Var 1)] (Let [(23,Comb FuncCall ("RedBlackTree","reviseRight._#selFP88#col") [Var 22])] (Let [(24,Comb FuncCall ("RedBlackTree","reviseRight._#selFP89#x") [Var 22])] (Let [(25,Comb FuncCall ("RedBlackTree","reviseRight._#selFP90#y") [Var 22])] (Let [(26,Comb FuncCall ("RedBlackTree","reviseRight._#selFP91#c") [Var 22])] (Let [(27,Comb FuncCall ("RedBlackTree","reviseRight._#selFP92#b") [Var 22])] (Let [(28,Comb FuncCall ("RedBlackTree","reviseRight._#selFP93#a") [Var 22])] (Comb ConsCall ("RedBlackTree","Tree") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Comb ConsCall ("RedBlackTree","Red") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("RedBlackTree","Black") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("RedBlackTree","DoublyBlack") [])],Var 24,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 25,Var 26,Var 27],Comb FuncCall ("RedBlackTree","singleBlack") [Var 28]])))))))),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(29,Var 1)] (Let [(30,Comb FuncCall ("RedBlackTree","reviseRight._#selFP95#x") [Var 29])] (Let [(31,Comb FuncCall ("RedBlackTree","reviseRight._#selFP96#y") [Var 29])] (Let [(32,Comb FuncCall ("RedBlackTree","reviseRight._#selFP97#c") [Var 29])] (Let [(33,Comb FuncCall ("RedBlackTree","reviseRight._#selFP98#b") [Var 29])] (Let [(34,Comb FuncCall ("RedBlackTree","reviseRight._#selFP99#a") [Var 29])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 31,Var 32,Comb FuncCall ("RedBlackTree","reviseRight") [Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 30,Var 33,Var 34]]]))))))),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])))),Func ("RedBlackTree","reviseRight._#selFP70#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseRight._#selFP71#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseRight._#selFP72#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseRight._#selFP73#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseRight._#selFP74#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseRight._#selFP75#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseRight._#selFP76#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","reviseRight._#selFP77#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","reviseRight._#selFP79#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseRight._#selFP80#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseRight._#selFP81#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseRight._#selFP82#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","reviseRight._#selFP83#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseRight._#selFP84#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseRight._#selFP85#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseRight._#selFP86#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","reviseRight._#selFP88#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 2)])])),Func ("RedBlackTree","reviseRight._#selFP89#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseRight._#selFP90#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseRight._#selFP91#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseRight._#selFP92#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","reviseRight._#selFP93#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 5)])])),Func ("RedBlackTree","reviseRight._#selFP95#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseRight._#selFP96#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TVar 327)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseRight._#selFP97#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseRight._#selFP98#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","reviseRight._#selFP99#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 327]) (TCons ("RedBlackTree","Tree") [TVar 327])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 5)])]))] []