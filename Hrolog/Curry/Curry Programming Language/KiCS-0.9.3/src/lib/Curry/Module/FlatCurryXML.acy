CurryProg "FlatCurryXML"
 ["Prelude","FlatCurry","XML","Read"]
 []
 [CFunc ("FlatCurryXML","flatCurry2Xml") 1 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Prog") [CPVar (0,"modname"),CPVar (1,"imports"),CPVar (2,"types"),CPVar (3,"funcs"),CPVar (4,"ops")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (0,"modname")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (5,"s")] (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (5,"s")))) (CSymbol ("Prelude","[]")))))) (CVar (1,"imports"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowType"))) (CVar (2,"types"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowFunc"))) (CVar (3,"funcs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowOp"))) (CVar (4,"ops"))))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("FlatCurryXML","flatCurry2XmlFile") 2 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"flatprog"),CPVar (1,"filename")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","writeFile")) (CVar (1,"filename"))) (CApply (CApply (CSymbol ("XML","showXmlDocWithParams")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","DtdUrl")) (CSymbol ("FlatCurryXML","flatCurryDtd")))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatCurryXML","flatCurry2Xml")) (CVar (0,"flatprog")))))] []]),
  CFunc ("FlatCurryXML","flatCurryDtd") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))] []]),
  CFunc ("FlatCurryXML","flatx2Fixity") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("FlatCurry","Fixity") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixOp"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixlOp"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixrOp"))] []]),
  CFunc ("FlatCurryXML","flatx2FunBody") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","Rule") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPVar (0,"xename")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","External")) (CApply (CSymbol ("XML","textOfXml")) (CVar (0,"xename"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (1,"xvars")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (2,"xrhs"),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Rule")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2var"))) (CVar (1,"xvars")))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (2,"xrhs"))))] []]),
  CFunc ("FlatCurryXML","flatx2branch") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","BranchExpr") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (0,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (1,"cons")],CPComb ("Prelude","[]") []]],CPVar (2,"xvars")],CPComb ("Prelude",":") [CPVar (3,"xexp"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Branch")) (CApply (CApply (CSymbol ("FlatCurry","Pattern")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"mod"))) (CVar (1,"cons")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2var"))) (CVar (2,"xvars"))))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (3,"xexp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (4,"xlit"),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (5,"xexp"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Branch")) (CApply (CSymbol ("FlatCurry","LPattern")) (CApply (CSymbol ("FlatCurryXML","flatx2lit")) (CVar (4,"xlit"))))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (5,"xexp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]]],CPVar (6,"_"),CPVar (7,"_")],CPComb ("Prelude",":") [CPVar (8,"_"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))] []]),
  CFunc ("FlatCurryXML","flatx2exp") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","Expr") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (0,"xvar")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Var")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (0,"xvar")))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (1,"xlit"),CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Lit")) (CApply (CSymbol ("FlatCurryXML","flatx2lit")) (CVar (1,"xlit"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (2,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (3,"name")],CPComb ("Prelude","[]") []]],CPVar (4,"xexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","FuncCall"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"mod"))) (CVar (3,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2exp"))) (CVar (4,"xexps"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (5,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (6,"name")],CPComb ("Prelude","[]") []]],CPVar (7,"xexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","ConsCall"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (5,"mod"))) (CVar (6,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2exp"))) (CVar (7,"xexps"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (8,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (9,"name")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude","[]") []]]]]]]],CPVar (10,"nmiss")],CPComb ("Prelude","[]") []]]],CPVar (11,"xexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CApply (CSymbol ("FlatCurry","FuncPartCall")) (CApply (CSymbol ("Read","readNat")) (CVar (10,"nmiss"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (8,"mod"))) (CVar (9,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2exp"))) (CVar (11,"xexps"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (12,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (13,"name")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude","[]") []]]]]]]],CPVar (14,"nmiss")],CPComb ("Prelude","[]") []]]],CPVar (15,"xexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CApply (CSymbol ("FlatCurry","ConsPartCall")) (CApply (CSymbol ("Read","readNat")) (CVar (14,"nmiss"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (12,"mod"))) (CVar (13,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2exp"))) (CVar (15,"xexps"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPVar (16,"xvars")],CPComb ("Prelude",":") [CPVar (17,"xexp"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Free")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2var"))) (CVar (16,"xvars")))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (17,"xexp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (18,"xexp1"),CPComb ("Prelude",":") [CPVar (19,"xexp2"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Or")) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (18,"xexp1")))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (19,"xexp2"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (20,"xexp"),CPVar (21,"xbranches")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Case")) (CSymbol ("FlatCurry","Rigid"))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (20,"xexp")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2branch"))) (CVar (21,"xbranches"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (22,"xexp"),CPVar (23,"xbranches")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Case")) (CSymbol ("FlatCurry","Flex"))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (22,"xexp")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2branch"))) (CVar (23,"xbranches"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (24,"xbindings")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (25,"bindings"),CPVar (26,"exp")]) (CApply (CSymbol ("FlatCurryXML","flatx2let")) (CVar (24,"xbindings"))) []] (CApply (CApply (CSymbol ("FlatCurry","Let")) (CVar (25,"bindings"))) (CVar (26,"exp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (27,"xbindings")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (28,"bindings"),CPVar (29,"exp")]) (CApply (CSymbol ("FlatCurryXML","flatx2let")) (CVar (27,"xbindings"))) []] (CApply (CApply (CSymbol ("FlatCurry","Let")) (CVar (28,"bindings"))) (CVar (29,"exp"))))] []]),
  CFunc ("FlatCurryXML","flatx2let") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("FlatCurry","Expr") []]],CTCons ("FlatCurry","Expr") []])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (0,"xexp"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (0,"xexp"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (1,"xvar")],CPComb ("Prelude",":") [CPVar (2,"xexp"),CPComb ("Prelude","[]") []]]],CPComb ("Prelude",":") [CPVar (3,"xb"),CPVar (4,"xbs")]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"bindings"),CPVar (6,"exp")]) (CApply (CSymbol ("FlatCurryXML","flatx2let")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"xb"))) (CVar (4,"xbs")))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (1,"xvar"))))) (CApply (CSymbol ("FlatCurryXML","flatx2exp")) (CVar (2,"xexp"))))) (CVar (5,"bindings")))) (CVar (6,"exp"))))] []]),
  CFunc ("FlatCurryXML","flatx2lit") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","Literal") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (0,"xintc")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Intc")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (0,"xintc")))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPVar (2,"xintc")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Charc")) (CApply (CSymbol ("Prelude","chr")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (2,"xintc"))))))] []]),
  CFunc ("FlatCurryXML","flatx2texp") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","TypeExpr") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (0,"xtvar")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","TVar")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (0,"xtvar")))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (1,"xtexp1"),CPComb ("Prelude",":") [CPVar (2,"xtexp2"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","FuncType")) (CApply (CSymbol ("FlatCurryXML","flatx2texp")) (CVar (1,"xtexp1")))) (CApply (CSymbol ("FlatCurryXML","flatx2texp")) (CVar (2,"xtexp2"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (3,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (4,"tcname")],CPComb ("Prelude","[]") []]],CPVar (5,"xtexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","TCons")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"mod"))) (CVar (4,"tcname")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2texp"))) (CVar (5,"xtexps"))))] []]),
  CFunc ("FlatCurryXML","flatx2typedecl") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","TypeDecl") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (0,"tmod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (1,"tname")],CPComb ("Prelude",":") [CPVar (2,"xtvis"),CPComb ("Prelude","[]") []]]],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (3,"xtvars")],CPVar (4,"xconstructors")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Type")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"tmod"))) (CVar (1,"tname")))) (CApply (CSymbol ("FlatCurryXML","xvis2vis")) (CVar (2,"xtvis")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (5,"xtvar")]] (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (5,"xtvar")))))) (CVar (3,"xtvars")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (6,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (7,"xcn")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]],CPVar (8,"xar")],CPComb ("Prelude",":") [CPVar (9,"xvis"),CPComb ("Prelude","[]") []]]]],CPVar (10,"xtexps")]] (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Cons")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (6,"mod"))) (CVar (7,"xcn")))) (CApply (CSymbol ("Read","readNat")) (CVar (8,"xar")))) (CApply (CSymbol ("FlatCurryXML","xvis2vis")) (CVar (9,"xvis")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2texp"))) (CVar (10,"xtexps")))))) (CVar (4,"xconstructors"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (11,"tmod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (12,"tname")],CPComb ("Prelude",":") [CPVar (13,"xtvis"),CPComb ("Prelude","[]") []]]],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (14,"xtvars")],CPComb ("Prelude",":") [CPVar (15,"xtexp"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","TypeSyn")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (11,"tmod"))) (CVar (12,"tname")))) (CApply (CSymbol ("FlatCurryXML","xvis2vis")) (CVar (13,"xtvis")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (16,"xtvar")]] (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (16,"xtvar")))))) (CVar (14,"xtvars")))) (CApply (CSymbol ("FlatCurryXML","flatx2texp")) (CVar (15,"xtexp"))))] []]),
  CFunc ("FlatCurryXML","flatx2var") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (0,"xvar")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("XML","textOfXml")) (CVar (0,"xvar"))))] []]),
  CFunc ("FlatCurryXML","qname2xmlattrs") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"mod"),CPVar (1,"name")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CVar (0,"mod")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CVar (1,"name")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatCurryXML","xml2FlatCurry") 1 Public (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","Prog") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (0,"xmodname")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (1,"ximports")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPVar (2,"xtypes")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]]]]],CPComb ("Prelude","[]") [],CPVar (3,"xfunctions")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]]]]],CPComb ("Prelude","[]") [],CPVar (4,"xoperators")],CPComb ("Prelude","[]") []]]]]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Prog")) (CApply (CSymbol ("XML","textOfXml")) (CVar (0,"xmodname")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (5,"xim")]] (CApply (CSymbol ("XML","textOfXml")) (CVar (5,"xim"))))) (CVar (1,"ximports")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","flatx2typedecl"))) (CVar (2,"xtypes")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (6,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (7,"fname")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]],CPVar (8,"farity")],CPComb ("Prelude",":") [CPVar (9,"xvis"),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPVar (10,"xftype"),CPComb ("Prelude",":") [CPVar (11,"xfbody"),CPComb ("Prelude","[]") []]]]] (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Func")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (6,"mod"))) (CVar (7,"fname")))) (CApply (CSymbol ("Read","readNat")) (CVar (8,"farity")))) (CApply (CSymbol ("FlatCurryXML","xvis2vis")) (CVar (9,"xvis")))) (CApply (CSymbol ("FlatCurryXML","flatx2texp")) (CVar (10,"xftype")))) (CApply (CSymbol ("FlatCurryXML","flatx2FunBody")) (CVar (11,"xfbody")))))) (CVar (3,"xfunctions")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPVar (12,"mod")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (13,"name")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]]],CPVar (14,"xfix")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]],CPVar (15,"xprec")],CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") []]] (CApply (CApply (CApply (CSymbol ("FlatCurry","Op")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (12,"mod"))) (CVar (13,"name")))) (CApply (CSymbol ("FlatCurryXML","flatx2Fixity")) (CVar (14,"xfix")))) (CApply (CSymbol ("Read","readNat")) (CVar (15,"xprec")))))) (CVar (4,"xoperators"))))] []]),
  CFunc ("FlatCurryXML","xmlFile2FlatCurry") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("FlatCurry","Prog") []])) (CRules CFlex [CRule [CPVar (0,"filename")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"xexp")) (CApply (CSymbol ("XML","readXmlFile")) (CVar (0,"filename"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("FlatCurryXML","xml2FlatCurry")) (CVar (1,"xexp"))))])] []]),
  CFunc ("FlatCurryXML","xmlShowBranch") 1 Private (CFuncType (CTCons ("FlatCurry","BranchExpr") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Branch") [CPComb ("FlatCurry","Pattern") [CPVar (0,"cons"),CPVar (1,"xs")],CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (0,"cons")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowVar"))) (CVar (1,"xs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (2,"e")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","Branch") [CPComb ("FlatCurry","LPattern") [CPVar (3,"lit")],CPVar (4,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowLit")) (CVar (3,"lit")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (4,"e")))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryXML","xmlShowCons") 1 Private (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Cons") [CPVar (0,"cname"),CPVar (1,"arity"),CPVar (2,"vis"),CPVar (3,"types")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (0,"cname")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"arity"))))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatCurryXML","xmlShowVisibity")) (CVar (2,"vis")))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowTypeExpr"))) (CVar (3,"types"))))] []]),
  CFunc ("FlatCurryXML","xmlShowExpr") 1 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Var") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurryXML","xmlShowVar")) (CVar (0,"n")))] [],CRule [CPComb ("FlatCurry","Lit") [CPVar (1,"l")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowLit")) (CVar (1,"l")))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","FuncCall") [],CPVar (2,"cf"),CPVar (3,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (2,"cf")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowExpr"))) (CVar (3,"es"))))] [],CRule [CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","ConsCall") [],CPVar (4,"cf"),CPVar (5,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (4,"cf")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowExpr"))) (CVar (5,"es"))))] [],CRule [CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","FuncPartCall") [CPVar (6,"n")],CPVar (7,"cf"),CPVar (8,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (7,"cf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (6,"n"))))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowExpr"))) (CVar (8,"es"))))] [],CRule [CPComb ("FlatCurry","Comb") [CPComb ("FlatCurry","ConsPartCall") [CPVar (9,"n")],CPVar (10,"cf"),CPVar (11,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (10,"cf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (9,"n"))))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowExpr"))) (CVar (11,"es"))))] [],CRule [CPComb ("FlatCurry","Free") [CPVar (12,"xs"),CPVar (13,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowVar"))) (CVar (12,"xs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (13,"e")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","Or") [CPVar (14,"e1"),CPVar (15,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (14,"e1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (15,"e2")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","Case") [CPVar (16,"ctype"),CPVar (17,"e"),CPVar (18,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (16,"ctype"))) (CSymbol ("FlatCurry","Flex")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (17,"e")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowBranch"))) (CVar (18,"cs")))))] [],CRule [CPComb ("FlatCurry","Let") [CPVar (19,"bindings"),CPVar (20,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (21,"i"),CPVar (22,"e")]] (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowVar")) (CVar (21,"i")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (22,"e")))) (CSymbol ("Prelude","[]"))))))) (CVar (19,"bindings")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (20,"expr")))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryXML","xmlShowFunc") 1 Private (CFuncType (CTCons ("FlatCurry","FuncDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Func") [CPVar (0,"name"),CPVar (1,"arity"),CPVar (2,"vis"),CPVar (3,"ftype"),CPVar (4,"rl")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"arity"))))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatCurryXML","xmlShowVisibity")) (CVar (2,"vis")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowTypeExpr")) (CVar (3,"ftype")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowRule")) (CVar (4,"rl")))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryXML","xmlShowLit") 1 Private (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Intc") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("FlatCurry","Floatc") [CPVar (1,"f")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"f"))))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("FlatCurry","Charc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CApply (CSymbol ("Prelude","ord")) (CVar (2,"c")))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatCurryXML","xmlShowOp") 1 Private (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Op") [CPVar (0,"name"),CPVar (1,"fix"),CPVar (2,"prec")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"fix"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (2,"prec"))))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("FlatCurryXML","xmlShowRule") 1 Private (CFuncType (CTCons ("FlatCurry","Rule") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Rule") [CPVar (0,"params"),CPVar (1,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowVar"))) (CVar (0,"params"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowExpr")) (CVar (1,"expr")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","External") [CPVar (2,"name")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (2,"name")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatCurryXML","xmlShowTVar") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPVar (0,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatCurryXML","xmlShowType") 1 Private (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","Type") [CPVar (0,"name"),CPVar (1,"vis"),CPVar (2,"tpars"),CPVar (3,"consdecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (0,"name")))) (CApply (CSymbol ("FlatCurryXML","xmlShowVisibity")) (CVar (1,"vis"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowTVar"))) (CVar (2,"tpars"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowCons"))) (CVar (3,"consdecls")))))] [],CRule [CPComb ("FlatCurry","TypeSyn") [CPVar (4,"name"),CPVar (5,"vis"),CPVar (6,"tpars"),CPVar (7,"texp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (4,"name")))) (CApply (CSymbol ("FlatCurryXML","xmlShowVisibity")) (CVar (5,"vis"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowTVar"))) (CVar (6,"tpars"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowTypeExpr")) (CVar (7,"texp")))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatCurryXML","xmlShowTypeExpr") 1 Private (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","FuncType") [CPVar (0,"t1"),CPVar (1,"t2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowTypeExpr")) (CVar (0,"t1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatCurryXML","xmlShowTypeExpr")) (CVar (1,"t2")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("FlatCurry","TCons") [CPVar (2,"tc"),CPVar (3,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("FlatCurryXML","qname2xmlattrs")) (CVar (2,"tc")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurryXML","xmlShowTypeExpr"))) (CVar (3,"ts"))))] [],CRule [CPComb ("FlatCurry","TVar") [CPVar (4,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurryXML","xmlShowTVar")) (CVar (4,"n")))] []]),
  CFunc ("FlatCurryXML","xmlShowVar") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPVar (0,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatCurryXML","xmlShowVisibity") 1 Private (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPComb ("FlatCurry","Public") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("FlatCurry","Private") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("FlatCurryXML","xvis2vis") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("FlatCurry","Visibility") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","Public"))] [],CRule [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","Private"))] []])]
 []
