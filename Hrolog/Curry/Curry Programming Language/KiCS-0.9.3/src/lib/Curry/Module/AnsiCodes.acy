CurryProg "AnsiCodes"
 ["Prelude","Char","List"]
 []
 [CFunc ("AnsiCodes","ansiLength") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnsiCodes","aux")) (CVar (0,"s"))) (CApply (CSymbol ("Prelude","length")) (CVar (0,"s"))))] [CLocalFunc (CFunc ("AnsiCodes","aux") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (1,"n")] [(CSymbol ("Prelude","success"),CVar (1,"n"))] [],CRule [CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")],CPVar (4,"n")] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CSymbol ("AnsiCodes","esc")))) (CApply (CSymbol ("Char","isDigit")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (3,"cs"))) (CLit (CIntc 2)))),CApply (CApply (CSymbol ("AnsiCodes","aux")) (CApply (CSymbol ("Prelude","tail")) (CApply (CSymbol ("Prelude","tail")) (CApply (CSymbol ("Prelude","tail")) (CApply (CSymbol ("Prelude","tail")) (CVar (3,"cs"))))))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (4,"n"))) (CLit (CIntc 5)))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CSymbol ("AnsiCodes","esc")),CApply (CApply (CSymbol ("AnsiCodes","aux")) (CApply (CSymbol ("Prelude","tail")) (CApply (CSymbol ("Prelude","tail")) (CApply (CSymbol ("Prelude","tail")) (CVar (3,"cs")))))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (4,"n"))) (CLit (CIntc 4)))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("AnsiCodes","aux")) (CVar (3,"cs"))) (CVar (4,"n")))] []]))]]),
  CFunc ("AnsiCodes","bgBlack") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 40)))] []]),
  CFunc ("AnsiCodes","bgBlue") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 44)))] []]),
  CFunc ("AnsiCodes","bgCyan") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 46)))] []]),
  CFunc ("AnsiCodes","bgGreen") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 42)))] []]),
  CFunc ("AnsiCodes","bgMagenta") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 45)))] []]),
  CFunc ("AnsiCodes","bgRed") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 41)))] []]),
  CFunc ("AnsiCodes","bgWhite") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 47)))] []]),
  CFunc ("AnsiCodes","bgYellow") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 43)))] []]),
  CFunc ("AnsiCodes","black") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 30)))] []]),
  CFunc ("AnsiCodes","blue") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 34)))] []]),
  CFunc ("AnsiCodes","bold") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 1)))] []]),
  CFunc ("AnsiCodes","clear") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("AnsiCodes","cmd") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("AnsiCodes","esc"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CVar (0,"s"))))] []]),
  CFunc ("AnsiCodes","concealed") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 8)))] []]),
  CFunc ("AnsiCodes","cursorBack") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","moveCursor")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","cursorDown") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","moveCursor")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","cursorFwd") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","moveCursor")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","cursorHome") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","cursorPos") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"r"),CPVar (1,"c")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"r")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"c")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("AnsiCodes","cursorUp") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","moveCursor")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","cyan") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 36)))] []]),
  CFunc ("AnsiCodes","eraseLine") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'K'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","esc") 0 Private (CTCons ("Prelude","Char") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 27)))] []]),
  CFunc ("AnsiCodes","green") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 32)))] []]),
  CFunc ("AnsiCodes","isSuffixOf") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("List","isPrefixOf")) (CApply (CSymbol ("Prelude","reverse")) (CVar (0,"s"))))) (CSymbol ("Prelude","reverse")))] []]),
  CFunc ("AnsiCodes","magenta") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 35)))] []]),
  CFunc ("AnsiCodes","mode") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"n")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"s"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("AnsiCodes","isSuffixOf")) (CVar (2,"end"))) (CVar (1,"s")))) (CSymbol ("Prelude","[]"))) (CVar (2,"end")))))))] [CLocalPat (CPVar (2,"end")) (CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]"))))) []]]),
  CFunc ("AnsiCodes","moveCursor") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"n")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"n")))) (CVar (0,"s"))))] []]),
  CFunc ("AnsiCodes","red") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 31)))] []]),
  CFunc ("AnsiCodes","restoreCursor") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","revColors") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 7)))] []]),
  CFunc ("AnsiCodes","saveCursor") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","cmd")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnsiCodes","underline") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 4)))] []]),
  CFunc ("AnsiCodes","white") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 37)))] []]),
  CFunc ("AnsiCodes","yellow") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnsiCodes","mode")) (CLit (CIntc 33)))] []])]
 []
