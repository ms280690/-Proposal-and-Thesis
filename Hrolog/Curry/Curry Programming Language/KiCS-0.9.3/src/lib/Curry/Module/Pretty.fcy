Prog "Pretty" ["Dequeue","Prelude"] [TypeSyn ("Pretty","Layout") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("Pretty","Horizontal") Private [] (TCons ("Prelude","Bool") []),TypeSyn ("Pretty","Remaining") Private [] (TCons ("Prelude","Int") []),TypeSyn ("Pretty","Width") Private [] (TCons ("Prelude","Int") []),TypeSyn ("Pretty","Position") Private [] (TCons ("Prelude","Int") []),TypeSyn ("Pretty","StartPosition") Private [] (TCons ("Prelude","Int") []),TypeSyn ("Pretty","EndPosition") Private [] (TCons ("Prelude","Int") []),TypeSyn ("Pretty","Out") Private [] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))),TypeSyn ("Pretty","OutGroupPrefix") Private [] (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))),TypeSyn ("Pretty","Margins") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]),Type ("Pretty","Doc") Public [] [Cons ("Pretty","Doc") 1 Private [FuncType (TCons ("Pretty","Tokens") []) (TCons ("Pretty","Tokens") [])]],Type ("Pretty","Tokens") Private [] [Cons ("Pretty","Text") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Pretty","Tokens") []],Cons ("Pretty","Line") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Pretty","Tokens") []],Cons ("Pretty","Open") 1 Private [TCons ("Pretty","Tokens") []],Cons ("Pretty","Close") 1 Private [TCons ("Pretty","Tokens") []],Cons ("Pretty","Empty") 0 Private [],Cons ("Pretty","OpenNest") 2 Private [FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))),TCons ("Pretty","Tokens") []],Cons ("Pretty","CloseNest") 1 Private [TCons ("Pretty","Tokens") []]]] [Func ("Pretty","deDoc") 1 Private (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Tokens") []) (TCons ("Pretty","Tokens") []))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Pretty","Doc") [2]) (Var 2)])),Func ("Pretty","empty") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude","[]") []])),Func ("Pretty","text") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb ConsCall ("Pretty","Doc") [Comb (ConsPartCall 1) ("Pretty","Text") [Var 1]])),Func ("Pretty","linesep") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Pretty","Doc") [],Comb (ConsPartCall 2) ("Pretty","Line") []])),Func ("Pretty","line") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","linesep") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]])),Func ("Pretty","linebreak") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","linesep") [],Comb ConsCall ("Prelude","[]") []])),Func ("Pretty","softline") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","line") []])),Func ("Pretty","softbreak") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","linebreak") []])),Func ("Pretty","group") 1 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb ConsCall ("Pretty","Doc") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Pretty","Open") [],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","deDoc") [Var 1],Comb (ConsPartCall 1) ("Pretty","Close") []]]])),Func ("Pretty","nest") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Comb ConsCall ("Pretty","Doc") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Pretty","OpenNest") [Comb (FuncPartCall 3) ("Pretty","nest._#lambda2") [Var 1]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","deDoc") [Var 2],Comb (ConsPartCall 1) ("Pretty","CloseNest") []]]])),Func ("Pretty","nest._#lambda2") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","+") [Var 5,Var 1],Var 2])])),Func ("Pretty","hang") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Comb ConsCall ("Pretty","Doc") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Pretty","OpenNest") [Comb (FuncPartCall 3) ("Pretty","hang._#lambda3") [Var 1]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","deDoc") [Var 2],Comb (ConsPartCall 1) ("Pretty","CloseNest") []]]])),Func ("Pretty","hang._#lambda3") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","-") [Var 4,Var 3],Var 1],Var 2])),Func ("Pretty","align") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  0)])),Func ("Pretty","combine") 3 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Pretty","enclose") [Var 2,Var 3,Var 1])),Func ("Pretty","<>") 2 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Comb ConsCall ("Pretty","Doc") [Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","deDoc") [Var 1],Comb FuncCall ("Pretty","deDoc") [Var 2]]])),Func ("Pretty","<+>") 0 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [] (Comb (FuncPartCall 2) ("Pretty","combine") [Comb FuncCall ("Pretty","space") []])),Func ("Pretty","<$>") 0 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [] (Comb (FuncPartCall 2) ("Pretty","combine") [Comb FuncCall ("Pretty","line") []])),Func ("Pretty","</>") 0 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [] (Comb (FuncPartCall 2) ("Pretty","combine") [Comb FuncCall ("Pretty","softline") []])),Func ("Pretty","<$$>") 0 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [] (Comb (FuncPartCall 2) ("Pretty","combine") [Comb FuncCall ("Pretty","linebreak") []])),Func ("Pretty","<//>") 0 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [] (Comb (FuncPartCall 2) ("Pretty","combine") [Comb FuncCall ("Pretty","softbreak") []])),Func ("Pretty","compose") 2 Public (FuncType (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldr1") [Var 1,Var 2])])),Func ("Pretty","hsep") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","compose") [Comb FuncCall ("Pretty","<+>") []])),Func ("Pretty","vsep") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","compose") [Comb FuncCall ("Pretty","<$>") []])),Func ("Pretty","fillSep") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","compose") [Comb FuncCall ("Pretty","</>") []])),Func ("Pretty","sep") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","group") [],Comb FuncCall ("Pretty","vsep") []])),Func ("Pretty","hcat") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","compose") [Comb (FuncPartCall 2) ("Pretty","<>") []])),Func ("Pretty","vcat") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","compose") [Comb FuncCall ("Pretty","<$$>") []])),Func ("Pretty","fillCat") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","compose") [Comb FuncCall ("Pretty","<//>") []])),Func ("Pretty","cat") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","group") [],Comb FuncCall ("Pretty","vcat") []])),Func ("Pretty","punctuate") 2 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Pretty","punctuate.go.75") [Var 1,Var 2])])),Func ("Pretty","punctuate.go.75") 2 Private (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","<>") [Var 3,Var 1],Comb FuncCall ("Pretty","punctuate.go.75") [Var 1,Var 4]])])])),Func ("Pretty","encloseSep") 4 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Pretty","<>") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Pretty","enclose") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","cat") [],Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Pretty","<>") [Var 3],Var 6]]]]])])),Func ("Pretty","hEncloseSep") 4 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Pretty","<>") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Pretty","enclose") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","hcat") [],Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Pretty","<>") [Var 3],Var 6]]]]])])),Func ("Pretty","fillEncloseSep") 4 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Pretty","<>") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Pretty","enclose") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","hcat") [],Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Pretty","fillEncloseSep.withSoftBreaks.96") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Pretty","<>") [Var 3],Var 6]]]]]])])),Func ("Pretty","fillEncloseSep.withSoftBreaks.96") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","linebreak") [],Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","linebreak") [],Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","<>") [Var 2,Comb FuncCall ("Pretty","linebreak") []]]]],Comb FuncCall ("Pretty","fillEncloseSep.withSoftBreaks.96") [Var 3]])])])),Func ("Pretty","list") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","lbracket") [],Comb FuncCall ("Pretty","rbracket") [],Comb FuncCall ("Pretty","comma") []])),Func ("Pretty","tupled") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","lparen") [],Comb FuncCall ("Pretty","rparen") [],Comb FuncCall ("Pretty","comma") []])),Func ("Pretty","semiBraces") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","lbrace") [],Comb FuncCall ("Pretty","rbrace") [],Comb FuncCall ("Pretty","semi") []])),Func ("Pretty","enclose") 3 Public (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Var 1,Var 3],Var 2])),Func ("Pretty","squotes") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","enclose") [Comb FuncCall ("Pretty","squote") [],Comb FuncCall ("Pretty","squote") []])),Func ("Pretty","dquotes") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","enclose") [Comb FuncCall ("Pretty","dquote") [],Comb FuncCall ("Pretty","dquote") []])),Func ("Pretty","bquotes") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","enclose") [Comb FuncCall ("Pretty","bquote") [],Comb FuncCall ("Pretty","bquote") []])),Func ("Pretty","parens") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","enclose") [Comb FuncCall ("Pretty","lparen") [],Comb FuncCall ("Pretty","rparen") []])),Func ("Pretty","angles") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","enclose") [Comb FuncCall ("Pretty","langle") [],Comb FuncCall ("Pretty","rangle") []])),Func ("Pretty","braces") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","enclose") [Comb FuncCall ("Pretty","lbrace") [],Comb FuncCall ("Pretty","rbrace") []])),Func ("Pretty","brackets") 0 Public (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","enclose") [Comb FuncCall ("Pretty","lbracket") [],Comb FuncCall ("Pretty","rbracket") []])),Func ("Pretty","char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("Pretty","string") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","hcat") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Pretty","string._#lambda4") []]])),Func ("Pretty","string._#lambda4") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\r'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","line") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","char") [Var 1])])),Func ("Pretty","int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","show") [Var 1]])),Func ("Pretty","float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","show") [Var 1]])),Func ("Pretty","lparen") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '(')])),Func ("Pretty","rparen") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  ')')])),Func ("Pretty","langle") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '<')])),Func ("Pretty","rangle") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '>')])),Func ("Pretty","lbrace") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '{')])),Func ("Pretty","rbrace") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '}')])),Func ("Pretty","lbracket") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '[')])),Func ("Pretty","rbracket") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  ']')])),Func ("Pretty","squote") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '\'')])),Func ("Pretty","dquote") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '"')])),Func ("Pretty","bquote") 0 Private (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '`')])),Func ("Pretty","semi") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  ';')])),Func ("Pretty","colon") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  ':')])),Func ("Pretty","comma") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  ',')])),Func ("Pretty","space") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  ' ')])),Func ("Pretty","dot") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '.')])),Func ("Pretty","backslash") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '\\')])),Func ("Pretty","equals") 0 Public (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '=')])),Func ("Pretty","normalise") 0 Private (FuncType (TCons ("Pretty","Tokens") []) (TCons ("Pretty","Tokens") [])) (Rule [] (Comb (FuncPartCall 1) ("Pretty","normalise.go.173") [Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("Pretty","normalise.open.173") 1 Private (FuncType (TCons ("Pretty","Tokens") []) (TCons ("Pretty","Tokens") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Pretty","Close") [2]) (Var 2),Branch (Pattern ("Pretty","Text") [3,4]) (Comb ConsCall ("Pretty","Open") [Var 1]),Branch (Pattern ("Pretty","Line") [5,6]) (Comb ConsCall ("Pretty","Open") [Var 1]),Branch (Pattern ("Pretty","Open") [7]) (Comb ConsCall ("Pretty","Open") [Var 1]),Branch (Pattern ("Pretty","Empty") []) (Comb ConsCall ("Pretty","Open") [Var 1]),Branch (Pattern ("Pretty","OpenNest") [8,9]) (Comb ConsCall ("Pretty","Open") [Var 1]),Branch (Pattern ("Pretty","CloseNest") [10]) (Comb ConsCall ("Pretty","Open") [Var 1])])),Func ("Pretty","normalise.go.173") 2 Private (FuncType (FuncType (TCons ("Pretty","Tokens") []) (TCons ("Pretty","Tokens") [])) (FuncType (TCons ("Pretty","Tokens") []) (TCons ("Pretty","Tokens") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Pretty","Empty") []) (Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Pretty","Empty") []]),Branch (Pattern ("Pretty","Open") [3]) (Comb FuncCall ("Pretty","normalise.go.173") [Comb FuncCall ("Prelude",".") [Var 1,Comb (FuncPartCall 1) ("Pretty","normalise.open.173") []],Var 3]),Branch (Pattern ("Pretty","Close") [4]) (Comb FuncCall ("Pretty","normalise.go.173") [Comb FuncCall ("Prelude",".") [Var 1,Comb (ConsPartCall 1) ("Pretty","Close") []],Var 4]),Branch (Pattern ("Pretty","Line") [5,6]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Var 1,Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Pretty","Line") [Var 5],Comb (FuncPartCall 1) ("Pretty","normalise.go.173") [Comb (FuncPartCall 1) ("Prelude","id") []]]],Var 6]),Branch (Pattern ("Pretty","Text") [7,8]) (Comb ConsCall ("Pretty","Text") [Var 7,Comb FuncCall ("Pretty","normalise.go.173") [Var 1,Var 8]]),Branch (Pattern ("Pretty","OpenNest") [9,10]) (Comb ConsCall ("Pretty","OpenNest") [Var 9,Comb FuncCall ("Pretty","normalise.go.173") [Var 1,Var 10]]),Branch (Pattern ("Pretty","CloseNest") [11]) (Comb ConsCall ("Pretty","CloseNest") [Comb FuncCall ("Pretty","normalise.go.173") [Var 1,Var 11]])])),Func ("Pretty","doc2Tokens") 1 Private (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Tokens") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Pretty","Doc") [2]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","normalise") [],Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Pretty","Empty") []]])])),Func ("Pretty","pretty") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Pretty","noGroup") [Comb FuncCall ("Pretty","doc2Tokens") [Var 2],Var 1,Lit (Intc  1),Var 1,Comb ConsCall ("Prelude",":") [Lit (Intc  0),Comb ConsCall ("Prelude","[]") []]])),Func ("Pretty","length") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Int") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","length") [],Comb (FuncPartCall 1) ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Intc  5),Comb ConsCall ("Prelude",":") [Lit (Intc  6),Comb ConsCall ("Prelude",":") [Lit (Intc  7),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  16),Lit (Intc  31)]]],Comb (FuncPartCall 1) ("Prelude","ord") []]]]])),Func ("Pretty","noGroup") 5 Private (FuncType (TCons ("Pretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 1) [Branch (Pattern ("Pretty","Empty") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Pretty","Text") [6,7]) (Let [(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","length") [],Var 6])] (Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Pretty","noGroup") [Var 7,Var 2,Comb FuncCall ("Prelude","+") [Var 3,Var 8],Comb FuncCall ("Prelude","-") [Var 4,Var 8],Var 5]])),Branch (Pattern ("Pretty","Line") [9,10]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [11,12]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","replicate") [Var 11,Lit (Charc  ' ')],Comb FuncCall ("Pretty","noGroup") [Var 10,Var 2,Comb FuncCall ("Prelude","+") [Var 3,Lit (Intc  1)],Comb FuncCall ("Prelude","-") [Var 2,Var 11],Var 5]]])]),Branch (Pattern ("Pretty","Open") [13]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","oneGroup") [Var 13,Var 2,Var 3,Comb FuncCall ("Prelude","+") [Var 3,Var 4],Comb (FuncPartCall 2) ("Pretty","noGroup._#lambda6") []],Var 4],Var 5]),Branch (Pattern ("Pretty","Close") [14]) (Comb FuncCall ("Pretty","noGroup") [Var 14,Var 2,Var 3,Var 4,Var 5]),Branch (Pattern ("Pretty","OpenNest") [15,16]) (Comb FuncCall ("Pretty","noGroup") [Var 16,Var 2,Var 3,Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 15,Var 5],Var 4],Var 2]]),Branch (Pattern ("Pretty","CloseNest") [17]) (Comb FuncCall ("Pretty","noGroup") [Var 17,Var 2,Var 3,Var 4,Comb FuncCall ("Prelude","tail") [Var 5]])])),Func ("Pretty","noGroup._#lambda6") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2] (Var 2)),Func ("Pretty","oneGroup") 5 Private (FuncType (TCons ("Pretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5] (Case  Flex (Var 1) [Branch (Pattern ("Pretty","Text") [6,7]) (Let [(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","length") [],Var 6])] (Comb FuncCall ("Pretty","pruneOne") [Var 7,Var 2,Comb FuncCall ("Prelude","+") [Var 3,Var 8],Var 4,Comb (FuncPartCall 2) ("Pretty","oneGroup._#lambda7") [Var 8,Var 5,Var 6]])),Branch (Pattern ("Pretty","Line") [9,10]) (Let [(11,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","length") [],Var 9])] (Comb FuncCall ("Pretty","pruneOne") [Var 10,Var 2,Comb FuncCall ("Prelude","+") [Var 3,Var 11],Var 4,Comb (FuncPartCall 2) ("Pretty","oneGroup._#lambda8") [Var 11,Var 5,Var 9,Var 2]])),Branch (Pattern ("Pretty","Open") [12]) (Comb FuncCall ("Pretty","multiGroup") [Var 12,Var 2,Var 3,Var 4,Var 5,Comb FuncCall ("Dequeue","empty") [],Var 3,Comb (FuncPartCall 2) ("Pretty","oneGroup._#lambda9") []]),Branch (Pattern ("Pretty","Close") [13]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Comb FuncCall ("Prelude","<=") [Var 3,Var 4]],Comb (FuncPartCall 2) ("Pretty","noGroup") [Var 13,Var 2,Var 3]]),Branch (Pattern ("Pretty","OpenNest") [14,15]) (Comb FuncCall ("Pretty","oneGroup") [Var 15,Var 2,Var 3,Var 4,Comb (FuncPartCall 2) ("Pretty","oneGroup._#lambda10") [Var 14,Var 5,Var 2]]),Branch (Pattern ("Pretty","CloseNest") [16]) (Comb FuncCall ("Pretty","oneGroup") [Var 16,Var 2,Var 3,Var 4,Comb (FuncPartCall 2) ("Pretty","oneGroup._#lambda12") [Var 5]])])),Func ("Pretty","oneGroup.outText.234") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Comb FuncCall ("Prelude","-") [Var 4,Var 1]],Var 5]])),Func ("Pretty","oneGroup._#lambda7") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Comb (FuncPartCall 2) ("Pretty","oneGroup.outText.234") [Var 1,Var 3,Var 5]])),Func ("Pretty","oneGroup.outLine.240") 7 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Comb FuncCall ("Prelude","-") [Var 6,Var 1]],Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","replicate") [Var 8,Lit (Charc  ' ')],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Comb FuncCall ("Prelude","-") [Var 3,Var 8]],Var 7]]])])])),Func ("Pretty","oneGroup._#lambda8") 6 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 5],Comb (FuncPartCall 2) ("Pretty","oneGroup.outLine.240") [Var 1,Var 3,Var 4,Var 5,Var 6]])),Func ("Pretty","oneGroup._#lambda9") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2] (Var 2)),Func ("Pretty","oneGroup._#lambda10") 5 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Comb (FuncPartCall 2) ("Pretty","oneGroup._#lambda10._#lambda11") [Var 5,Var 1,Var 3]])),Func ("Pretty","oneGroup._#lambda10._#lambda11") 5 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 5],Var 4],Var 3]])),Func ("Pretty","oneGroup._#lambda12") 3 Private (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb (FuncPartCall 2) ("Pretty","oneGroup._#lambda12._#lambda13") [Var 3]])),Func ("Pretty","oneGroup._#lambda12._#lambda13") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","tail") [Var 3]])),Func ("Pretty","multiGroup") 8 Private (FuncType (TCons ("Pretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Dequeue","Queue") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [1,2,3,4,5,6,7,8] (Case  Flex (Var 1) [Branch (Pattern ("Pretty","Text") [9,10]) (Let [(11,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","length") [],Var 9])] (Comb FuncCall ("Pretty","pruneMulti") [Var 10,Var 2,Comb FuncCall ("Prelude","+") [Var 3,Var 11],Var 4,Var 5,Var 6,Var 7,Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda14") [Var 11,Var 8,Var 9]])),Branch (Pattern ("Pretty","Line") [12,13]) (Let [(14,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","length") [],Var 12])] (Comb FuncCall ("Pretty","pruneMulti") [Var 13,Var 2,Comb FuncCall ("Prelude","+") [Var 3,Var 14],Var 4,Var 5,Var 6,Var 7,Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda15") [Var 14,Var 8,Var 12,Var 2]])),Branch (Pattern ("Pretty","Open") [15]) (Comb FuncCall ("Pretty","multiGroup") [Var 15,Var 2,Var 3,Var 4,Var 5,Comb FuncCall ("Dequeue","cons") [Comb ConsCall ("Prelude","(,)") [Var 7,Var 8],Var 6],Var 3,Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda16") []]),Branch (Pattern ("Pretty","Close") [16]) (Case  Rigid (Comb FuncCall ("Dequeue","matchHead") [Var 6]) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Pretty","oneGroup") [Var 16,Var 2,Var 3,Var 4,Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda18") [Var 8,Var 5,Var 3,Var 7]]),Branch (Pattern ("Prelude","Just") [17]) (Case  Rigid (Var 17) [Branch (Pattern ("Prelude","(,)") [18,19]) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude","(,)") [20,21]) (Comb FuncCall ("Pretty","multiGroup") [Var 16,Var 2,Var 3,Var 4,Var 5,Var 19,Var 20,Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda20") [Var 21,Var 8,Var 3,Var 7]])])])]),Branch (Pattern ("Pretty","OpenNest") [22,23]) (Comb FuncCall ("Pretty","multiGroup") [Var 23,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda22") [Var 22,Var 8,Var 2]]),Branch (Pattern ("Pretty","CloseNest") [24]) (Comb FuncCall ("Pretty","multiGroup") [Var 24,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda24") [Var 8]])])),Func ("Pretty","multiGroup.outText.261") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Comb FuncCall ("Prelude","-") [Var 4,Var 1]],Var 5]])),Func ("Pretty","multiGroup._#lambda14") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Comb (FuncPartCall 2) ("Pretty","multiGroup.outText.261") [Var 1,Var 3,Var 5]])),Func ("Pretty","multiGroup.outLine.267") 7 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Comb FuncCall ("Prelude","-") [Var 6,Var 1]],Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","replicate") [Var 8,Lit (Charc  ' ')],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Comb FuncCall ("Prelude","-") [Var 3,Var 8]],Var 7]]])])])),Func ("Pretty","multiGroup._#lambda15") 6 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 5],Comb (FuncPartCall 2) ("Pretty","multiGroup.outLine.267") [Var 1,Var 3,Var 4,Var 5,Var 6]])),Func ("Pretty","multiGroup._#lambda16") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2] (Var 2)),Func ("Pretty","multiGroup._#lambda18") 6 Private (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 5],Comb (FuncPartCall 1) ("Pretty","multiGroup._#lambda18._#lambda19") [Var 6,Var 1,Var 3,Var 4]])),Func ("Pretty","multiGroup._#lambda18._#lambda19") 5 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Comb FuncCall ("Prelude","<=") [Var 3,Comb FuncCall ("Prelude","+") [Var 4,Var 5]]],Var 1],Var 5])),Func ("Pretty","multiGroup._#lambda20") 6 Private (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 5],Comb (FuncPartCall 1) ("Pretty","multiGroup._#lambda20._#lambda21") [Var 6,Var 2,Var 3,Var 4]])),Func ("Pretty","multiGroup._#lambda20._#lambda21") 5 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Comb FuncCall ("Prelude","<=") [Var 3,Comb FuncCall ("Prelude","+") [Var 4,Var 5]]],Var 1],Var 5])),Func ("Pretty","multiGroup._#lambda22") 5 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda22._#lambda23") [Var 5,Var 1,Var 3]])),Func ("Pretty","multiGroup._#lambda22._#lambda23") 5 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 5],Var 4],Var 3]])),Func ("Pretty","multiGroup._#lambda24") 3 Private (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb (FuncPartCall 2) ("Pretty","multiGroup._#lambda24._#lambda25") [Var 3]])),Func ("Pretty","multiGroup._#lambda24._#lambda25") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","tail") [Var 3]])),Func ("Pretty","pruneOne") 5 Private (FuncType (TCons ("Pretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5] (Case  Rigid (Comb FuncCall ("Prelude","<=") [Var 3,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","oneGroup") [Var 1,Var 2,Var 3,Var 4,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Comb ConsCall ("Prelude","False") []],Comb (FuncPartCall 2) ("Pretty","noGroup") [Var 1,Var 2,Var 3]])])),Func ("Pretty","pruneMulti") 8 Private (FuncType (TCons ("Pretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Dequeue","Queue") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [1,2,3,4,5,6,7,8] (Case  Rigid (Comb FuncCall ("Prelude","<=") [Var 3,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","multiGroup") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 5,Comb ConsCall ("Prelude","False") []],Comb (FuncPartCall 1) ("Pretty","pruneMulti._#lambda26") [Var 8,Var 3,Var 6,Var 7,Var 1,Var 2]])])),Func ("Pretty","pruneMulti._#lambda26") 7 Private (FuncType (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Dequeue","Queue") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Tokens") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [1,2,3,4,5,6,7] (Case  Rigid (Comb FuncCall ("Dequeue","matchLast") [Var 3]) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","pruneOne") [Var 5,Var 6,Var 2,Comb FuncCall ("Prelude","+") [Var 4,Var 7],Var 1],Var 7]),Branch (Pattern ("Prelude","Just") [8]) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude","(,)") [9,10]) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","(,)") [11,12]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","pruneMulti") [Var 5,Var 6,Var 2,Comb FuncCall ("Prelude","+") [Var 11,Var 7],Var 12,Var 10,Var 4,Var 1],Var 7])])])]))] [Op ("Pretty","<>") InfixlOp 1,Op ("Pretty","<+>") InfixlOp 1,Op ("Pretty","<$>") InfixlOp 1,Op ("Pretty","</>") InfixlOp 1,Op ("Pretty","<$$>") InfixlOp 1,Op ("Pretty","<//>") InfixlOp 1]