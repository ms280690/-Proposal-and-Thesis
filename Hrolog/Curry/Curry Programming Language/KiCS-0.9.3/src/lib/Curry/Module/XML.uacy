CurryProg "XML"
 ["Prelude","Char","Read","List"]
 [CType ("XML","XmlExp") Public [] [CCons ("XML","XText") 1 Public [CTCons ("Prelude","String") []],CCons ("XML","XElem") 3 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]],
  CType ("XML","Encoding") Public [] [CCons ("XML","StandardEnc") 0 Public [],CCons ("XML","Iso88591Enc") 0 Public []],
  CType ("XML","XmlDocParams") Public [] [CCons ("XML","Enc") 1 Public [CTCons ("XML","Encoding") []],CCons ("XML","DtdUrl") 1 Public [CTCons ("Prelude","String") []]]]
 [CFunc ("XML","dropBlanks") 0 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("Char","isSpace")))] []]),
  CFunc ("XML","dropCData") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '[')),CApply (CSymbol ("Prelude","tail")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (2,"x0"))) (CLit (CCharc ']'))))) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '>')),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs"))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("XML","dropCData")) (CVar (1,"cs")))] []]),
  CFunc ("XML","encoding2Attribute") 1 Private (CFuncType (CTCons ("XML","Encoding") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("XML","StandardEnc") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("XML","Iso88591Enc") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '8'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '8'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '5'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '9'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))] []]),
  CFunc ("XML","encoding2EncFunc") 1 Private (CFuncType (CTCons ("XML","Encoding") []) (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPComb ("XML","StandardEnc") []] [(CSymbol ("Prelude","success"),CSymbol ("XML","standardEncoding"))] [],CRule [CPComb ("XML","Iso88591Enc") []] [(CSymbol ("Prelude","success"),CSymbol ("XML","iso88591Encoding"))] []]),
  CFunc ("XML","hasDtdUrl") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlDocParams") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","DtdUrl") [CPVar (0,"_")],CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","Enc") [CPVar (2,"_")],CPVar (3,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XML","hasDtdUrl")) (CVar (3,"l")))] []]),
  CFunc ("XML","isXText") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("XML","XText") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPComb ("XML","XElem") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] []]),
  CFunc ("XML","iso88591Encoding") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CSymbol ("Prelude","ord")) (CVar (0,"c")))) (CSymbol ("XML","iso88591list")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CApply (CSymbol ("XML","iso88591Encoding")) (CVar (1,"cs"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("XML","standardEncoding")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("XML","iso88591Encoding")) (CVar (1,"cs")))))] []]),
  CFunc ("XML","iso88591list") 0 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 192))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 193))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 194))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 195))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 196))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 197))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 198))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 199))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 200))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 201))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 202))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 203))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 204))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 205))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 207))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 208))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 209))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 210))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 211))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 212))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 214))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 216))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 217))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 218))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 219))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 220))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 221))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 224))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 225))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 228))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 229))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 226))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 227))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 230))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 231))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 233))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 232))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 235))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 234))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 236))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 237))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 239))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 240))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 241))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 248))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 246))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 242))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 243))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 244))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 245))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 250))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 249))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 252))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 251))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 253))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 255))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))] []]),
  CFunc ("XML","lookupDtdUrl") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlDocParams") []]) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPComb ("XML","Enc") [CPVar (0,"_")],CPVar (1,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XML","lookupDtdUrl")) (CVar (1,"l")))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","DtdUrl") [CPVar (2,"url")],CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (2,"url"))] []]),
  CFunc ("XML","lookupEncoding") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlDocParams") []]) (CTCons ("XML","Encoding") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPComb ("XML","Enc") [CPVar (0,"f")],CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"f"))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","DtdUrl") [CPVar (2,"_")],CPVar (3,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XML","lookupEncoding")) (CVar (3,"l")))] [],CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("XML","StandardEnc"))] []]),
  CFunc ("XML","parseAttrs") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []]],CTCons ("Prelude","String") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CApply (CSymbol ("Char","isAlpha")) (CVar (0,"c")),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"name"),CPVar (3,"rest1")]) (CApply (CApply (CSymbol ("XML","splitAtChar")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs")))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"value"),CPVar (5,"rest2")]) (CApply (CApply (CSymbol ("XML","splitAtChar")) (CLit (CCharc '"'))) (CApply (CSymbol ("Prelude","tail")) (CVar (3,"rest1")))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"rem_attrs"),CPVar (7,"rem_inp")]) (CApply (CSymbol ("XML","parseAttrs")) (CApply (CSymbol ("XML","dropBlanks")) (CVar (5,"rest2")))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"name"))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (4,"value"))))) (CVar (6,"rem_attrs")))) (CVar (7,"rem_inp")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs"))))] []]),
  CFunc ("XML","parseXmlString") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","fst")) (CApply (CApply (CSymbol ("XML","parseXmlTokens")) (CApply (CSymbol ("XML","scanXmlString")) (CVar (0,"s")))) (CSymbol ("Prelude","Nothing"))))] []]),
  CFunc ("XML","parseXmlTokens") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","String") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPComb ("Prelude","Nothing") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","XText") [CPVar (0,"s")],CPVar (1,"xtokens")],CPVar (2,"stop")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"xexps"),CPVar (4,"rem_xtokens")]) (CApply (CApply (CSymbol ("XML","parseXmlTokens")) (CVar (1,"xtokens"))) (CVar (2,"stop"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","XText")) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (0,"s"))))) (CVar (3,"xexps")))) (CVar (4,"rem_xtokens"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPVar (5,"t"),CPVar (6,"ts")],CPVar (7,"args"),CPVar (8,"cont")],CPVar (9,"xtokens")],CPVar (10,"stop")] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"t"))) (CLit (CCharc '<')))) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CSymbol ("Prelude","head")) (CVar (6,"ts")))) (CLit (CCharc '/'))),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"xexps1"),CPVar (12,"xtokens1")]) (CApply (CApply (CSymbol ("XML","parseXmlTokens")) (CVar (9,"xtokens"))) (CApply (CSymbol ("Prelude","Just")) (CVar (6,"ts")))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (13,"xexps"),CPVar (14,"rem_xtokens")]) (CApply (CApply (CSymbol ("XML","parseXmlTokens")) (CVar (12,"xtokens1"))) (CVar (10,"stop"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CVar (6,"ts"))) (CVar (7,"args"))) (CVar (11,"xexps1")))) (CVar (13,"xexps")))) (CVar (14,"rem_xtokens")))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"t"))) (CLit (CCharc '<')))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (6,"ts")))) (CLit (CCharc '/'))),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","False"))) (CLambda [CPVar (15,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (15,"x0"))) (CApply (CSymbol ("Prelude","tail")) (CVar (6,"ts")))))) (CVar (10,"stop")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (9,"xtokens")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (16,"xexps"),CPVar (17,"rem_xtokens")]) (CApply (CApply (CSymbol ("XML","parseXmlTokens")) (CVar (9,"xtokens"))) (CVar (10,"stop"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CVar (6,"ts"))) (CVar (7,"args"))) (CVar (8,"cont")))) (CVar (16,"xexps")))) (CVar (17,"rem_xtokens"))))),(CSymbol ("Prelude","otherwise"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (18,"xexps"),CPVar (19,"rem_xtokens")]) (CApply (CApply (CSymbol ("XML","parseXmlTokens")) (CVar (9,"xtokens"))) (CVar (10,"stop"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"t"))) (CVar (6,"ts")))) (CVar (7,"args"))) (CVar (8,"cont")))) (CVar (18,"xexps")))) (CVar (19,"rem_xtokens"))))] []]),
  CFunc ("XML","readFileWithXmlDocs") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]])) (CRules CFlex [CRule [CPVar (0,"file")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Prelude","readFile")) (CVar (0,"file")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("XML","parseXmlString"))))] []]),
  CFunc ("XML","readUnsafeXmlFile") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("XML","XmlExp") []]])) (CRules CFlex [CRule [CPVar (0,"file")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","catchFail")) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("XML","readXmlFile")) (CVar (0,"file")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Just"))))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing"))))] []]),
  CFunc ("XML","readXmlFile") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("XML","XmlExp") []])) (CRules CFlex [CRule [CPVar (0,"file")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"xmlstring")) (CApply (CSymbol ("Prelude","readFile")) (CVar (0,"file"))),CSLet [CLocalPat (CPVar (2,"xexps")) (CApply (CSymbol ("XML","parseXmlString")) (CVar (1,"xmlstring"))) []],CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"xexps"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"file"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'X'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CSymbol ("Prelude","tail")) (CVar (2,"xexps")))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"file"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'X'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","head")) (CVar (2,"xexps"))))))])] []]),
  CFunc ("XML","scanXmlCData") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []])) (CRules CFlex [CRule [CPVar (0,"cs")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (1,"rest")) (CApply (CSymbol ("XML","dropCData")) (CVar (0,"cs"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"rest")))) (CLit (CCharc '>')))) (CApply (CSymbol ("XML","scanXmlString")) (CApply (CSymbol ("Prelude","tail")) (CVar (1,"rest"))))) (CApply (CSymbol ("XML","scanXmlCData")) (CVar (1,"rest")))))] []]),
  CFunc ("XML","scanXmlComment") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '-')))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (1,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("XML","scanXmlString")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (1,"cs"))))) (CApply (CSymbol ("XML","scanXmlComment")) (CVar (1,"cs"))))] []]),
  CFunc ("XML","scanXmlElem") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '!')),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (1,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("XML","scanXmlComment")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (1,"cs"))))) (CApply (CSymbol ("XML","scanXmlCData")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '?')),CApply (CSymbol ("XML","scanXmlProcInstr")) (CVar (1,"cs"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("XML","scanXmlElemName")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))) (CVar (1,"cs")))] []]),
  CFunc ("XML","scanXmlElemName") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"ct"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CVar (0,"ct")))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"ct"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CLit (CCharc '>')),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CVar (1,"ct")))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("XML","scanXmlString")) (CVar (3,"cs")))),(CApply (CSymbol ("Char","isSpace")) (CVar (2,"c")),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"attrs"),CPVar (5,"rest")]) (CApply (CSymbol ("XML","parseAttrs")) (CApply (CSymbol ("XML","dropBlanks")) (CVar (3,"cs")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (5,"rest")))) (CLit (CCharc '/')))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CVar (1,"ct"))) (CVar (4,"attrs"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("XML","scanXmlString")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (5,"rest")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CVar (1,"ct")))) (CVar (4,"attrs"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("XML","scanXmlString")) (CApply (CSymbol ("Prelude","tail")) (CVar (5,"rest"))))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CLit (CCharc '/')))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (3,"cs")))) (CLit (CCharc '>'))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CVar (1,"ct"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("XML","scanXmlString")) (CApply (CSymbol ("Prelude","tail")) (CVar (3,"cs"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("XML","scanXmlElemName")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"ct"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CSymbol ("Prelude","[]"))))) (CVar (3,"cs")))] []]),
  CFunc ("XML","scanXmlProcInstr") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '?')))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"cs")))) (CLit (CCharc '>'))))) (CApply (CSymbol ("XML","scanXmlString")) (CApply (CSymbol ("Prelude","tail")) (CVar (1,"cs"))))) (CApply (CSymbol ("XML","scanXmlProcInstr")) (CVar (1,"cs"))))] []]),
  CFunc ("XML","scanXmlString") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XML","scanXml")) (CApply (CSymbol ("XML","dropBlanks")) (CVar (0,"s"))))] [CLocalFunc (CFunc ("XML","scanXml") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c"),CPVar (2,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c"))) (CLit (CCharc '<')))) (CApply (CSymbol ("XML","scanXmlElem")) (CVar (2,"cs")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"initxt"),CPVar (4,"remtag")]) (CApply (CSymbol ("XML","scanXmlText")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c"))) (CVar (2,"cs")))) []] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","XText")) (CVar (3,"initxt")))) (CApply (CSymbol ("XML","scanXml")) (CVar (4,"remtag"))))))] []]))]]),
  CFunc ("XML","scanXmlText") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '<')),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs")))),(CApply (CSymbol ("Char","isSpace")) (CVar (0,"c")),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"txt"),CPVar (3,"rem")]) (CApply (CSymbol ("XML","scanXmlText")) (CApply (CSymbol ("XML","dropBlanks")) (CVar (1,"cs")))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"txt")))) (CVar (2,"txt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CVar (2,"txt"))))) (CVar (3,"rem")))),(CSymbol ("Prelude","otherwise"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"txt"),CPVar (5,"rem")]) (CApply (CSymbol ("XML","scanXmlText")) (CVar (1,"cs"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (4,"txt")))) (CVar (5,"rem"))))] []]),
  CFunc ("XML","showXmlDoc") 1 Public (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"xexp")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","showXmlDocWithParams")) (CSymbol ("Prelude","[]"))) (CVar (0,"xexp")))] []]),
  CFunc ("XML","showXmlDocWithParams") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlDocParams") []]) (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","String") []))) (CRules CFlex [CRule [CPVar (0,"ps"),CPComb ("XML","XElem") [CPVar (1,"root"),CPVar (2,"attrL"),CPVar (3,"xmlEL")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("XML","encoding2Attribute")) (CApply (CSymbol ("XML","lookupEncoding")) (CVar (0,"ps"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("XML","hasDtdUrl")) (CVar (0,"ps")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("XML","hasDtdUrl")) (CVar (0,"ps")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'Y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"root"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'Y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("XML","lookupDtdUrl")) (CVar (0,"ps")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CSymbol ("XML","showXmlExp")) (CLit (CIntc 0))) (CApply (CSymbol ("XML","encoding2EncFunc")) (CApply (CSymbol ("XML","lookupEncoding")) (CVar (0,"ps"))))) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CVar (1,"root"))) (CVar (2,"attrL"))) (CVar (3,"xmlEL"))))))))))] []]),
  CFunc ("XML","showXmlExp") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"i"),CPVar (1,"encFun"),CPComb ("XML","XText") [CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("XML","xtab")) (CVar (0,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (1,"encFun")) (CVar (2,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPVar (3,"i"),CPVar (4,"encFun"),CPComb ("XML","XElem") [CPVar (5,"tag"),CPVar (6,"attrs"),CPVar (7,"xexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("XML","xtab")) (CVar (3,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("XML","showXmlOpenTag")) (CVar (5,"tag"))) (CVar (6,"attrs"))) (CVar (4,"encFun")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"xexps"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (7,"xexps")))) (CLit (CIntc 1)))) (CApply (CSymbol ("XML","isXText")) (CApply (CSymbol ("Prelude","head")) (CVar (7,"xexps")))))) (CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPComb ("XML","XText") [CPVar (8,"s")],CPComb ("Prelude","[]") []]) (CVar (7,"xexps")) []] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (4,"encFun")) (CVar (8,"s")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"tag"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("XML","showXmlExps")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"i"))) (CLit (CIntc 2)))) (CVar (7,"xexps"))) (CVar (4,"encFun")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("XML","xtab")) (CVar (3,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"tag"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))] []]),
  CFunc ("XML","showXmlExps") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]) (CFuncType (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CTCons ("Prelude","String") [])))) (CRules CFlex [CRule [CPVar (0,"encFun"),CPVar (1,"xexps"),CPVar (2,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CApply (CSymbol ("XML","showXmlExp")) (CVar (0,"encFun"))) (CVar (2,"i")))) (CVar (1,"xexps")))] []]),
  CFunc ("XML","showXmlFile") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"file")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("XML","readXmlFile")) (CVar (0,"file")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","putStr"))) (CSymbol ("XML","showXmlDoc"))))] []]),
  CFunc ("XML","showXmlOpenTag") 3 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"tag"),CPVar (1,"attrs"),CPVar (2,"encFun")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tag"))) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CVar (3,"x0"))))) (CSymbol ("XML","attr2string")))) (CVar (1,"attrs"))))))] [CLocalFunc (CFunc ("XML","attr2string") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (3,"attr"),CPVar (4,"value")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"attr"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (2,"encFun")) (CVar (4,"value")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))] []]))]]),
  CFunc ("XML","splitAtChar") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"char"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CVar (1,"char")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (3,"cs")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"first"),CPVar (5,"rest")]) (CApply (CApply (CSymbol ("XML","splitAtChar")) (CVar (1,"char"))) (CVar (3,"cs"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CVar (4,"first")))) (CVar (5,"rest")))))] []]),
  CFunc ("XML","standardEncoding") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '<')),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '>')),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '&')),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '"')),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\'')),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","ord")) (CVar (0,"c")))) (CLit (CIntc 32)),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CApply (CSymbol ("Prelude","ord")) (CVar (0,"c"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs")))))),(CApply (CApply (CSymbol ("Prelude",">")) (CApply (CSymbol ("Prelude","ord")) (CVar (0,"c")))) (CLit (CIntc 127)),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CApply (CSymbol ("Prelude","ord")) (CVar (0,"c"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs")))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CApply (CSymbol ("XML","standardEncoding")) (CVar (1,"cs"))))] []]),
  CFunc ("XML","textOfXml") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPVar (0,"xexps")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("Prelude","null")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("XML","textOfXmlItem"))) (CVar (0,"xexps"))))))] [CLocalFunc (CFunc ("XML","textOfXmlItem") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPComb ("XML","XText") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CVar (1,"s"))] [],CRule [CPComb ("XML","XElem") [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"xs")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XML","textOfXml")) (CVar (4,"xs")))] []]))]]),
  CFunc ("XML","unquoteUnicode") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '#')),CCase (CVar (1,"cs")) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPVar (2,"cs'")]) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CSymbol ("Read","readHex")) (CVar (2,"cs'"))))) (CSymbol ("Prelude","[]"))),CBranch (CPVar (3,"_")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CSymbol ("Read","readInt")) (CVar (1,"cs"))))) (CSymbol ("Prelude","[]")))]),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("XML","writeXmlFile") 2 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"file"),CPVar (1,"xexp")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","writeXmlFileWithParams")) (CVar (0,"file"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","Enc")) (CSymbol ("XML","StandardEnc")))) (CSymbol ("Prelude","[]")))) (CVar (1,"xexp")))] []]),
  CFunc ("XML","writeXmlFileWithParams") 3 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlDocParams") []]) (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"file"),CPVar (1,"ps"),CPVar (2,"xexp")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","writeFile")) (CVar (0,"file"))) (CApply (CApply (CSymbol ("XML","showXmlDocWithParams")) (CVar (1,"ps"))) (CVar (2,"xexp"))))] []]),
  CFunc ("XML","xml") 2 Public (CFuncType (CTCons ("Prelude","String") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]) (CTCons ("XML","XmlExp") []))) (CRules CFlex [CRule [CPVar (0,"t"),CPVar (1,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CVar (0,"t"))) (CSymbol ("Prelude","[]"))) (CVar (1,"c")))] []]),
  CFunc ("XML","xmlUnquoteSpecial") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"special"),CPVar (1,"cs")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CSymbol ("Prelude","[]"))))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 228)))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 246)))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 252)))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 196)))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 214)))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'U'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 220)))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"special"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]"))))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CLit (CIntc 223)))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("XML","unquoteUnicode")) (CVar (0,"special")))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs"))))] []]),
  CFunc ("XML","xmlUnquoteSpecials") 1 Private (CFuncType (CTCons ("Prelude","String") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '&')),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"special"),CPVar (3,"rest")]) (CApply (CApply (CSymbol ("XML","splitAtChar")) (CLit (CCharc ';'))) (CVar (1,"cs"))) []] (CApply (CApply (CSymbol ("XML","xmlUnquoteSpecial")) (CVar (2,"special"))) (CVar (3,"rest")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CApply (CSymbol ("XML","xmlUnquoteSpecials")) (CVar (1,"cs"))))] []]),
  CFunc ("XML","xtab") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","take")) (CVar (0,"n"))) (CApply (CSymbol ("Prelude","repeat")) (CLit (CCharc ' '))))] []]),
  CFunc ("XML","xtxt") 1 Public (CFuncType (CTCons ("Prelude","String") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XML","XText")) (CVar (0,"s")))] []])]
 []
