Module "Char"
(Just (Exporting (8,12) [(Export (QualIdent Nothing (Ident "isUpper" 0))),(Export (QualIdent Nothing (Ident "isLower" 0))),(Export (QualIdent Nothing (Ident "isAlpha" 0))),(Export (QualIdent Nothing (Ident "isDigit" 0))),(Export (QualIdent Nothing (Ident "isAlphaNum" 0))),(Export (QualIdent Nothing (Ident "isOctDigit" 0))),(Export (QualIdent Nothing (Ident "isHexDigit" 0))),(Export (QualIdent Nothing (Ident "isSpace" 0))),(Export (QualIdent Nothing (Ident "toUpper" 0))),(Export (QualIdent Nothing (Ident "toLower" 0))),(Export (QualIdent Nothing (Ident "digitToInt" 0))),(Export (QualIdent Nothing (Ident "intToDigit" 0)))]))
[(ImportDecl (1,1) "Prelude" False Nothing Nothing)
,(TypeSig (12,1) [(Ident "isUpper" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (13,1) (Ident "isUpper" 0) [(Equation (13,1) (FunLhs (Ident "isUpper" 0) [(VariablePattern (Ident "c" 2))]) (SimpleRhs (13,18) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 2)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'A')))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 2)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'Z'))))) []))])
,(TypeSig (16,1) [(Ident "isLower" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (17,1) (Ident "isLower" 0) [(Equation (17,1) (FunLhs (Ident "isLower" 0) [(VariablePattern (Ident "c" 4))]) (SimpleRhs (17,18) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 4)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'a')))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 4)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'z'))))) []))])
,(TypeSig (20,1) [(Ident "isAlpha" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (21,1) (Ident "isAlpha" 0) [(Equation (21,1) (FunLhs (Ident "isAlpha" 0) [(VariablePattern (Ident "c" 6))]) (SimpleRhs (21,18) (InfixApply (Apply (Variable (QualIdent (Just "Char") (Ident "isUpper" 0))) (Variable (QualIdent Nothing (Ident "c" 6)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (Apply (Variable (QualIdent (Just "Char") (Ident "isLower" 0))) (Variable (QualIdent Nothing (Ident "c" 6))))) []))])
,(TypeSig (24,1) [(Ident "isDigit" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (25,1) (Ident "isDigit" 0) [(Equation (25,1) (FunLhs (Ident "isDigit" 0) [(VariablePattern (Ident "c" 8))]) (SimpleRhs (25,18) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char '0'))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 8))))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 8)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char '9'))))) []))])
,(TypeSig (28,1) [(Ident "isAlphaNum" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (29,1) (Ident "isAlphaNum" 0) [(Equation (29,1) (FunLhs (Ident "isAlphaNum" 0) [(VariablePattern (Ident "c" 10))]) (SimpleRhs (29,18) (InfixApply (Apply (Variable (QualIdent (Just "Char") (Ident "isAlpha" 0))) (Variable (QualIdent Nothing (Ident "c" 10)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (Apply (Variable (QualIdent (Just "Char") (Ident "isDigit" 0))) (Variable (QualIdent Nothing (Ident "c" 10))))) []))])
,(TypeSig (32,1) [(Ident "isOctDigit" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (33,1) (Ident "isOctDigit" 0) [(Equation (33,1) (FunLhs (Ident "isOctDigit" 0) [(VariablePattern (Ident "c" 12))]) (SimpleRhs (33,18) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 12)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char '0')))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 12)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char '7'))))) []))])
,(TypeSig (36,1) [(Ident "isHexDigit" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (37,1) (Ident "isHexDigit" 0) [(Equation (37,1) (FunLhs (Ident "isHexDigit" 0) [(VariablePattern (Ident "c" 14))]) (SimpleRhs (37,18) (InfixApply (Apply (Variable (QualIdent (Just "Char") (Ident "isDigit" 0))) (Variable (QualIdent Nothing (Ident "c" 14)))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 14)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'A')))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 14)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'F'))))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 14)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'a')))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 14)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'f'))))))) []))])
,(TypeSig (41,1) [(Ident "isSpace" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Bool" 0)) [])))
,(FunctionDecl (42,1) (Ident "isSpace" 0) [(Equation (42,1) (FunLhs (Ident "isSpace" 0) [(VariablePattern (Ident "c" 16))]) (SimpleRhs (42,18) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 16))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char ' '))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 16))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\t'))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 16))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\n'))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "c" 16))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Char '\r'))) (InfixOp (QualIdent (Just "Prelude") (Ident "||" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 16)))) (InfixOp (QualIdent (Just "Prelude") (Ident "==" 0))) (Literal (Int (Ident "_" 18) 12))))))) []))])
,(TypeSig (46,1) [(Ident "toUpper" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])))
,(FunctionDecl (47,1) (Ident "toUpper" 0) [(Equation (47,1) (FunLhs (Ident "toUpper" 0) [(VariablePattern (Ident "c" 19))]) (GuardedRhs [(CondExpr (47,11) (Apply (Variable (QualIdent (Just "Char") (Ident "isLower" 0))) (Variable (QualIdent Nothing (Ident "c" 19)))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "chr" 0))) (Paren (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 19)))) (InfixOp (QualIdent (Just "Prelude") (Ident "-" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'a')))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'A'))))))),(CondExpr (48,11) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (Variable (QualIdent Nothing (Ident "c" 19))))] []))])
,(TypeSig (51,1) [(Ident "toLower" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])))
,(FunctionDecl (52,1) (Ident "toLower" 0) [(Equation (52,1) (FunLhs (Ident "toLower" 0) [(VariablePattern (Ident "c" 21))]) (GuardedRhs [(CondExpr (52,11) (Apply (Variable (QualIdent (Just "Char") (Ident "isUpper" 0))) (Variable (QualIdent Nothing (Ident "c" 21)))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "chr" 0))) (Paren (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 21)))) (InfixOp (QualIdent (Just "Prelude") (Ident "-" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'A')))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'a'))))))),(CondExpr (53,11) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (Variable (QualIdent Nothing (Ident "c" 21))))] []))])
,(TypeSig (56,1) [(Ident "digitToInt" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Char" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Int" 0)) [])))
,(FunctionDecl (57,1) (Ident "digitToInt" 0) [(Equation (57,1) (FunLhs (Ident "digitToInt" 0) [(VariablePattern (Ident "c" 23))]) (GuardedRhs [(CondExpr (58,3) (Apply (Variable (QualIdent (Just "Char") (Ident "isDigit" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixOp (QualIdent (Just "Prelude") (Ident "-" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char '0'))))),(CondExpr (59,3) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'A')))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'F'))))) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixOp (QualIdent (Just "Prelude") (Ident "-" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'A')))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Literal (Int (Ident "_" 25) 10)))),(CondExpr (60,3) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'a')))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'f'))))) (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Variable (QualIdent Nothing (Ident "c" 23)))) (InfixOp (QualIdent (Just "Prelude") (Ident "-" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'a')))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Literal (Int (Ident "_" 26) 10)))),(CondExpr (61,3) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (Literal (String "Char.digitToInt: argument is not a digit"))))] []))])
,(TypeSig (64,1) [(Ident "intToDigit" 0)] (ArrowType (ConstructorType (QualIdent Nothing (Ident "Int" 0)) []) (ConstructorType (QualIdent Nothing (Ident "Char" 0)) [])))
,(FunctionDecl (65,1) (Ident "intToDigit" 0) [(Equation (65,1) (FunLhs (Ident "intToDigit" 0) [(VariablePattern (Ident "i" 27))]) (GuardedRhs [(CondExpr (66,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "i" 27))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Literal (Int (Ident "_" 29) 0))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "i" 27))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Literal (Int (Ident "_" 30) 9)))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "chr" 0))) (Paren (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char '0'))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Variable (QualIdent Nothing (Ident "i" 27))))))),(CondExpr (67,3) (InfixApply (InfixApply (Variable (QualIdent Nothing (Ident "i" 27))) (InfixOp (QualIdent (Just "Prelude") (Ident ">=" 0))) (Literal (Int (Ident "_" 31) 10))) (InfixOp (QualIdent (Just "Prelude") (Ident "&&" 0))) (InfixApply (Variable (QualIdent Nothing (Ident "i" 27))) (InfixOp (QualIdent (Just "Prelude") (Ident "<=" 0))) (Literal (Int (Ident "_" 32) 15)))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "chr" 0))) (Paren (InfixApply (InfixApply (Apply (Variable (QualIdent (Just "Prelude") (Ident "ord" 0))) (Literal (Char 'A'))) (InfixOp (QualIdent (Just "Prelude") (Ident "+" 0))) (Variable (QualIdent Nothing (Ident "i" 27)))) (InfixOp (QualIdent (Just "Prelude") (Ident "-" 0))) (Literal (Int (Ident "_" 33) 10)))))),(CondExpr (68,3) (Variable (QualIdent (Just "Prelude") (Ident "otherwise" 0))) (Apply (Variable (QualIdent (Just "Prelude") (Ident "error" 0))) (Literal (String "Char.intToDigit: argument not a digit value"))))] []))])
]
