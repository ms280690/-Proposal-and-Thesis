CurryProg "CurryStringClassifier"
 ["Prelude","Char"]
 [CType ("CurryStringClassifier","Token") Public [] [CCons ("CurryStringClassifier","SmallComment") 1 Public [CTCons ("Prelude","String") []],CCons ("CurryStringClassifier","BigComment") 1 Public [CTCons ("Prelude","String") []],CCons ("CurryStringClassifier","Text") 1 Public [CTCons ("Prelude","String") []],CCons ("CurryStringClassifier","Letter") 1 Public [CTCons ("Prelude","String") []],CCons ("CurryStringClassifier","Code") 1 Public [CTCons ("Prelude","String") []],CCons ("CurryStringClassifier","ModuleHead") 1 Public [CTCons ("Prelude","String") []],CCons ("CurryStringClassifier","Meta") 1 Public [CTCons ("Prelude","String") []]],
  CTypeSyn ("CurryStringClassifier","Tokens") Public [] (CTCons ("Prelude","[]") [CTCons ("CurryStringClassifier","Token") []])]
 [CFunc ("CurryStringClassifier","delimiters") 0 Private (CTCons ("Prelude","String") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))))] []]),
  CFunc ("CurryStringClassifier","headers") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("CurryStringClassifier","infixIDs") 0 Private (CTCons ("Prelude","String") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '%'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '^'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))] []]),
  CFunc ("CurryStringClassifier","isBigComment") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPComb ("CurryStringClassifier","BigComment") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("CurryStringClassifier","isCode") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPComb ("CurryStringClassifier","Code") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("CurryStringClassifier","isComment") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("CurryStringClassifier","isSmallComment")) (CVar (0,"x")))) (CApply (CSymbol ("CurryStringClassifier","isBigComment")) (CVar (0,"x"))))] []]),
  CFunc ("CurryStringClassifier","isLetter") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPComb ("CurryStringClassifier","Letter") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("CurryStringClassifier","isMeta") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPComb ("CurryStringClassifier","Meta") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("CurryStringClassifier","isModuleHead") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPComb ("CurryStringClassifier","ModuleHead") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("CurryStringClassifier","isSep") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Char","isSpace")) (CVar (0,"c")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"c"))) (CSymbol ("CurryStringClassifier","infixIDs")))) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("CurryStringClassifier","isSmallComment") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPComb ("CurryStringClassifier","SmallComment") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("CurryStringClassifier","isText") 1 Public (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"x")) [CBranch (CPComb ("CurryStringClassifier","Text") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("CurryStringClassifier","lineBeginsWith") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"line"),CPVar (1,"s")] [(CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","length")) (CVar (0,"line")))) (CVar (2,"lens")),CSymbol ("Prelude","False")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"line"))) (CVar (1,"s")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"s'"),CPVar (4,"rest")]) (CApply (CApply (CSymbol ("Prelude","splitAt")) (CApply (CSymbol ("Prelude","length")) (CVar (1,"s")))) (CVar (0,"line"))) []] (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"s"))) (CVar (3,"s'")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"rest")))) (CApply (CSymbol ("CurryStringClassifier","isSep")) (CApply (CSymbol ("Prelude","head")) (CVar (4,"rest"))))))))] [CLocalPat (CPVar (2,"lens")) (CApply (CSymbol ("Prelude","length")) (CVar (1,"s"))) []]]),
  CFunc ("CurryStringClassifier","maybeCode") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("CurryStringClassifier","Tokens") []))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"ts")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (0,"s")))) (CVar (1,"ts")))] []]),
  CFunc ("CurryStringClassifier","maybeMo") 2 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"ts")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"s"))) (CSymbol ("Prelude","[]")))) (CVar (1,"ts"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","ModuleHead")) (CVar (0,"s")))) (CCase (CVar (1,"ts")) [CBranch (CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Code") [CPVar (2,"c")],CPVar (3,"ts'")]) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CVar (2,"c"))))) (CVar (3,"ts'"))),CBranch (CPVar (4,"_")) (CVar (1,"ts"))])))] []]),
  CFunc ("CurryStringClassifier","modHead") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("CurryStringClassifier","Tokens") []))) (CRules CFlex [CRule [CPVar (0,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Code") [CPVar (1,"c")],CPVar (2,"ts")]] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (3,"x")] (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"x"))) (CLit (CCharc '\n')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"x"))) (CLit (CCharc '\r')))))) (CVar (1,"c"))) [CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") []]) (CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CVar (0,"fs"))) (CVar (2,"ts"))),CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (4,"n"),CPVar (5,"rest")]]) (CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (0,"fs"))) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"n"))) (CVar (6,"x0")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (5,"rest")))) (CVar (2,"ts")))),CBranch (CPComb ("Prelude","(,)") [CPVar (7,"line"),CPComb ("Prelude","[]") []]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","any")) (CApply (CSymbol ("CurryStringClassifier","lineBeginsWith")) (CVar (7,"line")))) (CSymbol ("CurryStringClassifier","headers")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","ModuleHead")) (CApply (CVar (0,"fs")) (CVar (7,"line"))))) (CApply (CApply (CSymbol ("CurryStringClassifier","modHeadInLine")) (CSymbol ("Prelude","id"))) (CVar (2,"ts"))))) (CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (0,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (1,"c")))) (CVar (2,"ts"))))),CBranch (CPComb ("Prelude","(,)") [CPVar (8,"line"),CPComb ("Prelude",":") [CPVar (9,"n"),CPVar (10,"rest")]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","any")) (CApply (CSymbol ("CurryStringClassifier","lineBeginsWith")) (CVar (8,"line")))) (CSymbol ("CurryStringClassifier","headers")))) (CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (0,"fs"))) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (11,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"line"))) (CVar (11,"x0"))))) (CLambda [CPVar (12,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"n"))) (CVar (12,"x0"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (10,"rest")))) (CVar (2,"ts"))))) (CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (0,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (1,"c")))) (CVar (2,"ts")))))])] [],CRule [CPVar (13,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","BigComment") [CPVar (14,"c")],CPVar (15,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (13,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","BigComment")) (CVar (14,"c")))) (CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CSymbol ("Prelude","id"))) (CVar (15,"ts")))))] [],CRule [CPVar (16,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","SmallComment") [CPVar (17,"c")],CPVar (18,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (16,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","SmallComment")) (CVar (17,"c")))) (CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CSymbol ("Prelude","id"))) (CVar (18,"ts")))))] [],CRule [CPVar (19,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Meta") [CPVar (20,"c")],CPVar (21,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (19,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Meta")) (CVar (20,"c")))) (CVar (21,"ts"))))] [],CRule [CPVar (22,"fs"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (22,"fs")) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("CurryStringClassifier","modHeadInLine") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("CurryStringClassifier","Tokens") []))) (CRules CFlex [CRule [CPVar (0,"fs"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (0,"fs")) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Code") [CPVar (2,"c")],CPVar (3,"ts")]] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (4,"x")] (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x"))) (CLit (CCharc '\n')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x"))) (CLit (CCharc '\r')))))) (CVar (2,"c"))) [CBranch (CPComb ("Prelude","(,)") [CPVar (5,"line"),CPComb ("Prelude",":") [CPVar (6,"n"),CPVar (7,"rest")]]) (CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (1,"fs"))) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"line"))) (CVar (8,"x0"))))) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"n"))) (CVar (9,"x0"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (7,"rest")))) (CVar (3,"ts")))),CBranch (CPVar (10,"_")) (CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CVar (1,"fs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (2,"c")))) (CVar (3,"ts"))))])] [],CRule [CPVar (11,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","BigComment") [CPVar (12,"c")],CPVar (13,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (11,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","BigComment")) (CVar (12,"c")))) (CApply (CApply (CSymbol ("CurryStringClassifier","modHeadInLine")) (CSymbol ("Prelude","id"))) (CVar (13,"ts")))))] [],CRule [CPVar (14,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","SmallComment") [CPVar (15,"c")],CPVar (16,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (14,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","SmallComment")) (CVar (15,"c")))) (CApply (CApply (CSymbol ("CurryStringClassifier","modHeadInLine")) (CSymbol ("Prelude","id"))) (CVar (16,"ts")))))] [],CRule [CPVar (17,"fs"),CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Meta") [CPVar (18,"c")],CPVar (19,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","maybeMo")) (CApply (CVar (17,"fs")) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Meta")) (CVar (18,"c")))) (CVar (19,"ts"))))] []]),
  CFunc ("CurryStringClassifier","plainCode") 1 Public (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","ModuleHead") [CPVar (0,"s")],CPVar (1,"ts")]] [(CSymbol ("Prelude","success"),CCase (CVar (1,"ts")) [CBranch (CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Code") [CPVar (2,"c")],CPVar (3,"ts'")]) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"s"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 1))) (CVar (2,"c")))) (CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (3,"ts'"))))),CBranch (CPVar (4,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"s"))) (CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (1,"ts"))))])] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Code") [CPVar (5,"s")],CPVar (6,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"s"))) (CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (6,"ts"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Text") [CPVar (7,"s")],CPVar (8,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (7,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (8,"ts"))))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Letter") [CPVar (9,"s")],CPVar (10,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (9,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (10,"ts"))))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","BigComment") [CPVar (11,"_")],CPVar (12,"ts")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (12,"ts")))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","SmallComment") [CPVar (13,"_")],CPVar (14,"ts")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (14,"ts")))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Meta") [CPVar (15,"s")],CPVar (16,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (15,"s"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("CurryStringClassifier","plainCode")) (CVar (16,"ts"))))))] [],CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] []]),
  CFunc ("CurryStringClassifier","readScan") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("CurryStringClassifier","Tokens") []])) (CRules CFlex [CRule [CPVar (0,"fn")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Prelude","readFile")) (CVar (0,"fn")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("CurryStringClassifier","scan"))))] []]),
  CFunc ("CurryStringClassifier","scan") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("CurryStringClassifier","Tokens") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CurryStringClassifier","modHead")) (CSymbol ("Prelude","id"))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CLit (CIntc 1))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (1,"x")))) (CVar (1,"x"))) (CVar (0,"s"))))] [CLocalVar (1,"x")]]),
  CFunc ("CurryStringClassifier","stateScan") 4 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("CurryStringClassifier","Token") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("CurryStringClassifier","Tokens") []))))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"token"),CPVar (2,"x"),CPComb ("Prelude","[]") []] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x"))) (CSymbol ("Prelude","[]")),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"token"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (3,"_"),CPComb ("CurryStringClassifier","Code") [CPVar (4,"co")],CPVar (5,"x"),CPComb ("Prelude",":") [CPVar (6,"c"),CPComb ("Prelude","[]") []]] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (5,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"c"))) (CSymbol ("Prelude","[]"))),CApply (CApply (CSymbol ("CurryStringClassifier","maybeCode")) (CVar (4,"co"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (7,"_"),CPComb ("CurryStringClassifier","Text") [CPVar (8,"t")],CPVar (9,"x"),CPComb ("Prelude",":") [CPVar (10,"c"),CPComb ("Prelude","[]") []]] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (9,"x"))) (CSymbol ("Prelude","[]")),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"c"))) (CLit (CCharc '"')))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Text")) (CVar (8,"t")))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))] [],CRule [CPVar (11,"_"),CPComb ("CurryStringClassifier","BigComment") [CPVar (12,"_")],CPVar (13,"x"),CPComb ("Prelude",":") [CPVar (14,"_"),CPComb ("Prelude","[]") []]] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (13,"x"))) (CSymbol ("Prelude","[]")),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))] [],CRule [CPVar (15,"_"),CPComb ("CurryStringClassifier","Meta") [CPVar (16,"_")],CPVar (17,"x"),CPComb ("Prelude",":") [CPVar (18,"_"),CPComb ("Prelude","[]") []]] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (17,"x"))) (CSymbol ("Prelude","[]")),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))] [],CRule [CPVar (19,"line"),CPComb ("CurryStringClassifier","Code") [CPVar (20,"co")],CPVar (21,"x"),CPComb ("Prelude",":") [CPVar (22,"c"),CPComb ("Prelude",":") [CPVar (23,"c'"),CPVar (24,"cs")]]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (22,"c"))) (CLit (CCharc '"')),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (21,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("CurryStringClassifier","maybeCode")) (CVar (20,"co"))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","Text")) (CVar (25,"y")))) (CVar (25,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (23,"c'"))) (CVar (24,"cs")))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (22,"c"))) (CLit (CCharc '-')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"c'"))) (CLit (CCharc '-'))),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (26,"comment"),CPVar (27,"rest")]) (CApply (CApply (CSymbol ("Prelude","span")) (CLambda [CPVar (28,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (28,"x0"))) (CLit (CCharc '\n'))))) (CVar (24,"cs"))) []] (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (21,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("CurryStringClassifier","maybeCode")) (CVar (20,"co"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","SmallComment")) (CVar (26,"comment")))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (25,"y")))) (CVar (25,"y"))) (CVar (27,"rest"))))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (22,"c"))) (CLit (CCharc '{')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"c'"))) (CLit (CCharc '-'))),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (21,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("CurryStringClassifier","maybeCode")) (CVar (20,"co"))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","BigComment")) (CVar (25,"y")))) (CVar (25,"y"))) (CVar (24,"cs"))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (22,"c"))) (CLit (CCharc '{')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"c'"))) (CLit (CCharc '+'))),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (21,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("CurryStringClassifier","maybeCode")) (CVar (20,"co"))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","Meta")) (CVar (25,"y")))) (CVar (25,"y"))) (CVar (24,"cs"))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"c'"))) (CLit (CCharc '\'')))) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (22,"c"))) (CApply (CApply (CSymbol ("Prelude","++")) (CSymbol ("CurryStringClassifier","infixIDs"))) (CSymbol ("CurryStringClassifier","delimiters")))),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (21,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (22,"c"))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("CurryStringClassifier","maybeCode")) (CVar (20,"co")))) (CCase (CVar (24,"cs")) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc '\\'),CPComb ("Prelude",":") [CPVar (29,"l"),CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (30,"rest")]]]) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Letter")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (29,"l"))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (25,"y")))) (CVar (25,"y"))) (CVar (30,"rest")))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '\\'),CPComb ("Prelude",":") [CPVar (31,"a"),CPComb ("Prelude",":") [CPVar (32,"b"),CPComb ("Prelude",":") [CPVar (33,"d"),CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (34,"rest")]]]]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("Char","isDigit"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (31,"a"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (32,"b"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (33,"d"))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Letter")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (31,"a"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (32,"b"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (33,"d"))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (25,"y")))) (CVar (25,"y"))) (CVar (34,"rest"))))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","error"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (19,"line")))))),CBranch (CPComb ("Prelude",":") [CPVar (35,"l"),CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (36,"rest")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Letter")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (35,"l"))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (25,"y")))) (CVar (25,"y"))) (CVar (36,"rest")))),CBranch (CPVar (37,"_")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","error"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (19,"line")))))]))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (22,"c"))) (CLit (CCharc '\n')),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (21,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (22,"c"))) (CVar (25,"y"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (19,"line"))) (CLit (CIntc 1)))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (20,"co")))) (CVar (25,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (23,"c'"))) (CVar (24,"cs"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (21,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (22,"c"))) (CVar (25,"y"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (19,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (20,"co")))) (CVar (25,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (23,"c'"))) (CVar (24,"cs")))))] [CLocalVar (25,"y")],CRule [CPVar (38,"line"),CPComb ("CurryStringClassifier","BigComment") [CPVar (39,"co")],CPVar (40,"x"),CPComb ("Prelude",":") [CPVar (41,"c"),CPComb ("Prelude",":") [CPVar (42,"c'"),CPVar (43,"cs")]]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (41,"c"))) (CLit (CCharc '-')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (42,"c'"))) (CLit (CCharc '}'))),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (40,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","BigComment")) (CVar (39,"co")))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (38,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (44,"y")))) (CVar (44,"y"))) (CVar (43,"cs"))))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (41,"c"))) (CLit (CCharc '\n')),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (40,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (41,"c"))) (CVar (44,"y"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (38,"line"))) (CLit (CIntc 1)))) (CApply (CSymbol ("CurryStringClassifier","BigComment")) (CVar (39,"co")))) (CVar (44,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (42,"c'"))) (CVar (43,"cs"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (40,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (41,"c"))) (CVar (44,"y"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (38,"line"))) (CApply (CSymbol ("CurryStringClassifier","BigComment")) (CVar (39,"co")))) (CVar (44,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (42,"c'"))) (CVar (43,"cs")))))] [CLocalVar (44,"y")],CRule [CPVar (45,"line"),CPComb ("CurryStringClassifier","Meta") [CPVar (46,"co")],CPVar (47,"x"),CPComb ("Prelude",":") [CPVar (48,"c"),CPComb ("Prelude",":") [CPVar (49,"c'"),CPVar (50,"cs")]]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (48,"c"))) (CLit (CCharc '+')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (49,"c'"))) (CLit (CCharc '}'))),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (47,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Meta")) (CVar (46,"co")))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (45,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (51,"y")))) (CVar (51,"y"))) (CVar (50,"cs"))))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (48,"c"))) (CLit (CCharc '\n')),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (47,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (48,"c"))) (CVar (51,"y"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (45,"line"))) (CLit (CIntc 1)))) (CApply (CSymbol ("CurryStringClassifier","Meta")) (CVar (46,"co")))) (CVar (51,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (49,"c'"))) (CVar (50,"cs"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (47,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (48,"c"))) (CVar (51,"y"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (45,"line"))) (CApply (CSymbol ("CurryStringClassifier","Meta")) (CVar (46,"co")))) (CVar (51,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (49,"c'"))) (CVar (50,"cs")))))] [CLocalVar (51,"y")],CRule [CPVar (52,"line"),CPComb ("CurryStringClassifier","Text") [CPVar (53,"t")],CPVar (54,"x"),CPComb ("Prelude",":") [CPVar (55,"c"),CPComb ("Prelude",":") [CPVar (56,"c'"),CPVar (57,"cs")]]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (55,"c"))) (CLit (CCharc '"')),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (54,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Text")) (CVar (53,"t")))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (52,"line"))) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (58,"y")))) (CVar (58,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (56,"c'"))) (CVar (57,"cs")))))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (55,"c"))) (CLit (CCharc '\\')),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (54,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (55,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (56,"c'"))) (CVar (58,"y")))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (52,"line"))) (CApply (CSymbol ("CurryStringClassifier","Text")) (CVar (53,"t")))) (CVar (58,"y"))) (CVar (57,"cs")))),(CApply (CApply (CSymbol ("Prelude","elem")) (CVar (55,"c"))) (CSymbol ("CurryStringClassifier","toBeEscaped")),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","error"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (55,"c"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (52,"line"))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (54,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (55,"c"))) (CVar (58,"y"))))) (CApply (CApply (CApply (CApply (CSymbol ("CurryStringClassifier","stateScan")) (CVar (52,"line"))) (CApply (CSymbol ("CurryStringClassifier","Text")) (CVar (53,"t")))) (CVar (58,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (56,"c'"))) (CVar (57,"cs")))))] [CLocalVar (58,"y")]]),
  CFunc ("CurryStringClassifier","testScan") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"fn")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"c")) (CApply (CSymbol ("Prelude","readFile")) (CVar (0,"fn"))),CSExpr (CApply (CSymbol ("Prelude","print")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CApply (CSymbol ("CurryStringClassifier","scan")) (CVar (1,"c"))))) (CVar (1,"c"))))])] []]),
  CFunc ("CurryStringClassifier","testWeave") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"fn")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"c")) (CApply (CSymbol ("Prelude","readFile")) (CVar (0,"fn"))),CSExpr (CApply (CSymbol ("Prelude","print")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CApply (CSymbol ("CurryStringClassifier","weave")) (CApply (CSymbol ("CurryStringClassifier","unweaveCode")) (CApply (CSymbol ("CurryStringClassifier","scan")) (CVar (1,"c"))))))) (CVar (1,"c"))))])] []]),
  CFunc ("CurryStringClassifier","toBeEscaped") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\t'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("CurryStringClassifier","unscan") 1 Public (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("Prelude","String") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","ModuleHead") [CPVar (0,"s")],CPVar (1,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"s"))) (CCase (CVar (1,"ts")) [CBranch (CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Code") [CPComb ("Prelude",":") [CPVar (2,"_"),CPVar (3,"c")]],CPVar (4,"ts'")]) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CurryStringClassifier","Code")) (CVar (3,"c")))) (CVar (4,"ts'")))),CBranch (CPVar (5,"_")) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CVar (1,"ts")))]))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Code") [CPVar (6,"s")],CPVar (7,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"s"))) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CVar (7,"ts"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Text") [CPVar (8,"s")],CPVar (9,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CVar (9,"ts"))))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Letter") [CPVar (10,"s")],CPVar (11,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (10,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CVar (11,"ts"))))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","BigComment") [CPVar (12,"s")],CPVar (13,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (12,"s"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CVar (13,"ts"))))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","SmallComment") [CPVar (14,"s")],CPVar (15,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (14,"s"))) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CVar (15,"ts")))))] [],CRule [CPComb ("Prelude",":") [CPComb ("CurryStringClassifier","Meta") [CPVar (16,"s")],CPVar (17,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (16,"s"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("CurryStringClassifier","unscan")) (CVar (17,"ts"))))))] [],CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] []]),
  CFunc ("CurryStringClassifier","unweaveCode") 1 Private (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("Prelude","(,)") [CTCons ("CurryStringClassifier","Tokens") [],CTCons ("CurryStringClassifier","Tokens") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"t"),CPVar (1,"ts")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"cs"),CPVar (3,"ncs")]) (CApply (CSymbol ("CurryStringClassifier","unweaveCode")) (CVar (1,"ts"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("CurryStringClassifier","isCode")) (CVar (0,"t")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"t"))) (CVar (2,"cs")))) (CVar (3,"ncs")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"cs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"t"))) (CVar (3,"ncs"))))))] []]),
  CFunc ("CurryStringClassifier","weave") 1 Private (CTCons ("Prelude","untyped") []) (CRules CFlex [CRule [CPVar (0,"xys")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"xys")) [CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") []]) (CSymbol ("Prelude","[]")),CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (1,"y"),CPComb ("Prelude","[]") []]]) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"y"))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPVar (2,"x"),CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") []]) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPVar (3,"x"),CPVar (4,"xs")],CPComb ("Prelude",":") [CPVar (5,"y"),CPVar (6,"ys")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"y"))) (CApply (CSymbol ("CurryStringClassifier","weave")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (4,"xs"))) (CVar (6,"ys"))))))])] []]),
  CFunc ("CurryStringClassifier","weaveIntoCode") 2 Private (CFuncType (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("CurryStringClassifier","Tokens") [])) (CFuncType (CTCons ("CurryStringClassifier","Tokens") []) (CTCons ("CurryStringClassifier","Tokens") []))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"ts")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"cs"),CPVar (3,"ncs")]) (CApply (CSymbol ("CurryStringClassifier","unweaveCode")) (CVar (1,"ts"))) []] (CApply (CSymbol ("CurryStringClassifier","weave")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (2,"cs")))) (CVar (3,"ncs")))))] []])]
 []
