Prog "Program1" ["Prelude"] [Type ("Program1","Stack") Public [0] [Cons ("Program1","Empty") 0 Public [],Cons ("Program1","Push") 2 Public [TVar 0,TCons ("Program1","Stack") [TVar 0]]]] [Func ("Program1","append1") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Program1","append1") [Var 4,Var 2]])])),Func ("Program1","top") 1 Public (FuncType (TCons ("Program1","Stack") [TCons ("Program1","Stack") [TVar 0]]) (TCons ("Program1","Stack") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Program1","Empty") []) (Comb ConsCall ("Program1","Empty") []),Branch (Pattern ("Program1","Push") [2,3]) (Var 2)])),Func ("Program1","pop") 1 Public (FuncType (TCons ("Program1","Stack") [TVar 0]) (TCons ("Program1","Stack") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Program1","Empty") []) (Comb ConsCall ("Program1","Empty") []),Branch (Pattern ("Program1","Push") [2,3]) (Var 3)])),Func ("Program1","member") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Var 3],Comb FuncCall ("Program1","member") [Var 1,Var 4]])])),Func ("Program1","insert") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Or (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Program1","insert") [Var 1,Var 4]])]) (Comb ConsCall ("Prelude",":") [Var 1,Var 2]))),Func ("Program1","main") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude","print") [Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]]]]))] []